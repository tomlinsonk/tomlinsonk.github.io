
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    [{"authors":["admin"],"categories":null,"content":"I‚Äôm a Computer Science PhD candidate at Cornell University advised by Jon Kleinberg and collaborating with Johan Ugander on problems around instant-runoff voting. More broadly, I‚Äôm interested in modeling and understanding human preferences through algorithmic and machine learning methods. During my PhD, I‚Äôve interned at Microsoft Research with Jennifer Neville on recommendations in networks and at Microsoft‚Äôs Office of Applied Research with Longqi Yang and Mengting Wan on multi-organization recommendation. In Winter and Spring 2023, I was a visiting instructor at Carleton College teaching Data Structures and Mathematics of Computer Science.\nI‚Äôll be wrapping up my PhD this summer and joining the Augmented Learning and Reasoning group at Microsoft Research!\nWhen away from my desk, I spend my time playing guitar, building 8-bit computers, playing video games, biking, listening to music, flying quadcopters, bouldering, and playing pool. I have additional interests in spaceflight, Premier League football, and Formula 1.\nRecent news üéìJul ‚Äò24 Passed my B Exam!\nü™ß May ‚Äò24 Presented a poster on ranking with consideration at AAMAS ‚Äò24.\nüì¢ Apr ‚Äò24 Wrote a blog post for AIhub about the moderating effect of instant runoff voting.\nMar ‚Äò24 Accepted a Senior Researcher position at Microsoft Research, in the Augmented Learning and Reasoning group!\nüó£ Feb ‚Äò24 Gave a talk on the moderating effect of instant runoff voting at AAAI ‚Äò24.\nAll news ","date":1715723491,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1715723491,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I‚Äôm a Computer Science PhD candidate at Cornell University advised by Jon Kleinberg and collaborating with Johan Ugander on problems around instant-runoff voting. More broadly, I‚Äôm interested in modeling and understanding human preferences through algorithmic and machine learning methods.","tags":null,"title":"Kiran Tomlinson","type":"authors"},{"authors":[],"categories":[6502],"content":"Ok, I‚Äôm a bit behind on these posts‚Ä¶. I actually started writing this emulator in December 2022, in preparation for teaching a class in Java at Carleton. Since then, it‚Äôs become a nearly full replica of the KiT 2 (with the exception of the sound card‚Äìto be discussed in a future post). I would call it partially cycle-accurate; the emulator tracks how many cycles each instruction takes, but doesn‚Äôt resolve within-cycle timings. It supports almost every 65C02 instruction, with the exceptions of STP, WAI, TSB, and TRB (which I‚Äôve never used, although it would be easy to add support for them). I referred to this great resource on the 6502 instruction set very often while writing the emulator, as well as this page on the 65C02 instruction set (which adds a few instructions and has slightly different cycle counts).\nThe major components I‚Äôm emulating are the CPU, RAM, ROM, SSD, graphics card, PS2 keyboard interface, UART, and VIAs. The components talk to each other through a Bus class, which they can write data to and read data from. Here‚Äôs the core of the emulation loop, omitting some details:\nwhile (true) { if (doReset) { // reset everything } currTime = System.nanoTime(); // Execute next instruction cpu.step(); // Simulate execution time cycleCount = cpu.getCycleCount(); newCycles = (int)(cycleCount - prevCycleCount); nsElapsed = 480 * newCycles; while ((System.nanoTime() - currTime) \u0026lt; nsElapsed) { continue; } prevCycleCount = cycleCount; // VIA timers need to know how many cycles have elapsed via1.updateCycleCount(newCycles); via2.updateCycleCount(newCycles); } The CPU class looks roughly as follows:\n// registers public class CPU { abstract class Instruction { int opcode; int bytes; int cycles; String mnemonic; AddressingMode addrMode; public abstract void exec(); // ... } // all the instructions // registers private int PC; private int A; private int X; private int Y; private int S; // flags private boolean C; private boolean N; private boolean Z; private boolean V; private boolean I; private boolean D; private Bus bus; private Instruction[] instructions; private long cycleCount; // ... public void step() { if (bus.getIRQ() \u0026amp;\u0026amp; !I) { doIRQ(false); } else { int opcode = bus.read(PC); Instruction inst = this.instructions[opcode]; cycleCount += inst.cycles; inst.exec(); } } Here‚Äôs what a typical instruction looks like. I usually have an abstract class for a collection of instructions (to maximize code reuse), with concrete subclasses for each addressing mode (which each have their own opcodes and cycle counts):\nabstract class LDA extends Instruction { LDA(String mnemonic, CPU.AddressingMode addrMode, int opcode, int bytes, int cycles) { super(mnemonic, addrMode, opcode, bytes, cycles); } public void exec() { A = getLoadVal(this.addrMode); // getLoadVal reads from the bus according to the addressing mode (and increments the PC accordingly) updateNZ(A); // updates the N and Z flags according to the newly loaded value incPC(); // increment the program counter } } class LDAImmediate extends LDA { LDAImmediate() { super(\u0026#34;lda\u0026#34;, AddressingMode.IMMEDIATE, 0xA9, 2, 2); } } // all the other addressing modes for LDA ... It was pretty amazing to go from coding up the effects of each instruction on each register and flag to a running computer. Here‚Äôs what the emulator currently looks like:\nThe emulator will run all the programs I‚Äôve written for the KiT, including the Mandelbrot generator:\nIt also supports several of the graphics modes my graphics card uses (although not all of them‚ÄìI haven‚Äôt bothered implementing the modes I don‚Äôt use). Here‚Äôs the high resolution two-color mode:\nI‚Äôve been using the emulator to help speed up iterative development, which was really helpful in implementing Tetris:\nAs you can see in the screenshots, the emulator supports ‚ÄúTurbo‚Äù mode, which skips the busy-waiting loop for maximum speed. It usually reaches 30-35 MHz in Turbo mode on my 2018 MacBook Pro, meaning my emulator is efficient enough to run at nearly 20x native speed!\nIf you want to run the KiT yourself or even write some 6502 code for it, now you can! The emulator is publicly available at https://github.com/tomlinsonk/kit-emu.\nPrevious post: Part 6 ","date":1716151656,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1716151656,"objectID":"b89e3b4b6347c8272c91a918acc5ab45","permalink":"https://www.kirantomlinson.com/post/6502-7/","publishdate":"2024-05-19T16:47:36-04:00","relpermalink":"/post/6502-7/","section":"post","summary":"The write-test-debug loop for the KiT has been massively improved by having an emulator--and now I can run KiT code away from home!","tags":[],"title":"Building a 6502 Computer, Part 7: Emulator","type":"post"},{"authors":["Kiran Tomlinson","Tanvi Namjoshi","Johan Ugander","Jon Kleinberg"],"categories":[],"content":"","date":1715723491,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1715723491,"objectID":"17efef067ce2d1ada7be3ffc537ab297","permalink":"https://www.kirantomlinson.com/publication/2024-tomlinson-replicating/","publishdate":"2024-05-14T17:51:31-04:00","relpermalink":"/publication/2024-tomlinson-replicating/","section":"publication","summary":"A core tension in the study of plurality elections is the clash between the classic Hotelling-Downs model, which predicts that two office-seeking candidates should position themselves at the median voter's policy, and the empirical observation that real-world democracies often have two major parties with divergent policies. Motivated by this tension and drawing from bounded rationality, we introduce a dynamic model of candidate positioning based on a simple behavioral heuristic: candidates imitate the policy of previous winners. The resulting model is closely connected to evolutionary replicator dynamics and exhibits complex behavior, despite its simplicity. For uniformly-distributed voters, we prove that when there are k = 2, 3, or 4 candidates per election, any symmetric candidate distribution converges over time to a concentration of candidates at the center. With k ‚â• 5, however, we prove that the candidate distribution does not converge to the center. For initial distributions without any extreme candidates, we prove a stronger statement than non-convergence, showing that the density in an interval around the center goes to zero when k ‚â• 5. As a matter of robustness, our conclusions are qualitatively unchanged if a small fraction of candidates are not winner-copiers and are instead positioned uniformly at random. Beyond our theoretical analysis, we illustrate our results in simulation; for five or more candidates, we find a tendency towards the emergence of two clusters, a mechanism suggestive of Duverger's Law, the empirical finding that plurality leads to two-party systems. Our simulations also explore several variations of the model, including non-uniform voter distributions and other forms of noise, which exhibit similar convergence patterns. Finally, we discuss the relationship between our model and prior work on strategic equilibria of candidate positioning games.","tags":["Voting"],"title":"Replicating Electoral Success","type":"publication"},{"authors":["Kiran Tomlinson","Johan Ugander","Jon Kleinberg"],"categories":["Voting"],"content":"","date":1708442434,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1708442434,"objectID":"ce8d7aedf7ae51dea976bf0b2673e3f6","permalink":"https://www.kirantomlinson.com/publication/2023-tomlinson-moderation/","publishdate":"2023-03-20T10:20:34-05:00","relpermalink":"/publication/2023-tomlinson-moderation/","section":"publication","summary":"We prove that instant runoff voting favors moderate candidates in a way that plurality does not in a 1-dimensional preference model.","tags":[],"title":"The Moderating Effect of Instant Runoff Voting","type":"publication"},{"authors":["Ben Aoki-Sherwood","Catherine Bregou","David Liben-Nowell","Kiran Tomlinson","Thomas Zeng"],"categories":["Discrete Choice"],"content":"","date":1705697928,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1705697928,"objectID":"9f5746c0c2e16667c8c216ff4fadb79b","permalink":"https://www.kirantomlinson.com/publication/2024-aoki-sherwood-bounding/","publishdate":"2024-02-12T15:58:48-05:00","relpermalink":"/publication/2024-aoki-sherwood-bounding/","section":"publication","summary":"  A common theory of choice posits that individuals make choices in a two-step process, first selecting some subset of the alternatives to consider before making a selection from the resulting consideration set. However, inferring unobserved consideration sets (or item consideration probabilities) in this \"consider then choose\" setting poses significant challenges, because even simple models of consideration with strong independence assumptions are not identifiable, even if item utilities are known. We consider a natural extension of consider-then-choose models to a top-k ranking setting, where we assume rankings are constructed according to a Plackett-Luce model after sampling a consideration set. While item consideration probabilities remain non-identified in this setting, we prove that knowledge of item utilities allows us to infer bounds on the relative sizes of consideration probabilities. Additionally, given a condition on the expected consideration set size, we derive absolute upper and lower bounds on item consideration probabilities. We also provide algorithms to tighten those bounds on consideration probabilities by propagating inferred constraints. Thus, we show that we can learn useful information about consideration probabilities despite not being able to identify them precisely. We demonstrate our methods on a ranking dataset from a psychology experiment with two different ranking tasks (one with fixed consideration sets and one with unknown consideration sets). This combination of data allows us to estimate utilities and then learn about unknown consideration probabilities using our bounds. ","tags":[],"title":"Bounding Consideration Probabilities in Consider-Then-Choose Ranking Models","type":"publication"},{"authors":["Kiran Tomlinson","Austin R. Benson"],"categories":["Discrete Choice"],"content":"","date":1692273600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1692273600,"objectID":"45003e1549a424dc98e93b520a502bce","permalink":"https://www.kirantomlinson.com/publication/2022-tomlinson-graph-choice/","publishdate":"2022-05-23T00:12:36-04:00","relpermalink":"/publication/2022-tomlinson-graph-choice/","section":"publication","summary":"We adapt graph learning methods to incorporate network structure into discrete choice models.","tags":[],"title":"Graph-based Methods for Discrete Choice","type":"publication"},{"authors":["Kiran Tomlinson","Jennifer Neville","Longqi Yang","Mengting Wan","Cao Lu"],"categories":["Recommendation"],"content":"","date":1691598444,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1691598444,"objectID":"15c50dcc24b324f0034dd469e4b5c3d7","permalink":"https://www.kirantomlinson.com/publication/2023-tomlinson-workplace-recommendation/","publishdate":"2023-08-09T12:27:24-04:00","relpermalink":"/publication/2023-tomlinson-workplace-recommendation/","section":"publication","summary":"Workplace communication software such as Microsoft Teams, Slack, and Google Workspace have become integral to workplace collaboration, especially due to the rise of remote work. By making it easier to access relevant or useful information, recommender systems for these platforms have the potential to improve efficient cross-team information flow through a company's communication network. While there has been some recent work on recommendation approaches that optimize network objectives, these have focused on static graphs. In this work, we focus on optimizing information flow, which is highly temporal and presents a number of novel algorithmic challenges. To overcome these, we develop tractable measures of temporal information flow and design efficient online recommendation algorithms that jointly optimize for relevance and cross-team information flow. We demonstrate the potential for impact of these approaches on a rich multi-modal dataset capturing one month of communication between 180k Microsoft employees through email, chats and posts on Microsoft Teams, and file sharing on SharePoint. We design an offline model-based evaluation pipeline to estimate the effects of recommendations on the temporal communication network. We show that our recommendation algorithms can significantly improve cross-team information flow with only a small decrease in traditional relevance metrics.","tags":[],"title":"Workplace Recommendation with Temporal Network Objectives","type":"publication"},{"authors":["Kiran Tomlinson","Mengting Wan","Cao Lu","Brent Hecht","Jaime Teevan","Longqi Yang"],"categories":["Recommendation"],"content":"","date":1686257641,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1686257641,"objectID":"c00bba49c365cb3bf905b5e323afd0fd","permalink":"https://www.kirantomlinson.com/publication/2023-tomlinson-targeted-training/","publishdate":"2023-06-08T15:54:01-05:00","relpermalink":"/publication/2023-tomlinson-targeted-training/","section":"publication","summary":"We investigate the challenge of recommending items in multiple non-overlapping organizations and develop targeted training, a surprising simple and effective transfer-learning approach.","tags":[],"title":"Targeted Training for Multi-Organization Recommendation","type":"publication"},{"authors":[],"categories":[6502],"content":"In the last post, I described adding serial I/O to the KiT 1; that was the last major hardware addition I made to the breadboard-based version. The next step was a big one: going from breadboard to printed circuit board (PCB). After seeing James Sharman‚Äôs incredible success with his pipelined 8-bit CPU, I decided to use EasyEDA as my PCB design tool. I settled on a modular design, where the core functionality would be included in the main board (CPU, RAM, ROM, UART, VIAs) and additional features would be provided trough 5 expansion slots (graphics, sound, storage, etc). After a lot of time spent fiddling around with positioning and tons of manual wiring, here‚Äôs what my main board design ended up looking like:\nThe main board of the new KiT 2 is overall quite similar to the breadboard KiT 1, with few exceptions:\nI removed the LCD and graphics card, since these would be handled by expansion cards (in fact, I haven‚Äôt bothered with an LCD now that I have a good graphics card). There is one more VIA on the KiT 2 (I call the extra two ports C and D). On the KiT 1, VIA port A was used for keyboard input and port B was used for the LCD. On the KiT 2, port A is still used for keyboard input, but port B is simply exposed with a pin header for versatility (like GPIO pins on a Raspberry Pi). Ports C and D are tied into the expansion slots: C is wired to slot 1, while D wired to slots 2-5. The idea is to use slot 1 for cards that need continuous access to a dedicated port, while slots 2-5 can share a single port for intermittent use. I‚Äôm using slot 1 for the graphics card, where port C controls the graphics mode. It would be possible to just use port D for this, but that would require some additional latching and dedicated address space. This solution makes controlling graphics modes very simple! I replaced the address control logic chips with two programmable GAL chips (nice blog post about GALs here), one to control all of the chip select lines for the main board (the Main GAL) and one to control the slot select lines (the Slot GAL). The really nice feature of GALs is that I can reprogram them using my EEPROM programmer to rearrange the address space on the fly. You just specify the pin logic in a .pld file, assemble it into a .jed file using Galette, and flash that to the GAL chip using minipro. Here‚Äôs a snippet of my Main GAL .pld file showing the syntax for specifying I/O logic (note: * is and, + is or, and / is not; the .pld file also lets you name the pins, which I‚Äôve done here): ROM = a15 * a14 + a15 * a13 + a15 * a12 RAM = PHI2 * /a15 * /a14 + PHI2 * /a15 * /a13 VIA1 = /a15 * a14 * a13 * a12 * a11 * /a10 * /a9 * /a8 VIA2 = /a15 * a14 * a13 * a12 * a11 * /a10 * /a9 * a8 UART = /a15 * a14 * a13 * a12 * a11 * /a10 * a9 * /a8 I decided to use surface-mount components (except the main chips, which are all DIP). Since I was expecting to hand-solder everything, I picked one of the larger standard component sizes: 1206. This ended up working out well enough‚Äìthey were small enough to make layout possible, but also big enough to hand-solder without too much hassle. The board layout itself was pretty challenging, especially the routing (which is NP-hard, after all). Since I knew nothing about PCB design, I did a bunch of internet digging and tried to follow these basic guidelines:\nfour layers: power and ground planes in the middle and two signal layers on the outside thin signal traces, thick power traces minimize number of vias only 45-degree angles for traces (no right angles) top layer has mostly horizontal traces, bottom layer has mostly vertical traces. I‚Äôm not sure exactly how long all the routing took, but it was definitely many hours. In parallel, I was also working on the graphics card, since that would be my primary output from the KiT 2. I used the same basic design as the KiT 1‚Äôs graphics card, but designed it to fit into expansion slot 1, added two more DPRAM chips (6K total!) so I‚Äôd be able to use all video modes supported by the MC6847, and tied in the video mode lines into port C in the expansion slot so that I could control video modes programmatically rather than with DIP switches as in the KiT 1. Here‚Äôs the final PCB layout for the graphics card:\nFinally, I made a prototyping card that would let me develop other expansion cards without needing to get a new PCB manufactured each time:\nOnce the designs were done, I placed an order with JLCPCB and ordered all the components (mostly from Mouser and Jameco), although I got some of the obsolete components from random sellers on eBay (like the GALs). The boards turned out looking great! Here are some pictures at various stages of soldering and fit-testing:\nAfter installing of the chips, I wrote a simple program to blink an LED hooked up to port B. It was alive!\nI eventually got around to soldering up the graphics card too:\nAfter debugging a bunch of issues listed below, I was able to get it working and take advantage of the newly available 6K graphics modes:\nOf ‚Ä¶","date":1685547797,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1685547797,"objectID":"2e9491e1bd3eb5b2a9988e6a5c409b39","permalink":"https://www.kirantomlinson.com/post/6502-6/","publishdate":"2023-05-31T10:43:17-05:00","relpermalink":"/post/6502-6/","section":"post","summary":"After much design, soldering, and debugging, the breadboard KiT 1 has been succeeded by an improved KiT 2 on PCB!","tags":[],"title":"Building a 6502 Computer, Part 6: KiT 2","type":"post"},{"authors":[],"categories":[6502],"content":"After adding a graphics card to my 6502-based computer, the next step was to make programming it easier. Up to this point in the build, I had to remove the ROM chip and manually flash it with my TL866II Plus Programmer each time I wanted to run a new program. This made debugging quite tedious. The solution: a serial input/output port that would allow me to connect my laptop to the 6502 and send data back and forth. That way, the 6502 could load a program over the serial port directly into RAM and execute it. I already had a USB to UART adapter, so I did some research and selected the 16C550 as a good option for a UART chip available in DIP form.\nJust recently, Ben Eater actually released a few videos and a kit for adding an RS-232 serial port to his 6502 kit. I might have gone this route had it been released 6 months earlier, but it‚Äôs probably good that I got the experience designing and testing my own approach. Ben‚Äôs version uses the W65C51 ACIA chip, which unfortunately has a known bug. It‚Äôs possible to work around it, but this dissuaded me from the 65C51.\nThe 16C550 has a bunch of neat features, including a software-selectable baud rate and 16-byte receive and transmit queues. It can either generate interrupts when data arrives or operate in polled mode where the CPU repeatedly checks whether data is available.\nHere‚Äôs how the chip fits in with my build:\nThe data and address lines are driven directly by the data and address bus. I allocated addresses 7820-782F for the UART and added address decode logic to send the !UART signal low when any of these addresses are accessed. This allows reads and writes1 to the UART registers (including mode configuration registers and the receive/transmit buffers). Using the 1MHz system clock (signal PHI2 in the diagram above), I found a way to get a standard baud rate, 4800 (480 bytes/s with the serial port in 8N1 mode): the 16C550 allows you to set a divisor of the clock rate to set 16 times the desired baud rate. So, with 1,000,000 clock cycles per second, a divisor of 13 gives a baud rate of 1,000,000 / (13 * 16) = 4808‚Äìdefinitely close enough to 4800 to work! 480 bytes/s is incredibly slow by today‚Äôs standards, but good enough for uploading programs to the breadboard computer!\nI wrote a Python script to transmit a program from my laptop to the UART, which starts out by sending the file size, a simple checksum, and the start address of the program. It then sends the actual program bytes, which a loading program on the breadboard computer copies into RAM starting at the start address. It can then verify that the checksum matches and run the program in RAM after it has received the declared number of bytes! Here‚Äôs some of the 6502-side code that reads in the program into target_addr:\nstz checksum_addr stz checksum_addr+1 // initialize checksum ldx #0 // store num bytes copied low byte in X stz zp.B // store num pages copied in zp.B ldy #0 // store 0 in y for indirect addressing mov2 target_addr : zp.C // store the target address in zp.C,D loop: jsr uart.read_byte // get a byte sta (zp.C),y // store the byte in the pointer in zp.C,D clc adc checksum_addr sta checksum_addr // update the first checksum byte clc adc checksum_addr+1 sta checksum_addr+1 // update the second checksum byte inc zp.C // increment the pointer bne no_carry // if it doesn\u0026#39;t become 0, no need to carry inc zp.C+1 // if it does become 0, carry to high byte no_carry: inx // increment num bytes copied bne no_x_carry inc zp.B // if carrying, increment num pages copied no_x_carry: cpx n_addr bne loop // if x doesn\u0026#39;t match file size low bytes, still copying lda zp.B cmp n_addr+1 bcc loop // if pages copied \u0026lt; filesize high byte, still copying I added a load command (L) to the monitor program that also prints out A, B, C (address, bytes, checksum) in hex:\nThis indicates a 0x77 (119) byte program was loaded to address 0x1000 with checksum 0xA53 (which agrees with the transmitted checksum). Pressing R will run the program. (See a future post for why there‚Äôs a ‚ÄúSave‚Äù option‚Äìthis image is from a very recent version of the 6502 computer with some extra upgrades.) Here‚Äôs what the breadboard computer looks like with the 16C550 chip at the very top left:\nNotice the three green address lines and eight blue data lines brought up from the VRAM chip right below. The four wires heading off the top left of the breadboard go to my USB-to-UART adapter and then into my MacBook! Adding the ability to quickly load programs without flashing the ROM chip has enabled a much faster build-test-debug development cycle, making software development way more enjoyable.\nI‚Äôll be writing soon about a very exciting step in the project: going from breadboard to PCB!\nPrevious post: Part 4 Next post: Part 6 1Unfortunately there\u0026#39;s a subtle bug in my design that makes writes to the somewhat unreliable, caused by the fact that writes to the 16C550 are triggered only by the rising edge of the !WR1 signal. In contrast, writes to my HM62256 RAM chip ‚Ä¶","date":1680753476,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680753476,"objectID":"5d1420a587bd02b9724da13ef5b92d62","permalink":"https://www.kirantomlinson.com/post/6502-5/","publishdate":"2023-04-05T22:57:56-05:00","relpermalink":"/post/6502-5/","section":"post","summary":"The KiT 1 gets a UART so it can send and receive data from my laptop!","tags":[],"title":"Building a 6502 Computer, Part 5: UART","type":"post"},{"authors":["Kiran Tomlinson","Johan Ugander","Jon Kleinberg"],"categories":["Voting"],"content":"","date":1675746000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1675746000,"objectID":"a0754758ce5ed008d70b408ee68eeb92","permalink":"https://www.kirantomlinson.com/publication/2023-tomlinson-ballot-length/","publishdate":"2022-07-19T20:34:46-05:00","relpermalink":"/publication/2023-tomlinson-ballot-length/","section":"publication","summary":"We theoretically and empirically investigate the impact of ballot length in instant runoff voting elections.","tags":[],"title":"Ballot Length in Instant Runoff Voting","type":"publication"},{"authors":[],"categories":[6502],"content":"So far in this project, I‚Äôve built a simple computer, given it a keyboard, and written a machine language monitor for it. However, only being able to see outputs on the small character LCD was not very fun, so it‚Äôs time for a serious upgrade. I decided to add a graphics card! This is the first major departure from Ben Eater‚Äôs build that I‚Äôve mainly been following so far.\nThere are a number of options for adding graphics to an 8-bit computer. Some people have used custom FPGAs or custom TTL circuits. Ben Eater actually has a video series and kit for a simple VGA card. If you‚Äôre interested in seeing a full nuts-and-bolts VGA build, I would highly recommend James Sharman‚Äôs VGA series.\nTo keep things simple, I decided to go with an old video display controller, the Motorola MC6847, which was most notably used in the TRS-80 Color Computer released in 1980. Other possible 8-bit video controllers include the Texas Instruments TMS9918 and its successors, the Yamaha V9938 and Yamaha V9958; the MOS VIC used in the Commodore VIC-20; the MOS VIC-II used in the Commodore 64 and 128; and many, many more.\nThe problem with all of these vintage ICs is that they‚Äôre no longer made, so you have to resort to buying them used (your mileage may vary). Some of these are also quite expensive ($25-$100 on eBay for a Yamaha V9938, Yamaha V9958, VIC, or VIC-II). By far the cheapest options are the MC6847 and TMS9918, both of which can be found for under $5. I was much more willing to spend $5 than $25 on a used chip from 1980 that might not work, so I got an MC6847 and its companion chip, the MC1372.\nThe MC6847 generates a video signal by sweeping through memory addresses and interpreting the values stored there as characters (in text modes) or pixel groups (in graphics modes). Here‚Äôs the chip‚Äôs pinout:\nDA0-DA12 are the address lines into video RAM and DD0-DD7 are the data lines where the video RAM responds with the data to display. The mode control lines (A/G, A/S, INT/EXT, INV, and GM0-GM2) are used to select the display mode, which determine how much memory is required, how bytes are interpreted, and what can be displayed. Here are the 14 modes of the MC6847:\nThe video signal is output as three signals, luminance (Y), red chrominance (…∏A), and blue chrominance (…∏B) (usually called YPbPr). These signals can be combined into a composite video signal, which is where the MC1372 comes in. Along with an external oscillator, the MC1372 provides a clock at the correct frequency for the MC6847 and can combine the outputs of the MC6847 into a color composite signal that many monitors and TVs can display (if they aren‚Äôt too recent). It‚Äôs also possible to directly amplify the YPbPr signals and use component video, but I haven‚Äôt tried that yet.\nIn addition to the MC6847 and MC1372, the final piece of the puzzle to add video to the breadboard computer is the video RAM (VRAM). The main challenge with VRAM is that both the CPU and the video display generator need to access it, and they run at different clock rates (3.579545 MHz for the video chip and 1 MHz for the CPU). One option would be to use the video clock for the CPU and figure out some way to share the address and data lines between the CPU and video chip (for instance, running the CPU at half the clock rate and alternating control between the two chips‚Äìthis is more or less what the Commodore 64 did). For simplicity, Ben Eater‚Äôs VGA card only allows the CPU to run during the blanking interval of the video signal, when the video chip doesn‚Äôt need access to VRAM‚Äìbut this wastes about 70% of CPU cycles.\nI decided to take a different approach: asynchronous dual-port RAM. These types of RAM chips have two independent sets of address and data lines and allow simultaneous access on both sets (with one caveat, explained below).The specific dual-port RAM I went with is the 2KB IDT7132. One port is hooked up to the 6502 CPU and the other to the MC6847‚Äìyou can see it in the top left:\nThe small caveat: simultaneous reads to the same address are fine, but a write can fail if the other port is accessing the same address. In this case, the writing port gets a busy flag. Since only the CPU writes to VRAM, I made the busy flag pause the CPU using its RDY pin until the video chip has moved on to reading another address‚Äìthis has worked perfectly, and only rarely pauses the CPU for a few microseconds.\nAfter hooking up the VRAM and the MC1372 clock to the MC6847, I needed to amplify the video signal being generated by the MC6847. To begin with, I just amplified the luminance signal to get a black and white image. Since I know nothing about analog circuitry, I followed the amplifier schematic in this blog post. The result was glorious:\nI have since wired up all of the color mixing circuitry and switched over to the color composite amplifier circuit in the MC6847 datasheet. Here‚Äôs the text and semigraphics modes in all their 8-color beauty:\nAfter adding some DIP switches to let me switch between graphics modes, ‚Ä¶","date":1664420037,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664420037,"objectID":"ef6a15d16e4171d42753a188bd5b2844","permalink":"https://www.kirantomlinson.com/post/6502-4/","publishdate":"2022-09-28T22:53:57-04:00","relpermalink":"/post/6502-4/","section":"post","summary":"The KiT 1 gets a graphics card!","tags":[],"title":"Building a 6502 Computer, Part 4: Graphics","type":"post"},{"authors":[],"categories":[6502],"content":"Now that the computer has a keyboard, I thought it would be great to be able to write and run code directly on it! To do this, I wrote a very simple machine code monitor (monitor for short). The idea behind a monitor program is to give the user direct read and write access to memory, so you can look at the actual stored bytes of a program (or data). By writing directly in machine code, you can also enter programs into memory, although this is far from a pleasant programming experience. Finally, a monitor should also let you execute code starting from a particular memory address so you can run the code you painstakingly entered.\nOne notable historical example is the Woz Monitor that came with the Apple 1, written by Steve Wozniak. Amazingly, the Woz Monitor uses only 256 bytes of ROM! My monitor, which I‚Äôm calling LCDMon (since it is designed for the computer‚Äôs 2-row character LCD), takes almost 1KB due to more CPU-intensive keyboard and display I/O (and my lack of assembly expertise).\nLCDMon supports four operations: (1) read one byte, (2) read eight bytes, (3) write bytes, and (4) run. All commands are typed on row 1 of the LCD, while outputs from the last command are displayed on row 2. To read one byte, you simply type in the hex address to read from (0000-ffff):\nTo read eight bytes, you follow the starting address with a hyphen (page down on the keyboard scrolls the LCD to the the rest of the eight bytes):\nThe address 8000 is the beginning of ROM, where I‚Äôve placed a jump table: 4c is the jump opcode, and the first entry of the table jumps to address 8013 (little-endian, so the 13 comes first). Reading works!\nTo write bytes starting at an address, you write the address followed by a semicolon and then the bytes to write. To run code starting an an address, you follow the address with an R. To give you a sense of how this works under the hood, here‚Äôs a small snippet of LCDMon that handles writing entered data:\nwrite_byte: ; write data to MON_ADDR, starting with the byte at ; TEXT_BUFFER+y+1 (TEXT_BUFFER+y is ;). x initialized to 0 iny lda TEXT_BUFFER,y ; load the next char into A beq enter_reset ; if it\u0026#39;s null, done writing cmp #\u0026#34; \u0026#34; ; check if it\u0026#39;s space beq write_byte ; if it is, consume it and move on jsr parse_hex_byte ; otherwise, parse the next byte, incrementing y sta (MON_ADDR,x) ; write the byte where mon addr is pointing (x is 0) inc MON_ADDR ; increment address to write to bne write_byte ; check if 0 after incrementing (if 0, need to carry) inc MON_ADDR+1 ; if MON_ADDR became 0 after inc, need to carry to hi byte jmp write_byte ; loop to write next byte The full source code of LCDMon is available here: lcd_mon.s. To test if LCDMon was working, I used the table of 6502 opcodes to write a program at address 1000 that would fill the LCD with dollar signs (ASCII hex 0x24):\na9 24 lda #$24 ; load the ASCII code for a dollar sign into the A register 20 03 80 jsr write_lcd ; jump to a subroutine in ROM to print A register contents 4c 00 10 jmp $1000 ; loop The whole program is just 8 bytes long! Here‚Äôs what writing this code looks like (notice I previously displayed the contexts at 1000, which is just garbage in RAM):\nWe can check that the program was written successfully by running 1000-:\nAnd finally run it:\nWoooo! In theory, any code could be entered by hand like this, but in practice it‚Äôs extremely tedious and prone to errors. Since writing LCDMon, I‚Äôve been working on a number of hardware upgrades, most notably a graphics card! More on that soon.\nPrevious post: Part 2 Next post: Part 4 ","date":1663191881,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663191881,"objectID":"f1b29f9eb62ad8685af77610481bb7a1","permalink":"https://www.kirantomlinson.com/post/6502-3/","publishdate":"2022-09-14T17:44:41-04:00","relpermalink":"/post/6502-3/","section":"post","summary":"I wrote a simple monitor program using the LCD and keyboard input that allows you to program the KiT--from the KiT itself!","tags":[],"title":"Building a 6502 Computer, Part 3: Monitor Program","type":"post"},{"authors":[],"categories":[6502],"content":"Since posting Part 1 of my 6502 build, I‚Äôve gotten a keyboard hooked up! I‚Äôm using an old-school PS/2 keyboard, a connector and keyboard protocol which originated with the IBM Personal System/2 in 1987 and was still in use through the 2000s, although USB has largely replaced it. One great thing about PS/2 is that the protocol is very simple and easy to manually interface with (USB would require considerably more work, but is feasible). Ben Eater has three great videos on the PS/2 protocol and hooking up a PS/2 keyboard to a 6502 through the 65C22 Versatile Interface Adapter (VIA).\nThe specific keyboard I‚Äôm using is a Dell QuietKey SK-1000REW from 1997, but it doesn‚Äôt really matter. The PS/2 connector just uses four pins: ground, 5V, clock, and data. Data is sent from the keyboard in 11-bit packets:\n1 start bit (always 0) 8 data bits (least significant first) 1 parity bit 1 stop bit (always 1) For simplicity, I‚Äôm ignoring the parity bit and only looking at the 8 data bits. Bits are sent on the falling edge of the clock, which is usually held high. The keyboard can also receive commands, but I‚Äôm not worrying about that either.\nI hooked up the clock and data to two chained 8-bit shift registers (I used the 74HC164 instead of the 74HC595 Ben used). The clock signal has to be inverted to feed into the shift registers. Luckily, I had three leftover inverters in the address control logic! The other two also came in handy for Ben‚Äôs interrupt generating circuit:\nThe idea behind this circuit is to generate a single rising edge for each data packet using an RC circuit with fast charge. The clock low pulses charge up the capacitor through the diode (after being inverted to high pulses), but the capacitor discharges slowly through the resistor. The values of the resistor and capacitor are just right to keep the output high during the clock pulses and then go low a bit after the packet ends. Conveniently, the 74HC14 has Schmitt trigger inputs that convert the analog discharge of the capacitor into a clean digital edge. This is then fed into the CA1 line of the VIA, which is configured to trigger an interrupt, alerting the CPU that a key has been pressed! Here‚Äôs what the circuit looks like on the breadboard, highlighted:\nThe keyboard clock line is in green, with the keyboard data line in white. Notice my very weird looking 33k resistor‚ÄìI didn‚Äôt have one, so I soldered three 100k resistors in parallel to a 2-prong header! I have some 33k resistors on the way to replace this monstrosity, but it‚Äôs worked great. In this picture, the data output from the shift registers is being ignored. I was just counting interrupts, and the three on the LCD screen shows it worked! Most full keypresses generate three data packets: the key‚Äôs scan code, then the release scan code, and then the released key‚Äôs scan code (the scan code table can be found here). Next, I connected the data lines to Port A of the VIA and printed out all of the scancodes received, after mapping them to ASCII using the table provided by Ben:\nNotice the three codes generated by each keypress, e.g., key h, release ?, key h. It was then fairly easy to store a few flags indicating whether the shift keys were down and whether the last byte received was a release code. I also added handling of a few special keys like enter, arrows keys, and backspace to move the cursor around. Very pleased with the final product:\nHere‚Äôs my 6502 assembly for typing on the LCD, which also includes some subroutines for displaying numbers in hex and in decimal: lcd_type.s. I‚Äôm currently working on a rudimentary monitor program inspired by the Woz Monitor that came with the Apple I‚Äìmore on that in a future post!\nPrevious post: Part 1 Next post: Part 3 ","date":1661979897,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661979897,"objectID":"136c8d37d5e7131995592ff079633e42","permalink":"https://www.kirantomlinson.com/post/6502-2/","publishdate":"2022-08-31T17:04:57-04:00","relpermalink":"/post/6502-2/","section":"post","summary":"The KiT 1 now has a keyboard!","tags":[],"title":"Building a 6502 Computer, Part 2: Keyboard Input","type":"post"},{"authors":[],"categories":[6502],"content":"I‚Äôve been watching a lot of Ben Eater‚Äôs videos on electronics and computer architecture lately‚ÄìI‚Äôd highly recommend them. I was inspired to try building his 6502-based breadboard computer. This will be the first of a series of posts where I go over my design choices and track my progress with the build. Here‚Äôs what Ben‚Äôs version looks like on the left, with mine in its current state on the right:\nFor a bit of background, the 6502 is an 8-bit microprocessor that saw use in a huge number of computers and game consoles in the late ‚Äô70s and early ‚Äô80s: the Apple II, NES, BBC Micro, Commodore 64, and Atari 2600 all used the 6502! Technically, the version Ben Eater used is the W65C02S (or 65C02, for short), an updated version that‚Äôs still in production. The 65C02 can run higher clock speeds, uses less power, supports some additional instructions, and is fully static. I‚Äôll just call it a 6502, since it‚Äôs very similar in spirit to the original and has (almost) the same opcodes and pinout.\nThe 6502 has a 16-bit address space (0000 to ffff in hex), allowing it to natively address 64KB of memory. Ben‚Äôs design has 16KB of RAM, 32KB of programmable ROM, and uses the remaining address space for the 65C22 Versatile Interface Adapter (VIA), which is used for input and output devices. In his build above, the VIA is used to output to the LCD and take input from the pushbuttons below (mine is only hooked up to the LCD for now). He used a 1 MHz clock, but I think it should be possible to push it up to 3 MHz and maybe even higher (although this might require some upgrades).\nI got Ben‚Äôs kit, but wanted to make a few changes. My goal is to eventually connect a keyboard and monitor to the computer, and maybe even write a basic operating system and text editor for it. The first thing I changed was the memory map. Ben‚Äôs used the following memory map, which has the advantage of extremely simple address decode logic:\n0000-3fff: RAM (16KB) 4000-5fff: unused 6000-600f: VIA (2B) 6010-7fff: unused 8000-ffff: ROM (32KB) I wanted to expand the RAM and also add in 2KB of video RAM that could eventually be used for a simple graphics card. I settled on the following memory map:\n0000-6fff: RAM (28KB) 7000-77ff: VRAM (2KB) 7800-780f: VIA (2B) 7810-7fff: unused 8000-ffff: ROM (32KB) The unused space could eventually be used for extra I/O devices (additional VIAs or maybe a 65C51 ACIA) if the need arises‚Äìbut I think this setup will be enough for keyboard input, VGA output to a monitor, and LCD output. The price I paid for the more complex memory map was more complex address decode logic, although I tried to keep it as simple as possible. I found the following configuration, where there are no more than two gates between an input and a chip select signal:\nKeeping the depth small minimizes the amount of delay between an address change and a chip select, which is especially important for the RAM, which is only enabled when the clock (phi2) is high. Note that all of the chip select signals are active low, denoted by !. Here‚Äôs a labeled picture of the computer above with the address decode logic highlighted:\nSince I don‚Äôt yet have the VRAM set up, the 8-input NAND is unused. I had actually ordered a 3-input OR chip for the VIA control line, but realized I could implement OR with diodes instead to save some space. The two chips next to the clock on the bottom breadboard are shift registers that I plan to use for the keyboard input‚Äìmore on that in a later post. I also made some minor layout changes compared to Ben‚Äôs build: swapping the RAM and the ROM to make the ROM easier to access for programming, and moving the LCD to the bottom board to make room for the larger address decode logic. In order to support both the LCD and keyboard input, I also decided to use the LCD‚Äôs 4-bit mode instead of the 8-bit mode Ben used, using only 7 I/O lines in total for the LCD. The keyboard input only needs 8 bits, so it should just about work with one VIA!\nDuring the build, I used a slower clock that could be stopped and single-stepped. In his videos, Ben used an Arduino to monitor the address and data bus for debugging and verification. Since I didn‚Äôt get an Arduino, I just used a board of LEDs. Here‚Äôs an in-progress picture with the debug clock, LEDs, and a mess of jumper wires:\nThe project has been a ton of fun and I can‚Äôt wait to see how far it will go! In the next posts, I‚Äôll write more about my plans for the VGA display, the keyboard input, and the (very basic) software I‚Äôve written. If you want some additional sources for building a 6502-based computer, I found Garth Wilson‚Äôs 6502 Primer a very useful resource in addition to Ben‚Äôs videos.\nUpdate: the computer needed a name (calling it ‚Äúthe breadboard computer‚Äù or ‚Äúmy 6502-based computer‚Äù got tiring). I ended up settling on the name KiT, since it all started with Bean Eater‚Äôs kit and because I like putting my name on things. Since developing a new and improved version, this original breadboard version is ‚Ä¶","date":1661633364,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661633364,"objectID":"6a0388b8dfdca8c358cc3c5deea3773f","permalink":"https://www.kirantomlinson.com/post/6502-1/","publishdate":"2022-08-27T16:49:24-04:00","relpermalink":"/post/6502-1/","section":"post","summary":"I'm building a version of Ben Eater's 6502-based breadboard computer. This will be the first of a series of posts where I go over my design choices and track my progress with the build.","tags":[],"title":"Building a 6502 Computer, Part 1: Origins of the KiT 1","type":"post"},{"authors":["Kiran Tomlinson","Austin R. Benson"],"categories":["Discrete Choice"],"content":"","date":1628935200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628935200,"objectID":"2b9cca65f59df4b979f8f58bde962d1e","permalink":"https://www.kirantomlinson.com/publication/2020-tomlinson-feature-context-effects/","publishdate":"2020-09-09T14:06:28-04:00","relpermalink":"/publication/2020-tomlinson-feature-context-effects/","section":"publication","summary":"We introduce a broad class of context effects in discrete choice and show that these effects are common in choice data, including choices coming from social networks.","tags":[],"title":"Learning Interpretable Feature Context Effects in Discrete Choice","type":"publication"},{"authors":["Kiran Tomlinson","Johan Ugander","Austin R. Benson"],"categories":["Discrete Choice"],"content":"","date":1622004276,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622004276,"objectID":"211935eff9256df08d2c40a92acb92d3","permalink":"https://www.kirantomlinson.com/publication/2021-tomlinson-choice-set-confounding/","publishdate":"2021-05-26T00:44:36-04:00","relpermalink":"/publication/2021-tomlinson-choice-set-confounding/","section":"publication","summary":"We show how confounding can mislead choice models and adapt several causal inference methods to train unbiased models from observational data.","tags":[],"title":"Choice Set Confounding in Discrete Choice","type":"publication"},{"authors":[],"categories":[],"content":"I recently assembled a Stratocaster-style Harley Benton electric guitar kit, which included a few tricky things I had never done (staining and finishing wood, using a jigsaw). I think it turned out pretty great, despite a couple hiccups along the way.\nThe kit The electronics come assembled and fitted into the pickguard, but the body is unfinished and the headstock is quite blocky. The body I got had pretty rough routing marks in the cavities, so step one was sanding it as smooth as I could.\nSafety Stains, finishes, and sawdust can be pretty bad for your lungs, so I did the build outdoors with a dust mask to filter out wood particles. I also used safety glasses while sawing and drilling.\nStaining and finishing the body I picked out some Minwax Espresso stain at Lowe‚Äôs to get a nice dark color on the body. I started out staining the back of the guitar to make sure it looked okay. To apply the stain, I first wiped on some pre-stain conditioner with a rag and then wiped on stain. As soon as I stained the back, I noticed that I had left a lot of scratches from sanding (visible in later pics), so I spent longer smoothing out the front once the back stain had dried. Here‚Äôs what the front looked like after staining: A few scratches, but I was happy with the color overall. Next, I applied three coats of shellac with a paintbrush, waiting an hour between coats and sanding the two base coats with 220-grit. Here‚Äôs the guitar drying after one of the coats: Once the final coat dried thoroughly, I buffed it with some fine 0000 steel wool, which gave it a nice satin finish: I think the shellac I got was quite old, since it ended up having a bit of a varnish-y smell. I‚Äôd probably try using a spray-on lacquer if I did this again.\nShaping the headstock I printed out a headstock template I liked (from a Gibson Firebird‚Äìa little narrower than the traditional Fender Stratocaster headstock). I bought a cheap jigsaw and (after reading the manual and watching several instructional videos about safe jigsaw use) started carving out the shape: Because of the base of the jigsaw and the guitar neck, I couldn‚Äôt quite reach the line I wanted, which resulted in making several jagged cuts: If I had been thinking, I would have turned the neck over and done the cut on the reverse side‚Ä¶ Oh well. Nothing a heavy dose of sanding couldn‚Äôt fix: Very happy with the final headstock shape!\nTuners, bridge, and tremolo springs Installing the tuners was straightforward‚Äìjust some screws and nuts: The bridge mounting holes were very unevenly drilled into the body, so I had to expand two of the holes with a drill: Next, I installed the spring claw and attached the springs to the bridge (notice my horrendous sanding üòÖ let‚Äôs call it part of the home-built aesthetic): The hooks on the springs were quite roughly cut and initially didn‚Äôt fit into the holes in the sustain block, so I had to file them down. Not a big issue.\nElectronics Next, I attached the pickguard (with pre-installed pickups, volume/tone knobs, and switch): and then soldered the ground wire to the claw: Not my finest soldering work, but the claw sucked up a ton of heat, making it hard to get the solder to bind. I also screwed in the jack at this point, which plugged in easily to the electronics.\nNeck and backplate Screwing on the neck and was backplate was straightforward: It‚Äôs starting to look like a guitar!\nInstalling strings At this point, I was very excited to test it out. Unfortunately, I realized when trying to install the strings that one of the tuning machines was defective and didn‚Äôt turn at all. I popped over to my great local guitar store and they found a matching tuner!\nI swapped out the button so it matched the other 5 tuners. The replacement is actually considerably nicer, so tuning the low E is a much better experience than tuning the other strings (the stock tuners have a lot of play and uneven resistance when turning, but they‚Äôre certainly usable). The tuners are my first planned upgrade.\nThe final product I‚Äôm so happy with the final result. After some additional fretwork and a good setup, it plays beautifully and I can‚Äôt get enough of the classic strat sound. I used it as the lead guitar in a three-part cover of Fleetwood Mac‚Äôs Rhiannon (the main solo starts at 3:17):\nUpdate: I replaced the stock electronics (pickups, pots, switch, and jack) with a loaded pickguard from a Fender Player strat‚Äìa huge upgrade in quality and tone! I also added locking tuners and a custom waterslide decal. Here‚Äôs a more recent recording with the guitar:\n","date":1618420706,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1618420706,"objectID":"1012ae4dfe9468f8b48d9def3c7050e4","permalink":"https://www.kirantomlinson.com/post/guitar-build/","publishdate":"2021-04-14T13:18:26-04:00","relpermalink":"/post/guitar-build/","section":"post","summary":"Photos and walk-through of my Stratocaster kit build.","tags":[],"title":"Electric Guitar Build","type":"post"},{"authors":[],"categories":[],"content":"In CS 6110 today, Dexter mentioned quines: programs that output their own source code. I quickly got sucked into a very fun internet rabbit-hole, including a collection of quines in different languages, a 128-language cyclical quine, a quine robust to mutations, and an HTML page that displays its own source.\nI had to try it out for myself. Here‚Äôs what I came up with in Python 3:\nfrom abc import ABC, abstractmethod from string import ascii_lowercase class AbstractQuine(ABC): imports = \u0026#39;from abc import ABC, abstractmethod\\n\u0026#39; \\ \u0026#39;from string import ascii_lowercase\u0026#39; @abstractmethod def print_code(self): ... class Quine(AbstractQuine): def print_code(self): unmap = lambda x: x[0].replace(\u0026#39;d\u0026#39;, \u0026#39;d\\\\n\u0026#39;) + f\u0026#39; \\\\\\n{s}{s}{s} \u0026#39; + x[1] s, n, q, t, r, b = \u0026#39; \u0026#39;, \u0026#39;\\n\u0026#39;, \u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;~\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;\\\\\u0026#39; body = r\u0026#39;{self.imports}\\n\\n\\nclass {self.__class__.__base__.__name__}~\u0026#39; \\ r\u0026#39;({ascii_lowercase[:3].upper()}):\\n\\n~\u0026#39; \\ r\u0026#39;{s}imports = {unmap(list(map(repr, self.imports.split(n))))}\\n\\n~\u0026#39; \\ r\u0026#39;{s}@abstractmethod\\n{s}def print_code(self):\\n{s}{s}...\\n\\n\\n~\u0026#39; \\ r\u0026#39;class Quine({self.__class__.__base__.__name__}):\\n\\n~\u0026#39; \\ r\u0026#39;{s}def print_code(self):\\n~\u0026#39; \\ r\u0026#39;{s}{s}unmap = lambda x: x[0].replace({q}d{q}, {q}d\\\\\\\\n{q})~\u0026#39; \\ r\u0026#39; + f{q} \\\\\\\\\\\\n{{s}}{{s}}{{s}} {q} + x[1]\\n~\u0026#39; \\ r\u0026#39;{s * 2}s, n, q, t, r, b = {q} {q}, {repr(n)}, \\\u0026#39;\\\\\\\u0026#39;\\\u0026#39;, ~\u0026#39; \\ r\u0026#39;{q}{t}{q}, {q}r{q}, {q}{b}{b}{q}\\n\\n~\u0026#39; \\ r\u0026#39;{s * 2}body = {r}{q}{body.replace(t, t + q + s[1] + b + n + ~\u0026#39; \\ r\u0026#39;3 * s + s[:3] + r + q)}{q}\\n\\n~\u0026#39; \\ r\u0026#39;{s * 2}exec(f{q}print(f\\\u0026#34;{{body.replace(t, \\\u0026#34;\\\u0026#34;)}}\\\u0026#34;){q})\\n\\n\\n~\u0026#39; \\ r\u0026#39;{self.__class__.__name__}().print_code()\u0026#39; exec(f\u0026#39;print(f\u0026#34;{body.replace(t, \u0026#34;\u0026#34;)}\u0026#34;)\u0026#39;) Quine().print_code() Some people might not like using exec, but I think it‚Äôs fair game. To verify that this is a quine, you can save the above code in quine.py and run python3 quine.py | diff quine.py - (make sure to have one newline after Quine().print_code()). Of course, much shorter quines are possible in Python, notably:\nc=\u0026#39;c=%r;print(c%%c)\u0026#39;;print(c%c) from Wikipedia, but it was fun to make something a bit longer work.\n","date":1613761380,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613761380,"objectID":"bec3af08c13a44d22c410133a5adc160","permalink":"https://www.kirantomlinson.com/post/quine/","publishdate":"2021-02-19T14:03:00-05:00","relpermalink":"/post/quine/","section":"post","summary":"A quine is a program that outputs its own source code. Here's one I wrote in Python.","tags":[],"title":"Python Quine","type":"post"},{"authors":[],"categories":[],"content":"Before the semester went fully online due to COVID, I had a lot of fun tasting wines in HADM 4300: Introduction to Wines. As part of the class, we tasted about six wines each week and recorded notes on them, including a 1-10 rating. Before leaving the class, I tasted and rated 32 wines from the US and France (they covered other regions later). After finding my notes from that semester, I thought it would be fun to do a bit of data analysis.\nThe big questions: White or red? France or USA? Figure 1: Ratings by color Figure 2: Ratings by country I tended to prefer reds to whites and (ever so slightly) French wines to US wines. However, with such a small dataset, the differences are not statistically significant (t-test p-values of 0.12 and 0.97 for red/white and France/USA).\nA closer look: Regions and varieties Figure 3: Ratings by region Figure 4: Ratings by dominant variety Unsurprisingly, I liked Bordeaux reds (Cabernet Sauvignon over Merlot) and Loire whites. Perhaps somewhat more surprising is New York topping the average rating list, thanks to a really great Long Island Cabernet Franc and a pretty good Finger Lakes Riesling. Je suis vraiment d√©sol√©, Alsace, but I really didn‚Äôt like the funkiness of the Gew√ºrztraminer and Muscat we tried. My favorite wine was a Loire Chenin Blanc, the only 9.5 I gave.\nOther factors: Price and vintage Figure 5: Rating vs price Figure 6: Ratings by year I don‚Äôt seem to have any particular preference for year or be influenced much by price (I gave all ratings price-blind). The Pearson correlation between price and rating is 0.19 (p=0.29). However, the two most expensive wines we tasted were both fantastic: Ch√¢teau Langoa Barton and Ch√¢teau P√©desclaux.\nConclusions Try more Chenin Blanc When in doubt, go for a Bordeaux Cabernet Sauvignon Need more data! Raw data In decending rating order:\nName Rating Year Region Dominant Variety Color Price Marc Br√©dif Classic 9.5 2018 Loire Chenin Blanc white $22 Lieb Cellars Estate 9.0 2018 New York Cabernet Franc red $25 Ch√¢teau Langoa Barton 9.0 2015 Bordeaux Cabernet Sauvignon red $80 Ch√¢teau P√©desclaux 9.0 2015 Bordeaux Cabernet Sauvignon red $70 Vidal-Fleury 8.5 2015 Rh√¥ne Marsanne white $35 Ch√¢teau de Sancerre 8.5 2017 Loire Sauvignon Blanc white $27 Ch√¢teau Graville-Lacoste 8.5 2018 Bordeaux Sauvignon Blanc white $19 Andr√© Brunel C√¥tes du Rh√¥ne 8.5 2016 Rh√¥ne Grenache red $16 Picket Fence 8.5 2015 California Cabernet Sauvignon red $21 Barton \u0026amp; Guestier Saint-√âmilion 8.0 2016 Bordeaux Merlot red $25 Cline Old Vine 8.0 2017 California Zinfandel red $10 Domaine Philippe \u0026amp; Vincent Jaboulet 8.0 2014 Rh√¥ne Syrah red $30 Gramercy Cellars Lower East 8.0 2016 Washington Syrah red $25 Frei Brothers Sonoma Reserve 8.0 2017 California Chardonnay white $17 Maison Champy Cuv√©e Edme 8.0 2016 Burgundy Chardonnay white $21 Hugel Classic 8.0 2016 Alsace Pinot Gris white $21 Patricia Green Cellars Reserve 8.0 2018 Oregon Pinot Noir red $29 Louis Jadot Couvent des Jacobins 7.5 2015 Burgundy Pinot Noir red $25 Pieur√© St.-Flaurent R√©serve 7.5 2018 Bordeaux Merlot red $11 Louis Jadot Chablis 7.5 2018 Burgundy Chardonnay white $25 Columbia Winery 7.5 2016 Washington Merlot red $14 Chateau LaFayette Reneau Dry 7.5 2018 New York Riesling white $13 Clos de la S√©naigerie Sur Lie 7.5 2018 Loire Muscadet white $12 Ch√¢teau de Myrat 7.0 2015 Bordeaux S√©millon white $45 Margerum M5 White 7.0 2017 California Grenache Blanc white $22 Charles Joguet 7.0 2018 Loire Cabernet Franc rose $22 Tarrica Wine Cellars 7.0 2017 California Pinot Noir red $14 Sterling Vintner‚Äôs Collection 6.0 2017 California Sauvignon Blanc white $12 Rainstorm 6.0 2017 Oregon Pinot Gris white $13 Domaine de Fa Roche Guillon 6.0 2015 Rh√¥ne Gamay red $35 Domaine Ostertag Fronholz 5.0 2016 Alsace Muscat white $28 Domaine Zind-Humbrecht 2.0 2018 Alsace Gew√ºrztraminer white $27 ","date":1613261094,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613261094,"objectID":"dfb6330fd75292a330fc18f81671829f","permalink":"https://www.kirantomlinson.com/post/wines/","publishdate":"2021-02-13T19:04:54-05:00","relpermalink":"/post/wines/","section":"post","summary":"I tasted and rated 32 wines in Introduction to Wines and I thought the data would be fun to explore. Do I like reds more than whites? French wines more than US wines? Does price correlate with my wine preference?","tags":[],"title":"Wine Rating Data","type":"post"},{"authors":[],"categories":[],"content":"Latest recording YouTube channel All recordings American Teenager - Ethel Cain (feat. Sophia) Sometime World - Wishbone Ash You All Over Me - Taylor Swift (feat. Sophia) Voc√™ Passa Eu Acho Gra√ßa - Clara Nunes (feat. Anjali) Slow Burn - Kacey Musgraves (feat. Sophia) North - Clairo (feat. Sophia) Holding On - The War on Drugs Naked As We Came - Iron \u0026amp; Wine An Ocean In Between the Waves (Solo) - The War on Drugs Dancing in the Dark - Bruce Springsteen (feat. Sophia) Pain (Solo 1) - The War on Drugs I Don‚Äôt Live Here Anymore - The War on Drugs Garden Song - Phoebe Bridgers (feat. Sophia) Norwegian Wood - The Beatles Linger - The Cranberries (feat. Sophia) Darling (Intro) - Real Estate Come Together - The Beatles (feat. Eric Campbell) Go Your Own Way - Fleetwood Mac Meu Mundo √â Hoje (Eu Sou Assim) - Wilson Batista (feat. Anjali) A Case of You - Joni Mitchell Kyoto - Phoebe Bridgers (feat. Sophia) Strangest Thing (Instrumental) - The War on Drugs The Circle Game - Joni Mitchell Father and Son - Cat Stevens Don‚Äôt Stop - Fleetwood Mac Here Comes the Sun - The Beatles The Boxer - Simon \u0026amp; Garfunkel I Will Follow You into the Dark - Death Cab for Cutie Comfortably Numb (Solo One) - Pink Floyd Trem Das Onze - Adoniran Barbosa (feat. Anjali) Savior Complex - Phoebe Bridgers (feat. Sophia) For Free - Joni Mitchell (feat. Sophia) Motion Sickness - Phoebe Bridgers (feat. Sophia) Killer Queen (Solo) - Queen Goodbye Blue Sky - Pink Floyd Hallelujah - Jeff Buckley The Chain - Fleetwood Mac Both Sides Now - Joni Mitchell Soul Meets Body - Death Cab for Cutie Layla (Unplugged) - Eric Clapton Money For Nothing (Intro) - Dire Straits Vincent - Don McLean Rhiannon - Fleetwood Mac Folsom Prison Blues - Johnny Cash (feat. Spencer Peters) Song For A Rainy Morning - Tommy Emmanuel Blackbird - The Beatles Time - Hans Zimmer Eleanor Rigby - The Beatles Big Love - Fleetwood Mac Wish You Were Here (Intro) - Pink Floyd Cherry Wine - Hozier Landslide - Fleetwood Mac Anji - Paul Simon Some of my favorite guitarists Adam Granduciel, Julian Lage, Lindsey Buckingham, Tommy Emmanuel, Eric Clapton, David Gilmour, Mark Knopfler, Joni Mitchell, Billy Strings, Josh Turner.\nGear Acoustic: Eastman AC122-2CE Cedar\nElectric: Fender Player Telecaster, Custom Harley Benton ST\nBass: Guild Starfire 1 Bass\nAmp: Boss Katana-50 MkII (sold to lighten up for my big move), Boss Katana Mini\nMic: Audio-Technica AT2020, AT2021\nInterface: Focusrite Scarlett 2i2\n","date":1608146756,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608146756,"objectID":"08cd3ccf1c8074d22d0e10c498decf59","permalink":"https://www.kirantomlinson.com/guitar/","publishdate":"2020-12-16T14:25:56-05:00","relpermalink":"/guitar/","section":"","summary":"Latest recording YouTube channel All recordings American Teenager - Ethel Cain (feat. Sophia) Sometime World - Wishbone Ash You All Over Me - Taylor Swift (feat. Sophia) Voc√™ Passa Eu Acho Gra√ßa - Clara Nunes (feat.","tags":[],"title":"Guitar","type":"page"},{"authors":[],"categories":[],"content":"\rüéìJul ‚Äò24 Passed my B Exam!\nü™ß May ‚Äò24 Presented a poster on ranking with consideration at AAMAS ‚Äò24.\nüì¢ Apr ‚Äò24 Wrote a blog post for AIhub about the moderating effect of instant runoff voting.\nMar ‚Äò24 Accepted a Senior Researcher position at Microsoft Research, in the Augmented Learning and Reasoning group!\nüó£ Feb ‚Äò24 Gave a talk on the moderating effect of instant runoff voting at AAAI ‚Äò24.\nüìù Dec ‚Äò23 Our paper on consider-then-choose ranking models was accepted as an extended abstract to AAMAS ‚Äò24!\nüìù Dec ‚Äò23 Our paper on the moderating effect of instant runoff voting was accepted to AAAI ‚Äò24!\nüó£ Aug ‚Äò23 Gave a talk on instant runoff voting at the Cornell CS Theory Seminar.\nüìù Aug ‚Äò23 Our paper on networked choice was accepted to Network Science!\nüó£ Aug ‚Äò23 Gave a talk at KDD on recommendation with temporal network objectives.\nüó£ Jul ‚Äò23 Gave a talk at NetSci on recommendation with temporal network objectives.\nüó£ Jul ‚Äò23 Gave an invited talk at SINM on networks and discrete choice.\nüìù May ‚Äò23 Our paper on multi-organization recommendation was accepted to ACM TORS!\nüìù May ‚Äò23 Our paper on recommendation with temporal network objectives was accepted to KDD 2023!\nüó£ May ‚Äò23 Gave a talk at Carleton College on two ranked choice voting projects.\nüó£ Feb ‚Äò23 Gave a talk at AAAI on ballot length in IRV.\nüë®‚Äçüè´ Jan ‚Äò23 Started a two-term visiting faculty position at Carleton College!\nüìù Nov ‚Äò22 Our paper on ballot length in instant runoff voting was accepted to AAAI 2023!\nüë®‚Äçüíª May ‚Äò22 Started my summer internship @ Microsoft Research!\nüõ† May ‚Äò22 Attended the Network Dynamics and Choice Theory workshop @ UVM!\nüë®‚Äçüè´ May ‚Äò22 Accepted a Visiting Instructor position at Carleton College for Winter and Spring 2023!\nüéì May ‚Äò22 Passed my A Exam!\nüë®‚Äçüíª Dec ‚Äò21 Accepted a summer internship @ Microsoft Research!\nüõ† Dec ‚Äò21 I hosted WHMD at NeurIPS ‚Äò21 and moderated our speaker Q\u0026amp;A! Watch it here.\nüõ† Jul ‚Äò21 The Workshop on Human and Machine Decisions was accepted to NeurIPS ‚Äò21!\nüë®‚Äçüíª May ‚Äò21 Started my summer internship @ Microsoft‚Äôs Office of Applied Research!\nüìùüìù May ‚Äò21 Two papers accepted to KDD 2021! One on the LCL, one on choice set confounding\nüó£ Apr ‚Äò21 Gave a talk for the Predicting Human Decisions course @ WPI on the LCL\nüó£ Mar ‚Äò21 Gave a talk for the Cornell/MIT MURI group on the LCL and some upcoming work\nüë®‚Äçüíª Jan ‚Äò21 Accepted a summer research internship @ Microsoft‚Äôs Office of Applied Research!\nüó£ Dec ‚Äò20 Gave a talk for the Ugander group @ Stanford SOAL on the LCL\nüó£ Sep ‚Äò20 Gave a talk @ NetSci SINM 2020 on context effects in triadic closure\nüó£ Jul ‚Äò20 Gave a talk @ ICML 2020 on choice set optimization\nüó£ Jun ‚Äò20 Gave a talk @ CPM 2020 on chain letter reconstruction\nüìù May ‚Äò20 Our paper on choice set optimization was accepted to ICML 2020!\nüìù Apr ‚Äò20 Our paper on chain letter reconstruction was accepted to CPM 2020!\nüìù Nov ‚Äò19 An extended version of my BIBM 2018 paper was accepted to BMC Medical Genomics!\nüìù Nov ‚Äò19 Our paper on tree distances was accepted to Bioinformatics!\nüìö Aug ‚Äò19 Started a Computer Science PhD @ Cornell!\nüéì Jun ‚Äò19 Graduated from Carleton!\nüó£ May ‚Äò19 Gave a talk @ RECOMB-CCB 2019 on tree distances\nüó£ Dec ‚Äò18 Gave a talk @ IEEE BIBM 2018 on phylogeny inference\nüìù Oct ‚Äò18 My first paper on phylogeny inference was accepted to IEEE BIBM 2018!\n","date":1608146756,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608146756,"objectID":"a0812ae5f3c926fea6faf4472cefc8e2","permalink":"https://www.kirantomlinson.com/news/","publishdate":"2020-12-16T14:25:56-05:00","relpermalink":"/news/","section":"","summary":"üéìJul ‚Äò24 Passed my B Exam!\nü™ß May ‚Äò24 Presented a poster on ranking with consideration at AAMAS ‚Äò24.\nüì¢ Apr ‚Äò24 Wrote a blog post for AIhub about the moderating effect of instant runoff voting.","tags":[],"title":"News","type":"page"},{"authors":[],"categories":[],"content":"Update: I‚Äôm sure this no longer works given the changes to the Twitter API, not to mention the absurd cost. Sad.\nI recently revisited a project from last year and thought it would be fun to write about my experience with it. My girlfriend Sophia volunteers for the Town Hall Project, a non-partisan organization that helps connect engaged citizens with their representatives by making it easy to find information on town halls and office hours. Many legislators hold meetings with their constituents, but it can be difficult to hear about them (maybe the meeting times are posted on a website or perhaps just announced on Twitter). Volunteers for the Town Hall Project spend time searching through individual Facebook pages and Twitter feeds for mentions of town halls.\nTo cut down on the time she was spending looking up 40 state senators‚Äô Twitters, Sophia asked if there was a way to get automatic Twitter notifications when one of her assigned legislators tweeted about a town hall. I thought there must be some existing way of doing this‚Äìof course, there are a million services that offer Twitter alerts. Here‚Äôs a small sample: Warble, MyTweetAlerts, Twilert. However, many of these existing tools are paid services or didn‚Äôt do quite what we wanted. In particular, she wanted a daily digest including every relevant tweet from any of her monitored accounts since the last digest. Here‚Äôs a sample alert email my script sent from a few days ago:\nThere were 2 flagged tweets:\nWayne D. Fontana (2020-09-02 17:47:52)\nJoin me Sept. 29 at 6pm for a Tele-Town Hall on voting. I‚Äôll be joined by PA Secretary of State Kathy Boockvar \u0026amp; @ACE_Fitzgerald to answer questions related to the voting process in PA \u0026amp; Allegheny County leading up to the Nov. 3 general election. https://t.co/ojYLaf9skP\nhttps://twitter.com/WayneDFontana/status/1301215280585150466\nSenator John DiSanto (2020-09-01 21:37:03)\nConsider joining my live Telephone Town Hall, Wed, Sept. 2, 6-7 p.m. to hear about \u0026amp; discuss state issues impacting you \u0026amp; your family from the comfort \u0026amp; safety of your own home. Sign up at https://t.co/N6yUl4SksL so you receive a call, or listen to the livestream.\nhttps://twitter.com/SenatorDiSanto/status/1300910567536971786\nHere‚Äôs the entry on the Town Hall Project website (submitted by Sophia after receiving the alert) for the first one: As someone who had no previous experience working with the the Twitter API or sending emails through a Python script, it was an interesting project. The first step was figuring out how to fetch all tweets from an account since the previous day. The Twitter API handle for fetching tweets from an account is GET statuses/user_timeline, which can be easily done in Python using this Tweepy function. However, this GET request returns a maximum of 200 tweets, and I wanted the script to be robust as possible (even to Twitter-fiend senators). So, I store the ID of the last processed tweet for each tracked user in a file and make requests in chunks of 200 until reaching the last processed tweet. Here‚Äôs a code snippet:\ndef get_tweets(account, last_tweet_ids): auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET) auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET) api = tweepy.API(auth) new_tweets = api.user_timeline(screen_name=account, count=200, tweet_mode=\u0026#39;extended\u0026#39;) all_tweets = [tweet for tweet in new_tweets if not tweet.retweeted and tweet.id \u0026gt; last_tweet_ids[account]] oldest_id = tweets[-1].id - 1 while oldest_id \u0026gt; last_tweet_ids[account] and len(new_tweets) \u0026gt; 0: older_tweets = api.user_timeline(screen_name=account, count=200, max_id=oldest_id, tweet_mode=\u0026#39;extended\u0026#39;) all_tweets.extend([tweet for tweet in older_tweets if not tweet.retweeted and tweet.id \u0026gt; last_tweet_ids[account]]) oldest_id = tweets[-1].id - 1 return all_tweets (It was very easy to apply for API access and get the necessary credentials: CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET.)\nThen, it‚Äôs a simple matter of picking out which tweets to flag. Once that‚Äôs done, sending an email can be done with smtplib and email:\ndef send_alert(flagged_tweets): message = f\u0026#39;There were {len(flagged_tweets)} flagged tweets:\\n\u0026#39; for tweet in sorted(flagged_tweets, key=lambda x: x.created_at, reverse=True): message += f\u0026#39;\\n{tweet.user.name} ({tweet.created_at})\\n{tweet.full_text}\\n\u0026#39; \\ f\u0026#39;https://twitter.com/{tweet.user.screen_name}/status/{tweet.id}\\n\u0026#39; msg = email.mime.text.MIMEText(message, _charset=\u0026#39;UTF-8\u0026#39;) msg[\u0026#39;Subject\u0026#39;] = email.header.Header(SUBJECT_LINE, \u0026#39;utf-8\u0026#39;) server = smtplib.SMTP_SSL(\u0026#39;smtp.gmail.com\u0026#39;, 465) server.login(ALERT_FROM_EMAIL, ALERT_FROM_PASSWORD) server.sendmail(ALERT_FROM_EMAIL, ALERT_TO_EMAIL, msg.as_string()) server.quit() We made a Gmail account dedicated to sending these emails (ALERT_FROM_EMAIL). I added a couple of error-handling measures (for instance, you get a tweepy.error.TweepError if the screen_name does not exist‚Äìthis error actually happened to me in the last year when a state senator was arrested and his Twitter ‚Ä¶","date":1599094544,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599094544,"objectID":"b35cf4a3631223e1b514d1c14852383f","permalink":"https://www.kirantomlinson.com/post/townhall-alerts/","publishdate":"2020-09-02T20:55:44-04:00","relpermalink":"/post/townhall-alerts/","section":"post","summary":"The Town Hall Project makes it easy to find local town halls with your state and federal representatives. To get this information, volunteers spend time searching through politicians' Twitter feeds for town hall announcements. I wrote a script to help do this faster and less painfully.","tags":[],"title":"Town Hall Alerts","type":"post"},{"authors":["Kiran Tomlinson","Austin R. Benson"],"categories":["Discrete Choice"],"content":"","date":1594512000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594512000,"objectID":"e97440c21b4291227a74202b9e30d81a","permalink":"https://www.kirantomlinson.com/publication/2020-tomlinson-optimizing-choice-sets/","publishdate":"2020-03-06T17:12:41-05:00","relpermalink":"/publication/2020-tomlinson-optimizing-choice-sets/","section":"publication","summary":"We study the problem of finding the optimal set of alternatives to introduce to a group to minimize their disagreement and other related problems.","tags":[],"title":"Choice Set Optimization Under Discrete Choice Models of Group Decisions","type":"publication"},{"authors":["Patty Commins","David Liben-Nowell","Tina Liu","Kiran Tomlinson"],"categories":[],"content":"","date":1591660800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591660800,"objectID":"0bfc8c17a364c45e7212a7c9efb82a7e","permalink":"https://www.kirantomlinson.com/publication/2020-commins-diverging-string-sequences/","publishdate":"2020-04-16T18:46:32-04:00","relpermalink":"/publication/2020-commins-diverging-string-sequences/","section":"publication","summary":"We examine the problem of reconstructing the history of diverging string sequences, inspired by chain email petitions.","tags":[],"title":"Summarizing Diverging String Sequences, with Applications to Chain-Letter Petitions","type":"publication"},{"authors":[],"categories":[],"content":"Update: Danielle Braff wrote a nice NY Times article about academic rejection and used my CV of Failures as an example!\nIf you haven‚Äôt heard of Failure CVs, take a look at Melanie Stefan‚Äôs Nature article, this NY Times article, or Princeton professor Johannes Haushofer‚Äôs (edit: now at the National University of Singapore). I think it‚Äôs a nice way to remain grounded and to acknowledge the fact that rejections are a normal part of academic life that we don‚Äôt often present, especially online. In the spirit of these articles (and inspired by my recent NDSEG Fellowship rejection), here‚Äôs my CV of Failures, which I‚Äôll continue to update over time along with my regular CV:\nKiran\u0026#39;s CV of Failures ","date":1587494640,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587494640,"objectID":"191e9180c4d49a40a198b07c801ec759","permalink":"https://www.kirantomlinson.com/post/failure-cv/","publishdate":"2020-04-21T14:44:00-04:00","relpermalink":"/post/failure-cv/","section":"post","summary":"You may have heard of this before; academic websites, CVs, and Twitter feeds typically catalogue successes, obscuring the many failures and rejections that are a natural part of any academic career. Following many others, and in the spirit of openness, here is a CV of my own failures.","tags":[],"title":"CV of Failures","type":"post"},{"authors":["Zach DiNardo","Kiran Tomlinson","Anna Ritz","Layla Oesper"],"categories":["Computational Biology"],"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"3694142b5a58f3cb3ddc949c3cdda163","permalink":"https://www.kirantomlinson.com/publication/2020-dinardo-distance-measures/","publishdate":"2020-03-06T16:42:25-05:00","relpermalink":"/publication/2020-dinardo-distance-measures/","section":"publication","summary":"We introduce distance metrics on tumor evolutionary trees to use for benchmmarking inference methods or clustering trees.","tags":[],"title":"Distance Measures for Tumor Evolutionary Trees","type":"publication"},{"authors":[],"categories":[],"content":" This is my website! (At the time of writing; for an up-to-date version, see the Site Graph page.)\nEach node is a page and edges represent links between pages. Blue nodes are internal HTML pages, green nodes are internal resources (anything not HTML, like PDFs), and red nodes are external pages. Any pages with errors would show up yellow (phew, none yet). Hover over a node to see its URL and try dragging nodes around to see the physics-based visualization. Fun fact, this page itself is in the graph. (Can you spot it?)\nThis visualization was made by a script I‚Äôve been working on in my spare time, available at https://www.github.com/tomlinsonk/site-graph. In this post, I‚Äôll outline how it works, how you can use it (and customize it) to visualize your own website, and the issues I ran into developing it (which hopefully are both interesting and useful to anyone else making a web crawler for the first time).\nHere are some screenshots of other websites I‚Äôve mapped. The last one is the Carleton College Math Department website and the first four are the homepages of CS professors at a few different institutions. (No prizes for quessing which two professors hosted course webpages on their personal sites.)\nOf course, there are existing tools for visualizing site graphs. Here‚Äôs an article that describes how to visualize websites with ScreamingFrog and Gephi. Sitebulb will probably do this too (and much more), but it‚Äôs a huge download and only has a 14-day free trial. WebSite Auditor can also make interactive site graphs, but again it‚Äôs a big proprietary tool. There are probably a million more. So why make yet another site visualization tool? Well, this script is small, easy to understand and run, open-source, hackable, and generates customizable and HTML-embeddable interactive visualizations. Plus it was fun to work on.\nHow it works The idea is pretty simple: the crawler starts at the base URL of a site and performs a depth-first search of the site, following links to reach new pages. It only follows outgoing links from internal pages, as the goal is to map a single website (and its outgoing links to external sites). The main body of the script looks roughly like this (many details omitted).\ndef crawl(url): site_url = url visited = {url} edges = set() to_visit = stack() to_visit.push(url) while not to_visit.empty(): url = to_visit.pop() page = # Fetch page for link in page: link_url = # Parse link URL edges.add((url, link_url)) if link_url not in visited and link_url.startswith(site_url): to_visit.push(link_url) visited.add(url) return edges The visualization uses a great library called pyvis, which in turn uses vis.js to draw and animate the graph. I‚Äôm using requests to fetch webpages and Beautiful Soup to parse them.\nHow to use it Download the script from the GitHub page, install the required python packages listed on the GitHub readme, and (replacing the URL with yours) run\npython3 site_graph.py https://www.cs.cornell.edu/~kt/ Make sure you use the full URL, including https://www. and a trailing slash (e.g. https://www.cs.cornell.edu/~kt/ ). If you don‚Äôt use https or omit the trailing slash, you‚Äôll get warnings. You can override them with --force if you‚Äôre sure you want to. The larger the site, the longer the crawl will take (I wouldn‚Äôt run it on Wikipedia, for instance).\nTo see all available options, run\npython3 site_graph.py -h To change the visualization output file, use the --vis-file argument (by default, the visualization is saved in site.html):\npython3 site_graph.py https://www.cs.cornell.edu/~kt/ --vis-file kt-site.html To change the graph data file, use the --data-file argument (by default, this is saved in crawl.pickle):\npython3 site_graph.py https://www.cs.cornell.edu/~kt/ --data-file kt-crawl.pickle This data file is useful for customizing the visualization without performing a new crawl. See section below.\nTo change the dimensions of the saved visualization in pixels, use the --width and --height arguments (defaults are 1000, 800):\npython3 site_graph.py https://www.cs.cornell.edu/~kt/ --width 1500 --height 1000 To also check links leaving the site for errors (e.g 404), use the --visit-external flag (this is slower).\nThe last three options, --show-buttons, --options, and --from-data-file are for tweaking the visualization and are described below.\nCustomizing the visualization The default physics settings can make larger site graphs oscillate wildly. Plus, you may want to adjust the sizes of your nodes, whether the edges are curved, or a number of other settings. Luckily, pyvis makes it easy to adjust all of these things. To do this, first run the crawler with the --show-buttons flag:\npython3 site_graph.py https://www.cs.cornell.edu/~kt/ --show-buttons This will add a user interface to the visualization with which you can adjust every parameter. To make large graphs behave, I‚Äôve found that reducing the gravitational constant helps (you can also try adding some overlap avoidance, increasing the spring ‚Ä¶","date":1584230400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584230400,"objectID":"91ac5bd456b897277e7331cc1333e93e","permalink":"https://www.kirantomlinson.com/post/site-graph/","publishdate":"2020-03-15T00:00:00Z","relpermalink":"/post/site-graph/","section":"post","summary":"I really wanted to see the link graph of websites, but didn't find user-friendly tools for doing this. So, I wrote my own. In this post, I describe how the script works, how to run it, how to customize the visualizations, and what issues I ran into along the way. Most importantly, I have some pretty pictures and an embedded interactive graph of this very site.","tags":[],"title":"Site Graph","type":"post"},{"authors":[],"categories":["Discrete Choice"],"content":"Choosing is one of the most common and important actions people take: we choose where to work, how to get there, who to vote for, and what to have for lunch. These scenarios are studied in economics, psychology, and (recently) computer science under the umbrella of ‚Äúdiscrete choice‚Äù (as opposed to continuous choices, like how much milk to put in your coffee). In a discrete choice setting, we‚Äôre presented with a set of options (the choice set) and we make a selection from the available items. Models describing how people make discrete choices have been studied since the ‚Äô70s (by McFadden1 2 and Tversky3, most notably). Here, I‚Äôll grive a brief introduction to discrete choice models and lead up into my recent work with Austin Benson (edit: now accepted at ICML 2020).\nIIA and Plackett-Luce The most basic choice model is the Plackett-Luce model, under which the probability that someone picks an item $x$ from the choice set $C$ is proportional to the utility $u_x$ of $x$ (some quantity describing its value to the chooser):\n$$\\Pr(x \\mid C) = \\frac{u_x}{\\sum_{y \\in C} u_y}.$$\nThis model can be derived from a seemingly reasonable assumption about choice, the independence from irrelevant alternatives (IIA), also called Luce‚Äôs choice axiom4. IIA states that the relative probabilities of picking items do not depend on the other items in the choice set. Formally, IIA holds if for all items $x, y$ that appear in both the choice sets $C$ and $C‚Äô$,\n$$\\frac{\\Pr(x \\mid C)}{\\Pr(y \\mid C)} = \\frac{\\Pr(x \\mid C‚Äô)}{\\Pr(y \\mid C‚Äô)}.$$\nFor instance, if I prefer pizza to hot dogs, then I should still prefer pizza to hot dogs when you tell me that hamburgers are also available.\nMultinomial logit A slight variant of the Plackett-Luce model is the multinomial logit model (MNL), in which choice probabilities are proportional to the exponentials of item utilities:\n$$\\Pr(x \\mid C) = \\frac{e^{u_x}}{\\sum_{y \\in C} e^{u_y}}.$$\nIn machine learning, this would be called a softmax over item utilities. From an economic perspective, the MNL model has a nice property: if people draw random utilities from Gumbel distributions with means $u_x$ before picking the item with maximum observed utility, then the induced choice probabilities are exactly the MNL model. In other words, MNL is consistent with the economic principle that people are utility-maximizers. From a computer science persepctive, however, the more important thing is that we can learn maximum-likelihood utilities from observed choices since the log-likelihood function is convex.\nContext effects While IIA is intuitively satisfying and leads to simple models, it often doesn‚Äôt hold in practice (see, e.g., seminal work by Tversky and Kahneman5 and Tversky and Simonson6). For instance, similar items sometimes cannibalize each other. Every presidential election cycle, we are reminded of the unfortunate phenomenon of vote-splitting (this motivates voting systems better than first-past-the-post, but that‚Äôs for another post). This is an example of an IIA violation: if 50% of people vote liberal and 50% vote moderate, then one candidate from each category would tie against each other. However, introduce one more liberal and the votes may look like 25%, 25%, 50%. These phenomena are termed context effects. Another common context effect is the compromise effect, which describes the tendency for people to choose intermediate options from the choice set (the classic example is that people tend to buy the middle-priced bottle of wine given three options).\nNested logit Many alternative discrete choice models have been introduced to account for context effects. One is the nested logit (NL) model, which is designed to account for the type of cannibalization described above. In a nested logit model, the items are the leaves of a tree whose internal nodes represent categories of items. Every node in the tree has an associated utility. For example:\ngraph TD A(Start) --\u0026gt; R(Moderate, 2) A --\u0026gt; L(Liberal, 3) R --\u0026gt; C(Arthur, 1) R --\u0026gt; D(Tricia, 5) L --\u0026gt; E(Zaphod, 10) L --\u0026gt; F(Ford, 3) To choose in the NL model, you start at the root and repeatedly choose from the children of the current node according to an MNL model until reaching a leaf. In the NL instance above, the probability that I would vote for Zaphod is $$\\frac{e^3}{e^2 + e^3} \\cdot \\frac{e^{10}}{e^{10} + e^3} \\approx 73\\%.$$ Like MNL, nested logit utilities can be efficiently inferred from choice data (inferring the correct tree structure is an open problem‚Äîpeople typically design possible trees by hand and use hypothesis testing).\nCDM Another interesting discrete choice model is the context-dependent random utility model (CDM) recently introduced by Seshadri, Peysakhovich, and Ugander7. This model is based on the idea that context effects can be approximated by pairwise interactions. That is, the utility of item $x$ in choice set $C$ depends on an intrinsic value term plus the effect of every other item in $C$ on $x$. In principle, the context effects ‚Ä¶","date":1583534041,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583534041,"objectID":"4e7e7943f82555bb32b49637a51a1198","permalink":"https://www.kirantomlinson.com/post/discrete-choice-models/","publishdate":"2020-03-06T17:34:01-05:00","relpermalink":"/post/discrete-choice-models/","section":"post","summary":"Choosing is one of the most common and important actions people take: we choose where to work, how to get there, who to vote for, and what to have for lunch.","tags":[],"title":"Discrete Choice Models","type":"post"},{"authors":["Kiran Tomlinson","Layla Oesper"],"categories":["Computational Biology"],"content":"","date":1577059200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577059200,"objectID":"93bb5cec28bdaa049297455432a876ca","permalink":"https://www.kirantomlinson.com/publication/2019-tomlinson-phylogeny-parameter-effects/","publishdate":"2020-03-06T16:52:41-05:00","relpermalink":"/publication/2019-tomlinson-phylogeny-parameter-effects/","section":"publication","summary":"An extended journal version of our 2018 BIBM paper. We examine how aspects of sequencing data and patterns of tumor evolution affect phylogeny inference.","tags":[],"title":"Parameter, Noise, and Tree Topology Effects in Tumor Phylogeny Inference","type":"publication"},{"authors":["Kiran Tomlinson"],"categories":[],"content":"","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"46cd1598aef82fe0860e4ebec04e5ead","permalink":"https://www.kirantomlinson.com/publication/2019-tomlinson-cyclic-cellular-automaton/","publishdate":"2020-03-06T11:50:47-05:00","relpermalink":"/publication/2019-tomlinson-cyclic-cellular-automaton/","section":"publication","summary":"The cyclic cellular automaton model of excitable media evolves through phases whose lengths are described by simple power laws.","tags":[],"title":"Phase Lengths in the Cyclic Cellular Automaton","type":"publication"},{"authors":["Kiran Tomlinson","Layla Oesper"],"categories":["Computational Biology"],"content":"","date":1543795200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543795200,"objectID":"5e7ac29fe35dddba4955397617ceeab0","permalink":"https://www.kirantomlinson.com/publication/2018-tomlinson-examining-phylogeny-inference/","publishdate":"2020-03-05T22:31:51-05:00","relpermalink":"/publication/2018-tomlinson-examining-phylogeny-inference/","section":"publication","summary":"We explore when and how well tumor evolutionary histories can be inferred from multi-sample bulk sequencing data.","tags":[],"title":"Examining Tumor Phylogeny Inference in Noisy Sequencing Data","type":"publication"},{"authors":null,"categories":null,"content":"üéì*Jul \u0026#39;24* Passed my [B Exam](https://gradschool.cornell.edu/academic-progress/requirements/making-academic-progress/defending-your-thesis-or-dissertation/)!\rü™ß *May \u0026#39;24* Presented a poster on [ranking with consideration](/publication/2024-aoki-sherwood-bounding/) at [AAMAS \u0026#39;24](https://www.aamas2024-conference.auckland.ac.nz). üì¢ *Apr \u0026#39;24* Wrote a [blog post](https://aihub.org/2024/04/04/the-moderating-effect-of-instant-runoff-voting/) for AIhub about the moderating effect of instant runoff voting. *Mar \u0026#39;24* Accepted a Senior Researcher position at Microsoft Research, in the [Augmented Learning and Reasoning](https://www.microsoft.com/en-us/research/group/augmented-learning-and-reasoning/) group!\rüó£ *Feb \u0026#39;24* Gave a talk on the [moderating effect of instant runoff voting](/publication/2023-tomlinson-moderation/) at [AAAI \u0026#39;24](https://aaai.org/aaai-conference/).\rüìù *Dec \u0026#39;23* Our [paper on consider-then-choose ranking models](/publication/2024-aoki-sherwood-bounding/) was accepted as an extended abstract to [AAMAS \u0026#39;24](https://www.aamas2024-conference.auckland.ac.nz)!\rüìù *Dec \u0026#39;23* Our [paper on the moderating effect of instant runoff voting](/publication/2023-tomlinson-moderation/) was accepted to [AAAI \u0026#39;24](https://aaai.org/aaai-conference/)!\rüó£ *Aug \u0026#39;23* Gave a [talk](https://www.cs.cornell.edu/content/algorithmic-perspectives-instant-runoff-voting) on instant runoff voting at the [Cornell CS Theory Seminar](https://www.cs.cornell.edu/content/fall-2023-theory-seminar).\rüìù *Aug \u0026#39;23* Our [paper on networked choice](/publication/2022-tomlinson-graph-choice/) was accepted to [*Network Science*](https://www.cambridge.org/core/journals/network-science)!\rüó£ *Aug \u0026#39;23* Gave a talk at [KDD](https://kdd.org/kdd2023/) on [recommendation with temporal network objectives](/publication/2023-tomlinson-workplace-recommendation/).\rüó£ *Jul \u0026#39;23* Gave a talk at [NetSci](https://netsci2023.wixsite.com/netsci2023/) on [recommendation with temporal network objectives](/publication/2023-tomlinson-workplace-recommendation/).\rüó£ *Jul \u0026#39;23* Gave an invited talk at [SINM](https://sinm.network) on [networks](/publication/2022-tomlinson-graph-choice/) and [discrete choice](/publication/2020-tomlinson-feature-context-effects/).\rüìù *May \u0026#39;23* Our [paper on multi-organization recommendation](/publication/2023-tomlinson-targeted-training/) was accepted to [*ACM TORS*](https://dl.acm.org/journal/tors)!\rüìù *May \u0026#39;23* Our [paper on recommendation with temporal network objectives](/publication/2023-tomlinson-workplace-recommendation/) was accepted to [KDD 2023](https://kdd.org/kdd2023/)!\rüó£ *May \u0026#39;23* Gave a [talk](https://www.carleton.edu/computer-science/news-events/events/?eventId=aa0ra13uq78hg0pat40o3vr518) at Carleton College on [two](/publication/2023-tomlinson-ballot-length/) ranked choice voting [projects](/publication/2023-tomlinson-moderation/).\rüó£ *Feb \u0026#39;23* Gave a talk at [AAAI](https://aaai.org/Conferences/AAAI-23/) on [ballot length in IRV](/publication/2023-tomlinson-ballot-length/).\rüë®‚Äçüè´ *Jan \u0026#39;23* Started a two-term visiting faculty position at [Carleton College](https://www.carleton.edu/computer-science/)! üìù *Nov \u0026#39;22* Our paper on [ballot length in instant runoff voting](/publication/2023-tomlinson-ballot-length/) was accepted to [AAAI 2023](https://aaai.org/Conferences/AAAI-23/)!\rüë®‚Äçüíª *May \u0026#39;22* Started my summer internship @ [Microsoft Research](https://www.microsoft.com/en-us/research/people/jenneville/)!\rüõ† *May \u0026#39;22* Attended the [Network Dynamics and Choice Theory](https://twitter.com/_jgyou/status/1527066572434690050?s=20\u0026amp;t=LfL5_05DhzbLg0V9FHC6RA) workshop @ UVM!\rüë®‚Äçüè´ *May \u0026#39;22* Accepted a Visiting Instructor position at [Carleton College](https://www.carleton.edu/computer-science/) for Winter and Spring 2023!\rüéì *May \u0026#39;22* Passed my [A Exam](https://gradschool.cornell.edu/academic-progress/requirements/making-academic-progress/advancing-to-doctoral-candidacy/)! üë®‚Äçüíª *Dec \u0026#39;21* Accepted a summer internship @ [Microsoft Research](https://www.microsoft.com/en-us/research/people/jenneville/)!\rüõ† *Dec \u0026#39;21* I hosted [WHMD](https://sites.google.com/view/whmd2021/) at [NeurIPS \u0026#39;21](https://nips.cc/Conferences/2021/Schedule?type=Workshop) and moderated our speaker Q\u0026amp;A! Watch it [here](https://neurips.cc/virtual/2021/workshop/21835). üõ† *Jul \u0026#39;21* The [Workshop on Human and Machine Decisions](https://sites.google.com/view/whmd2021/) was accepted to [NeurIPS \u0026#39;21](https://nips.cc/Conferences/2021/Schedule?type=Workshop)!\rüë®‚Äçüíª *May \u0026#39;21* Started my summer internship @ Microsoft\u0026#39;s [Office of Applied Research](https://www.microsoft.com/en-us/research/group/office-of-applied-research/)!\rüìùüìù *May \u0026#39;21* Two papers accepted to [KDD 2021](https://www.kdd.org/kdd2021/)! One on the [LCL](/publication/2020-tomlinson-feature-context-effects/), one on [choice set confounding](/publication/2021-tomlinson-choice-set-confounding/)\rüó£ *Apr \u0026#39;21* Gave a talk for the Predicting Human Decisions course @ [WPI](https://www.wpi.edu/academics/departments/computer-science) on the ‚Ä¶","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"49fb5b17b107d8f7ac465f8be09eac03","permalink":"https://www.kirantomlinson.com/newslist/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/newslist/","section":"","summary":"üéì*Jul '24* Passed my [B Exam](https://gradschool.cornell.edu/academic-progress/requirements/making-academic-progress/defending-your-thesis-or-dissertation/)!\rü™ß *May '24* Presented a poster on [ranking with consideration](/publication/2024-aoki-sherwood-bounding/) at [AAMAS '24](https://www.aamas2024-conference.auckland.ac.nz). üì¢ *Apr '24* Wrote a [blog post](https://aihub.org/2024/04/04/the-moderating-effect-of-instant-runoff-voting/) for AIhub about the moderating effect of instant runoff voting.","tags":null,"title":"","type":"page"}]