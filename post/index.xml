<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Kiran Tomlinson</title>
    <link>https://www.kirantomlinson.com/post/</link>
      <atom:link href="https://www.kirantomlinson.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Sun, 19 May 2024 16:47:36 -0400</lastBuildDate>
    <image>
      <url>https://www.kirantomlinson.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://www.kirantomlinson.com/post/</link>
    </image>
    
    <item>
      <title>Building a 6502 Computer, Part 7: Emulator</title>
      <link>https://www.kirantomlinson.com/post/6502-7/</link>
      <pubDate>Sun, 19 May 2024 16:47:36 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-7/</guid>
      <description>&lt;p&gt;Ok, I&amp;rsquo;m a bit behind on these posts&amp;hellip;. I actually started writing this emulator in December 2022, in preparation for teaching a class in Java at Carleton. Since then, it&amp;rsquo;s become a nearly full replica of the KiT 2 (with the exception of the sound card&amp;ndash;to be discussed in a future post). I would call it &lt;a href=&#34;https://emulation.gametechwiki.com/index.php/Emulation_accuracy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;partially cycle-accurate&lt;/a&gt;; the emulator tracks how many cycles each instruction takes, but doesn&amp;rsquo;t resolve within-cycle timings. It supports almost every 65C02 instruction, with the exceptions of STP, WAI, TSB, and TRB (which I&amp;rsquo;ve never used, although it would be easy to add support for them). I referred to &lt;a href=&#34;https://www.masswerk.at/6502/6502_instruction_set.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this great resource&lt;/a&gt; on the 6502 instruction set very often while writing the emulator, as well as &lt;a href=&#34;http://www.6502.org/tutorials/65c02opcodes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this page&lt;/a&gt; on the 65C02 instruction set (which adds a few instructions and has slightly different cycle counts).&lt;/p&gt;
&lt;p&gt;The major components I&amp;rsquo;m emulating are the CPU, RAM, ROM, SSD, graphics card, PS2 keyboard interface, UART, and VIAs. The components talk to each other through a &lt;code&gt;Bus&lt;/code&gt; class, which they can write data to and read data from. Here&amp;rsquo;s the core of the emulation loop, omitting some details:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doReset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// reset everything&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currTime&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Execute next instruction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Simulate execution time&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycleCount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getCycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCycles&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycleCount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevCycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nsElapsed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;480&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nsElapsed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prevCycleCount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// VIA timers need to know how many cycles have elapsed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;via1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;updateCycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;via2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;updateCycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newCycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;CPU&lt;/code&gt; class looks roughly as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// registers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CPU&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mnemonic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddressingMode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addrMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// all the instructions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// registers&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// flags&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;instructions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycleCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;step&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getIRQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doIRQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;instructions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycleCount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;cycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s what a typical instruction looks like. I usually have an abstract class for a collection of instructions (to maximize code reuse), with concrete subclasses for each addressing mode (which each have their own opcodes and cycle counts):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;abstract&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LDA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instruction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LDA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mnemonic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CPU&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;AddressingMode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addrMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mnemonic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addrMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;opcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cycles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getLoadVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addrMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// getLoadVal reads from the bus according to the addressing mode (and increments the PC accordingly)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;updateNZ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// updates the N and Z flags according to the newly loaded value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;incPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// increment the program counter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LDAImmediate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LDA&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LDAImmediate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;lda&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddressingMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;IMMEDIATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0xA9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// all the other addressing modes for LDA ...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was pretty amazing to go from coding up the effects of each instruction on each register and flag to a running computer. Here&amp;rsquo;s what the emulator currently looks like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;KiT Emu&#34; srcset=&#34;
               /post/6502-7/images/kit-emu_hu1e07cc0c10111df03bd5c293fbab28fb_34376_0faf5714c86809774adfb651aac6f214.webp 400w,
               /post/6502-7/images/kit-emu_hu1e07cc0c10111df03bd5c293fbab28fb_34376_8c09eed9e5a1d7a9ec6c59edaf3fa2c7.webp 760w,
               /post/6502-7/images/kit-emu_hu1e07cc0c10111df03bd5c293fbab28fb_34376_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-7/images/kit-emu_hu1e07cc0c10111df03bd5c293fbab28fb_34376_0faf5714c86809774adfb651aac6f214.webp&#34;
               width=&#34;760&#34;
               height=&#34;556&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The emulator will run all the programs I&amp;rsquo;ve written for the KiT, including the Mandelbrot generator:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;KiT Emu Mandelbrot&#34; srcset=&#34;
               /post/6502-7/images/mandelbrot_hu7ccfa7d8d2c47327308ec7609ddfc21a_36187_8d823ea7bf80fb40d75a1e24e49415ed.webp 400w,
               /post/6502-7/images/mandelbrot_hu7ccfa7d8d2c47327308ec7609ddfc21a_36187_f2152a8e3b2896ba0e402e6337464f4e.webp 760w,
               /post/6502-7/images/mandelbrot_hu7ccfa7d8d2c47327308ec7609ddfc21a_36187_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-7/images/mandelbrot_hu7ccfa7d8d2c47327308ec7609ddfc21a_36187_8d823ea7bf80fb40d75a1e24e49415ed.webp&#34;
               width=&#34;760&#34;
               height=&#34;555&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It also supports several of the graphics modes my graphics card uses (although not all of them&amp;ndash;I haven&amp;rsquo;t bothered implementing the modes I don&amp;rsquo;t use). Here&amp;rsquo;s the high resolution two-color mode:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;KiT Emu Neil&#34; srcset=&#34;
               /post/6502-7/images/neil_hu8a7cb9207bdc3ae7e6a9d3889553ffff_63330_465d78e4818f332d1f06291a964bf00a.webp 400w,
               /post/6502-7/images/neil_hu8a7cb9207bdc3ae7e6a9d3889553ffff_63330_f3d68dda648a958f70c9f725937ce377.webp 760w,
               /post/6502-7/images/neil_hu8a7cb9207bdc3ae7e6a9d3889553ffff_63330_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-7/images/neil_hu8a7cb9207bdc3ae7e6a9d3889553ffff_63330_465d78e4818f332d1f06291a964bf00a.webp&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using the emulator to help speed up iterative development, which was really helpful in implementing Tetris:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;KiT Emu Tetris&#34; srcset=&#34;
               /post/6502-7/images/tetris_hu2aa2e434773cea45c54bf2bed01b6caa_34927_61330dabe889b1fd487c07dc9be09d06.webp 400w,
               /post/6502-7/images/tetris_hu2aa2e434773cea45c54bf2bed01b6caa_34927_10a38b430d3f21b94fa729821b6d2aa4.webp 760w,
               /post/6502-7/images/tetris_hu2aa2e434773cea45c54bf2bed01b6caa_34927_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-7/images/tetris_hu2aa2e434773cea45c54bf2bed01b6caa_34927_61330dabe889b1fd487c07dc9be09d06.webp&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;As you can see in the screenshots, the emulator supports &amp;ldquo;Turbo&amp;rdquo; mode, which skips the busy-waiting loop for maximum speed. It usually reaches 30-35 MHz in Turbo mode on my 2018 MacBook Pro, meaning my emulator is efficient enough to run at nearly 20x native speed!&lt;/p&gt;
&lt;p&gt;If you want to run the KiT yourself or even write some 6502 code for it, now you can! The emulator is publicly available at &lt;a href=&#34;https://github.com/tomlinsonk/kit-emu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tomlinsonk/kit-emu&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;previous-post-part-6hahahugoshortcode22s0hbhb----span-stylefloatrightnext-post-part-8span---&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-6/&#34;&gt;Part 6&lt;/a&gt; &lt;!-- &lt;span style=&#34;float:right&#34;&gt;Next post: [Part 8]()&lt;/span&gt; --&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 6: KiT 2</title>
      <link>https://www.kirantomlinson.com/post/6502-6/</link>
      <pubDate>Wed, 31 May 2023 10:43:17 -0500</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-6/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-5/&#34;&gt;last post&lt;/a&gt;, I described adding serial I/O to the KiT 1; that was the last major hardware addition I made to the breadboard-based version. The next step was a big one: going from breadboard to printed circuit board (PCB). After seeing &lt;a href=&#34;https://www.youtube.com/channel/UCeRXQ_B5WZD3yjPly45myvg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;James Sharman&lt;/a&gt;&amp;rsquo;s incredible success with his pipelined 8-bit CPU, I decided to use &lt;a href=&#34;https://easyeda.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EasyEDA&lt;/a&gt; as my PCB design tool. I settled on a modular design, where the core functionality would be included in the main board (CPU, RAM, ROM, UART, VIAs) and additional features would be provided trough 5 expansion slots (graphics, sound, storage, etc). After a lot of time spent fiddling around with positioning and tons of manual wiring, here&amp;rsquo;s what my main board design ended up looking like:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Main PCB&#34; srcset=&#34;
               /post/6502-6/main-pcb_hu27e79cead8713b31558a254d0e04ba26_757176_ad431696c144bd0836e6db6d356f3b51.webp 400w,
               /post/6502-6/main-pcb_hu27e79cead8713b31558a254d0e04ba26_757176_25a2140758b1568c7d92648e1a1f0029.webp 760w,
               /post/6502-6/main-pcb_hu27e79cead8713b31558a254d0e04ba26_757176_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/main-pcb_hu27e79cead8713b31558a254d0e04ba26_757176_ad431696c144bd0836e6db6d356f3b51.webp&#34;
               width=&#34;760&#34;
               height=&#34;757&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The main board of the new KiT 2 is overall quite similar to the breadboard KiT 1, with few exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I removed the LCD and graphics card, since these would be handled by expansion cards (in fact, I haven&amp;rsquo;t bothered with an LCD now that I have a good graphics card).&lt;/li&gt;
&lt;li&gt;There is one more VIA on the KiT 2 (I call the extra two ports C and D). On the KiT 1, VIA port A was used for keyboard input and port B was used for the LCD. On the KiT 2, port A is still used for keyboard input, but port B is simply exposed with a pin header for versatility (like GPIO pins on a Raspberry Pi). Ports C and D are tied into the expansion slots: C is wired to slot 1, while D wired to slots 2-5. The idea is to use slot 1 for cards that need continuous access to a dedicated port, while slots 2-5 can share a single port for intermittent use. I&amp;rsquo;m using slot 1 for the graphics card, where port C controls the graphics mode. It would be possible to just use port D for this, but that would require some additional latching and dedicated address space. This solution makes controlling graphics modes very simple!&lt;/li&gt;
&lt;li&gt;I replaced the address control logic chips with two programmable &lt;a href=&#34;https://en.wikipedia.org/wiki/Generic_Array_Logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GAL&lt;/a&gt; chips (nice blog post about GALs &lt;a href=&#34;https://justanotherelectronicsblog.com/?p=458&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;), one to control all of the chip select lines for the main board (the Main GAL) and one to control the slot select lines (the Slot GAL). The really nice feature of GALs is that I can reprogram them using my EEPROM programmer to rearrange the address space on the fly. You just specify the pin logic in a &lt;code&gt;.pld&lt;/code&gt; file, assemble it into a &lt;code&gt;.jed&lt;/code&gt; file using &lt;a href=&#34;https://github.com/simon-frankau/galette&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Galette&lt;/a&gt;, and flash that to the GAL chip using &lt;a href=&#34;https://gitlab.com/DavidGriffith/minipro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minipro&lt;/a&gt;. Here&amp;rsquo;s a snippet of my Main GAL &lt;code&gt;.pld&lt;/code&gt; file showing the syntax for specifying I/O logic (note: &lt;code&gt;*&lt;/code&gt; is &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; is &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;/&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt;; the &lt;code&gt;.pld&lt;/code&gt; file also lets you name the pins, which I&amp;rsquo;ve done here):
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ROM  = a15 * a14 + a15 * a13 + a15 * a12
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;RAM  = PHI2 * /a15 * /a14 + PHI2 * /a15 * /a13
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;VIA1 = /a15 * a14 * a13 * a12 * a11 * /a10 * /a9 * /a8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;VIA2 = /a15 * a14 * a13 * a12 * a11 * /a10 * /a9 * a8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;UART = /a15 * a14 * a13 * a12 * a11 * /a10 * a9 * /a8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;I decided to use surface-mount components (except the main chips, which are all DIP). Since I was expecting to hand-solder everything, I picked one of the larger standard component sizes: 1206. This ended up working out well enough&amp;ndash;they were small enough to make layout possible, but also big enough to hand-solder without too much hassle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The board layout itself was pretty challenging, especially the routing (which is &lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/800139.804562&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NP-hard&lt;/a&gt;, after all). Since I knew nothing about PCB design, I did a bunch of internet digging and tried to follow these basic guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;four layers: power and ground planes in the middle and two signal layers on the outside&lt;/li&gt;
&lt;li&gt;thin signal traces, thick power traces&lt;/li&gt;
&lt;li&gt;minimize number of vias&lt;/li&gt;
&lt;li&gt;only 45-degree angles for traces (no right angles)&lt;/li&gt;
&lt;li&gt;top layer has mostly horizontal traces, bottom layer has mostly vertical traces.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;m not sure exactly how long all the routing took, but it was definitely many hours. In parallel, I was also working on the graphics card, since that would be my primary output from the KiT 2. I used the same basic design as the KiT 1&amp;rsquo;s graphics card, but designed it to fit into expansion slot 1, added two more DPRAM chips (6K total!) so I&amp;rsquo;d be able to use all video modes supported by the MC6847, and tied in the video mode lines into port C in the expansion slot so that I could control video modes programmatically rather than with DIP switches as in the KiT 1. Here&amp;rsquo;s the final PCB layout for the graphics card:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Graphics Card PCB&#34; srcset=&#34;
               /post/6502-6/graphics-pcb_hu36df23544854aab5fdc71652992d1a71_558950_164b17acbb874e0969fb086330754008.webp 400w,
               /post/6502-6/graphics-pcb_hu36df23544854aab5fdc71652992d1a71_558950_9ad4a34beef4823e4277b1db71d79173.webp 760w,
               /post/6502-6/graphics-pcb_hu36df23544854aab5fdc71652992d1a71_558950_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/graphics-pcb_hu36df23544854aab5fdc71652992d1a71_558950_164b17acbb874e0969fb086330754008.webp&#34;
               width=&#34;726&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Finally, I made a prototyping card that would let me develop other expansion cards without needing to get a new PCB manufactured each time:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Prototyping Card PCB&#34; srcset=&#34;
               /post/6502-6/proto-pcb_hu92f7acff9e7db1b3c3d041d94f44c985_282457_58265c4c228f42e3298104806931ceb9.webp 400w,
               /post/6502-6/proto-pcb_hu92f7acff9e7db1b3c3d041d94f44c985_282457_3549c0e30549b6cf4594d956cd3d282a.webp 760w,
               /post/6502-6/proto-pcb_hu92f7acff9e7db1b3c3d041d94f44c985_282457_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/proto-pcb_hu92f7acff9e7db1b3c3d041d94f44c985_282457_58265c4c228f42e3298104806931ceb9.webp&#34;
               width=&#34;743&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Once the designs were done, I placed an order with &lt;a href=&#34;https://jlcpcb.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JLCPCB&lt;/a&gt; and ordered all the components (mostly from &lt;a href=&#34;https://www.mouser.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mouser&lt;/a&gt; and &lt;a href=&#34;https://www.jameco.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jameco&lt;/a&gt;), although I got some of the obsolete components from random sellers on eBay (like the GALs). The boards turned out looking great! Here are some pictures at various stages of soldering and fit-testing:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Blank Main PCB&#34; srcset=&#34;
               /post/6502-6/blank-board_hu0dfab569d43f275e23699208560ec53f_3231352_e931e2953b96dd476923173a5c8ecdf7.webp 400w,
               /post/6502-6/blank-board_hu0dfab569d43f275e23699208560ec53f_3231352_7bdbc368d240b225ecffdf74c8c2ec06.webp 760w,
               /post/6502-6/blank-board_hu0dfab569d43f275e23699208560ec53f_3231352_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/blank-board_hu0dfab569d43f275e23699208560ec53f_3231352_e931e2953b96dd476923173a5c8ecdf7.webp&#34;
               width=&#34;760&#34;
               height=&#34;642&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Populated Main PCB&#34; srcset=&#34;
               /post/6502-6/populated_hu59de14ce24cb332822009e2ac2281f0b_3807468_54e0423ac920c45c51312a8c9852d605.webp 400w,
               /post/6502-6/populated_hu59de14ce24cb332822009e2ac2281f0b_3807468_5dde7e1b840531f84fa97ff44c810652.webp 760w,
               /post/6502-6/populated_hu59de14ce24cb332822009e2ac2281f0b_3807468_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/populated_hu59de14ce24cb332822009e2ac2281f0b_3807468_54e0423ac920c45c51312a8c9852d605.webp&#34;
               width=&#34;742&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Fit Test&#34; srcset=&#34;
               /post/6502-6/fit-test_hu4802174e81e7ce12ec9f7df6250d7248_4195252_34d510ba115c21d5c75b23ec69d7742d.webp 400w,
               /post/6502-6/fit-test_hu4802174e81e7ce12ec9f7df6250d7248_4195252_1db0adb559493120ad1ab73118b206a9.webp 760w,
               /post/6502-6/fit-test_hu4802174e81e7ce12ec9f7df6250d7248_4195252_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/fit-test_hu4802174e81e7ce12ec9f7df6250d7248_4195252_34d510ba115c21d5c75b23ec69d7742d.webp&#34;
               width=&#34;650&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;After installing of the chips, I wrote a simple program to blink an LED hooked up to port B. It was alive!&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Signs of Life&#34; srcset=&#34;
               /post/6502-6/signs-of-life_hu6decb8f5e9a5cf180db8561877f37409_4514642_beeb2792d1243c37a6df2e3b3f9cdb2f.webp 400w,
               /post/6502-6/signs-of-life_hu6decb8f5e9a5cf180db8561877f37409_4514642_80447482949c9e4d944fb44d97d4d903.webp 760w,
               /post/6502-6/signs-of-life_hu6decb8f5e9a5cf180db8561877f37409_4514642_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/signs-of-life_hu6decb8f5e9a5cf180db8561877f37409_4514642_beeb2792d1243c37a6df2e3b3f9cdb2f.webp&#34;
               width=&#34;580&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I eventually got around to soldering up the graphics card too:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;KiT 2 with Graphics&#34; srcset=&#34;
               /post/6502-6/kit-with-graphics_huc72ea4d79c74a03a0592d45ebc79c490_4241550_6ef8c361afbba368b644ec1acf45b7cc.webp 400w,
               /post/6502-6/kit-with-graphics_huc72ea4d79c74a03a0592d45ebc79c490_4241550_ac87543020c58f074bd5910a7576dc84.webp 760w,
               /post/6502-6/kit-with-graphics_huc72ea4d79c74a03a0592d45ebc79c490_4241550_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/kit-with-graphics_huc72ea4d79c74a03a0592d45ebc79c490_4241550_6ef8c361afbba368b644ec1acf45b7cc.webp&#34;
               width=&#34;661&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;After debugging a bunch of issues listed below, I was able to get it working and take advantage of the newly available 6K graphics modes:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Neil B/W&#34; srcset=&#34;
               /post/6502-6/neil_hu5ace99abdef4eed21896c259e8a6d89f_4475528_9179b3b6ef9159f7bcce77e79b910518.webp 400w,
               /post/6502-6/neil_hu5ace99abdef4eed21896c259e8a6d89f_4475528_776637ee797e1e25f9b46c7f305347af.webp 760w,
               /post/6502-6/neil_hu5ace99abdef4eed21896c259e8a6d89f_4475528_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-6/neil_hu5ace99abdef4eed21896c259e8a6d89f_4475528_9179b3b6ef9159f7bcce77e79b910518.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Of course, my first-try designs had a bunch of issues, although I&amp;rsquo;ve been able to work around them reasonably well. Here are the hardware bugs I know of in the KiT 2:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Known bugs&lt;/th&gt;
&lt;th&gt;Current patch&lt;/th&gt;
&lt;th&gt;Eventual fix&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RX and TX are the wrong way around for the UART header&lt;/td&gt;
&lt;td&gt;Made an adapter&lt;/td&gt;
&lt;td&gt;Swap RX and TX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UART LEDs are on when they should be off&lt;/td&gt;
&lt;td&gt;Ignore the LEDs&lt;/td&gt;
&lt;td&gt;Remove UART LEDs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The PS/2 connector is wired backwards/upside-down&lt;/td&gt;
&lt;td&gt;Made an adapter&lt;/td&gt;
&lt;td&gt;Fix the wiring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The power jack ground is wired wrong&lt;/td&gt;
&lt;td&gt;Soldered a jumper&lt;/td&gt;
&lt;td&gt;Fix the wiring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The UART write signal is wrong  (some writes fail; see &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-5/#footnote-1&#34;&gt;this footnote&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;Avoid UART writes&lt;/td&gt;
&lt;td&gt;Add R/!W as an input to Main GAL and gate the UART write signal based on it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Graphics card: !BUSY pins on all 3 DPRAMs are missing pull-up resistors&lt;/td&gt;
&lt;td&gt;Soldered resistors to the pins of chip U9&lt;/td&gt;
&lt;td&gt;Add SMD pull-up resistors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you want to check out the full schematic for the main board, &lt;a href=&#34;kit-2-schematic.svg&#34;&gt;here it is&lt;/a&gt;, but beware that it includes the bugs listed above.&lt;/p&gt;
&lt;p&gt;Since getting the KiT 2 working, I&amp;rsquo;ve made two more expansion cards: a 256KB flash drive for persistent storage and a sound card using an &lt;a href=&#34;https://retrocomp.cz/produkt?id=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ARMSID&lt;/a&gt;. I&amp;rsquo;ve also written an emulator for the KiT 2! More on these developments in future posts.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;previous-post-part-5hahahugoshortcode21s2hbhb-span-stylefloatrightnext-post-part-7hahahugoshortcode21s3hbhbspan&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-5/&#34;&gt;Part 5&lt;/a&gt; &lt;span style=&#34;float:right&#34;&gt;Next post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-7/&#34;&gt;Part 7&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 5: UART</title>
      <link>https://www.kirantomlinson.com/post/6502-5/</link>
      <pubDate>Wed, 05 Apr 2023 22:57:56 -0500</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-5/</guid>
      <description>&lt;p&gt;After adding a &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-4/&#34;&gt;graphics card&lt;/a&gt; to my 6502-based computer, the next step was to make programming it easier. Up to this point in the build, I had to remove the ROM chip and manually flash it with my &lt;a href=&#34;https://www.jameco.com/z/TL866II-Plus-Jameco-ValuePro-USB-High-Performance-Programmer_2297823.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TL866II Plus Programmer&lt;/a&gt; each time I wanted to run a new program. This made debugging quite tedious. The solution: a serial input/output port that would allow me to connect my laptop to the 6502 and send data back and forth. That way, the 6502 could load a program over the serial port directly into RAM and execute it. I already had a USB to UART adapter, so I did some research and selected the &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/tl16c550c.pdf?ts=1680754339129&amp;amp;ref_url=https%253A%252F%252Fwww.ti.com%252Fproduct%252FTL16C550C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;16C550&lt;/a&gt; as a good option for a &lt;a href=&#34;https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UART&lt;/a&gt; chip available in DIP form.&lt;/p&gt;
&lt;p&gt;Just recently, Ben Eater actually released a &lt;a href=&#34;https://youtu.be/oLYLnb7kpLg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;few&lt;/a&gt; &lt;a href=&#34;https://youtu.be/zsERDRM1oy8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;videos&lt;/a&gt; and a &lt;a href=&#34;https://eater.net/6502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kit&lt;/a&gt; for adding an RS-232 serial port to his 6502 kit. I might have gone this route had it been released 6 months earlier, but it&amp;rsquo;s probably good that I got the experience designing and testing my own approach. Ben&amp;rsquo;s version uses the &lt;a href=&#34;https://www.westerndesigncenter.com/wdc/documentation/w65c51s.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W65C51 ACIA&lt;/a&gt; chip, which  unfortunately has a &lt;a href=&#34;http://forum.6502.org/viewtopic.php?f=4&amp;amp;t=2543&amp;amp;start=30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;known bug&lt;/a&gt;. It&amp;rsquo;s possible to work around it, but this dissuaded me from the 65C51.&lt;/p&gt;
&lt;p&gt;The 16C550 has a bunch of neat features, including a software-selectable baud rate and 16-byte receive and transmit queues. It can either generate interrupts when data arrives or operate in polled mode where the CPU repeatedly checks whether data is available.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how the chip fits in with my build:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Schematic&#34; srcset=&#34;
               /post/6502-5/schematic_hub1d324e0761253caade07212c2346540_197230_71c29b7fc14e067723363d42def24726.webp 400w,
               /post/6502-5/schematic_hub1d324e0761253caade07212c2346540_197230_a5b4f88fa02dd4fb9830a84408a8b689.webp 760w,
               /post/6502-5/schematic_hub1d324e0761253caade07212c2346540_197230_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-5/schematic_hub1d324e0761253caade07212c2346540_197230_71c29b7fc14e067723363d42def24726.webp&#34;
               width=&#34;760&#34;
               height=&#34;586&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The data and address lines are driven directly by the data and address bus. I allocated addresses 7820-782F for the UART and added address decode logic to send the !UART signal low when any of these addresses are accessed. This allows reads and writes&lt;sup&gt;&lt;a href=&#34;#footnote-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to the UART registers (including mode configuration registers and the receive/transmit buffers). Using the 1MHz system clock (signal PHI2 in the diagram above), I found a way to get a standard baud rate, 4800 (480 bytes/s with the serial port in &lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_port#Conventional_notation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8N1&lt;/a&gt; mode): the 16C550 allows you to set a divisor of the clock rate to set 16 times the desired baud rate. So, with 1,000,000 clock cycles per second, a divisor of 13 gives a baud rate of 1,000,000 / (13 * 16) = 4808&amp;ndash;definitely close enough to 4800 to work! 480 bytes/s is incredibly slow by today&amp;rsquo;s standards, but good enough for uploading programs to the breadboard computer!&lt;/p&gt;
&lt;p&gt;I wrote a Python script to transmit a program from my laptop to the UART, which starts out by sending the file size, a &lt;a href=&#34;https://en.wikipedia.org/wiki/Fletcher%27s_checksum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simple checksum&lt;/a&gt;, and the start address of the program. It then sends the actual program bytes, which a loading program on the breadboard computer copies into RAM starting at the start address. It can then verify that the checksum matches and run the program in RAM after it has received the declared number of bytes! Here&amp;rsquo;s some of the 6502-side code that reads in the program into &lt;code&gt;target_addr&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// initialize checksum&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ldx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// store num bytes copied low byte in X&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stz&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// store num pages copied in zp.B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ldy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// store 0 in y for indirect addressing               &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mov2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// store the target address in zp.C,D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;read_byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// get a byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sta&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// store the byte in the pointer in zp.C,D&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sta&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// update the first checksum byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;adc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sta&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checksum_addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// update the second checksum byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// increment the pointer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no_carry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if it doesn&amp;#39;t become 0, no need to carry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if it does become 0, carry to high byte&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;no_carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// increment num bytes copied&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;no_x_carry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if carrying, increment num pages copied&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;no_x_carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cpx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n_addr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bne&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if x doesn&amp;#39;t match file size low bytes, still copying&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lda&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;zp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n_addr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bcc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// if pages copied &amp;lt; filesize high byte, still copying&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I added a load command (&lt;code&gt;L&lt;/code&gt;) to the monitor program that also prints out A, B, C (address, bytes, checksum) in hex:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Load&#34; srcset=&#34;
               /post/6502-5/load_hu4855960a084fa35c2fab516693513a2d_108521_180f9e1b2177802b8566cf312b1b52dc.webp 400w,
               /post/6502-5/load_hu4855960a084fa35c2fab516693513a2d_108521_3ee1e0f136ffbe98827445c682f4bd30.webp 760w,
               /post/6502-5/load_hu4855960a084fa35c2fab516693513a2d_108521_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-5/load_hu4855960a084fa35c2fab516693513a2d_108521_180f9e1b2177802b8566cf312b1b52dc.webp&#34;
               width=&#34;760&#34;
               height=&#34;282&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This indicates a 0x77 (119) byte  program was loaded to address 0x1000 with checksum 0xA53 (which agrees with the transmitted checksum). Pressing R will run the program. (See a future post for why there&amp;rsquo;s a &amp;ldquo;Save&amp;rdquo; option&amp;ndash;this image is from a very recent version of the 6502 computer with some extra upgrades.) Here&amp;rsquo;s what the breadboard computer looks like with the 16C550 chip at the very top left:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Load&#34; srcset=&#34;
               /post/6502-5/kit_hu262ca9a3653f7ccd2f14c90900b21d31_679360_5ac460cce8b69a3439784c788bfc06bb.webp 400w,
               /post/6502-5/kit_hu262ca9a3653f7ccd2f14c90900b21d31_679360_e62ad4979b6fb53a0a0bf6bed7158820.webp 760w,
               /post/6502-5/kit_hu262ca9a3653f7ccd2f14c90900b21d31_679360_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-5/kit_hu262ca9a3653f7ccd2f14c90900b21d31_679360_5ac460cce8b69a3439784c788bfc06bb.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Notice the three green address lines and eight blue data lines brought up from the VRAM chip right below. The four wires heading off the top left of the breadboard go to my USB-to-UART adapter and then into my MacBook! Adding the ability to quickly load programs without flashing the ROM chip has enabled a much faster build-test-debug development cycle, making software development way more enjoyable.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be writing soon about a very exciting step in the project: going from breadboard to PCB!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;previous-post-part-4hahahugoshortcode20s1hbhb--span-stylefloatrightnext-post-part-6hahahugoshortcode20s2hbhbspan&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-4/&#34;&gt;Part 4&lt;/a&gt;  &lt;span style=&#34;float:right&#34;&gt;Next post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-6/&#34;&gt;Part 6&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;/br&gt;
&lt;small&gt;&lt;sup id=&#34;footnote-1&#34;&gt;1&lt;/sup&gt;Unfortunately there&#39;s a subtle bug in my design that makes writes to the somewhat unreliable, caused by the fact that writes to the 16C550 are triggered only by the rising edge of the !WR1 signal. In contrast, writes to my HM62256 RAM chip can be triggered either by the rising edge of R/!W or by the rising edge of the active low chip enable signal, whichever comes first. The 65C02&#39;s R/!W signal during a write cycle goes high at roughly the same time as the address and data lines stop being valid. In order to properly clock a write, you need to make sure the write occurs at the falling edge of the PHI2 clock, which happens before R/W! goes high and while the address and data lines are both valid. The RAM works by having the RAM chip enable signal be disabled whenever PHI2 is low, so the write gets triggered at the right time. For the 16C550, you therefore shouldn&#39;t just use the CPU&#39;s R/!W signal to control a write. Instead, you need a signal that is low when R/W! is low &lt;em&gt;and&lt;/em&gt; PHI2 is high to plug into the 16C550&#39;s !WR1. My current version is still buggy: writes sometimes succeed, but it depends on what the address lines do after the write to the 16C550. I&#39;ve managed to get the small number of writes I need to load programs working consistently, but I need to fix this issue in a future version.&lt;/small&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 4: Graphics</title>
      <link>https://www.kirantomlinson.com/post/6502-4/</link>
      <pubDate>Wed, 28 Sep 2022 22:53:57 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-4/</guid>
      <description>&lt;p&gt;So far in this project, I&amp;rsquo;ve &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-1/&#34;&gt;built a simple computer&lt;/a&gt;, &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-2/&#34;&gt;given it a keyboard&lt;/a&gt;, and &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-3/&#34;&gt;written a machine language monitor for it&lt;/a&gt;. However, only being able to see outputs on the small character LCD was not very fun, so it&amp;rsquo;s time for a serious upgrade. I decided to add a graphics card! This is the first major departure from &lt;a href=&#34;https://eater.net/6502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ben Eater&amp;rsquo;s build&lt;/a&gt; that I&amp;rsquo;ve mainly been following so far.&lt;/p&gt;
&lt;p&gt;There are a number of options for adding graphics to an 8-bit computer. Some people have used &lt;a href=&#34;https://www.skrasser.com/blog/2020/04/16/graphics-for-the-homebrew-6502-computer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom FPGAs&lt;/a&gt; or &lt;a href=&#34;https://hackaday.io/project/174865-configurable-video-output-for-6502-computers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom TTL circuits&lt;/a&gt;. Ben Eater actually has a &lt;a href=&#34;https://eater.net/vga&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video series and kit&lt;/a&gt; for a simple VGA card. If you&amp;rsquo;re interested in seeing a full nuts-and-bolts VGA build, I would highly recommend &lt;a href=&#34;https://youtu.be/K658R321f7I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;James Sharman&amp;rsquo;s VGA series&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep things simple, I decided to go with an old &lt;a href=&#34;https://en.wikipedia.org/wiki/Video_display_controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video display controller&lt;/a&gt;, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Motorola_6847&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Motorola MC6847&lt;/a&gt;, which was most notably used in the &lt;a href=&#34;http://www.trs-80.org/color-computer-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TRS-80 Color Computer&lt;/a&gt; released in 1980. Other possible 8-bit video controllers include the &lt;a href=&#34;https://en.wikipedia.org/wiki/Texas_Instruments_TMS9918&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Texas Instruments TMS9918&lt;/a&gt; and its successors, the &lt;a href=&#34;https://en.wikipedia.org/wiki/Yamaha_V9938&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yamaha V9938&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Yamaha_V9958&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yamaha V9958&lt;/a&gt;; the &lt;a href=&#34;https://en.wikipedia.org/wiki/MOS_Technology_VIC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MOS VIC&lt;/a&gt; used in the &lt;a href=&#34;https://youtu.be/yg04GyhS3ss&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Commodore VIC-20&lt;/a&gt;; the &lt;a href=&#34;https://en.wikipedia.org/wiki/MOS_Technology_VIC-II&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MOS VIC-II&lt;/a&gt; used in the &lt;a href=&#34;https://youtu.be/BpXFB8ZEH30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Commodore 64&lt;/a&gt; and &lt;a href=&#34;https://youtu.be/wzMsgnnDIRE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;128&lt;/a&gt;; and many, many more.&lt;/p&gt;
&lt;p&gt;The problem with all of these vintage ICs is that they&amp;rsquo;re no longer made, so you have to resort to buying them used (your mileage may vary). Some of these are also quite expensive ($25-$100 on eBay for a Yamaha V9938, Yamaha V9958, VIC, or VIC-II). By far the cheapest options are the MC6847 and TMS9918, both of which can be found for under $5. I was much more willing to spend $5 than $25 on a used chip from 1980 that might not work, so I got an &lt;a href=&#34;MC6847-video.pdf&#34;&gt;MC6847&lt;/a&gt; and its companion chip, the &lt;a href=&#34;MC1372-tv.pdf&#34;&gt;MC1372&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The MC6847 generates a video signal by sweeping through memory addresses and interpreting the values stored there as characters (in text modes) or pixel groups (in graphics modes). Here&amp;rsquo;s the chip&amp;rsquo;s pinout:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/mc6847-pinout_hu1dc25a94ca0f0312860ca45c3db3a650_112573_80c8f713beaca72502bd0f8a1557f43a.webp 400w,
               /post/6502-4/images/mc6847-pinout_hu1dc25a94ca0f0312860ca45c3db3a650_112573_e8a9e3453227b10cfbfeb9056a3a0bef.webp 760w,
               /post/6502-4/images/mc6847-pinout_hu1dc25a94ca0f0312860ca45c3db3a650_112573_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/mc6847-pinout_hu1dc25a94ca0f0312860ca45c3db3a650_112573_80c8f713beaca72502bd0f8a1557f43a.webp&#34;
               width=&#34;362&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DA0-DA12 are the address lines into video RAM and DD0-DD7 are the data lines where the video RAM responds with the data to display. The mode control lines (A/G, A/S, INT/EXT, INV, and GM0-GM2) are used to select the display mode, which determine how much memory is required, how bytes are interpreted, and what can be displayed. Here are the 14 modes of the MC6847:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/mc6847-modes_hu7c4ed5c8ce054353947ac0af9f72e53c_259396_ae842a4b1863e4d1994f63353f7a7157.webp 400w,
               /post/6502-4/images/mc6847-modes_hu7c4ed5c8ce054353947ac0af9f72e53c_259396_c80139fa0a3f4fdf0b865ad3d11590c4.webp 760w,
               /post/6502-4/images/mc6847-modes_hu7c4ed5c8ce054353947ac0af9f72e53c_259396_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/mc6847-modes_hu7c4ed5c8ce054353947ac0af9f72e53c_259396_ae842a4b1863e4d1994f63353f7a7157.webp&#34;
               width=&#34;760&#34;
               height=&#34;360&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The video signal is output as three signals, luminance (Y), red chrominance (ɸA), and blue chrominance (ɸB) (usually called &lt;a href=&#34;https://en.wikipedia.org/wiki/YPbPr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YPbPr&lt;/a&gt;). These signals can be combined into a &lt;a href=&#34;https://en.wikipedia.org/wiki/Composite_video&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;composite video signal&lt;/a&gt;, which is where the MC1372 comes in. Along with an external oscillator, the MC1372 provides a clock at the correct frequency for the MC6847 and can combine the outputs of the MC6847 into a color composite signal that many monitors and TVs can display (if they aren&amp;rsquo;t too recent). It&amp;rsquo;s also possible to &lt;a href=&#34;https://youtu.be/rymjY1cT6DE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;directly amplify the YPbPr signals&lt;/a&gt; and use &lt;a href=&#34;https://en.wikipedia.org/wiki/Component_video&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;component video&lt;/a&gt;, but I haven&amp;rsquo;t tried that yet.&lt;/p&gt;
&lt;p&gt;In addition to the MC6847 and MC1372, the final piece of the puzzle to add video to the breadboard computer is the video RAM (VRAM). The main challenge with VRAM is that both the CPU and the video display generator need to access it, and they run at different clock rates (3.579545 MHz for the video chip and 1 MHz for the CPU). One option would be to use the video clock for the CPU and figure out some way to share the address and data lines between the CPU and video chip (for instance, running the CPU at half the clock rate and alternating control between the two chips&amp;ndash;this is more or less what the Commodore 64 did). For simplicity, Ben Eater&amp;rsquo;s &lt;a href=&#34;https://eater.net/vga&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VGA card&lt;/a&gt; only allows the CPU to run during the blanking interval of the video signal, when the video chip doesn&amp;rsquo;t need access to VRAM&amp;ndash;but this wastes about 70% of CPU cycles.&lt;/p&gt;
&lt;p&gt;I decided to take a different approach: &lt;a href=&#34;https://www.renesas.com/us/en/products/memory-logic/multi-port-memory/asynchronous-dual-port-rams&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asynchronous dual-port RAM&lt;/a&gt;. These types of RAM chips have two independent sets of address and data lines and allow simultaneous access on both sets (with one caveat, explained below).The specific dual-port RAM I went with is the 2KB &lt;a href=&#34;https://www.renesas.com/us/en/document/dst/713242-datasheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IDT7132&lt;/a&gt;. One port is hooked up to the 6502 CPU and the other to the MC6847&amp;ndash;you can see it in the top left:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/computer-with-graphics_hu7fba9da1679ce4a56c592454604cb9c1_388577_954d13f1678cb7beb4ce9e4d08746d9b.webp 400w,
               /post/6502-4/images/computer-with-graphics_hu7fba9da1679ce4a56c592454604cb9c1_388577_096c9de79a8ee448e95789b428a24d33.webp 760w,
               /post/6502-4/images/computer-with-graphics_hu7fba9da1679ce4a56c592454604cb9c1_388577_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/computer-with-graphics_hu7fba9da1679ce4a56c592454604cb9c1_388577_954d13f1678cb7beb4ce9e4d08746d9b.webp&#34;
               width=&#34;626&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The small caveat: simultaneous reads to the same address are fine, but a write can fail if the other port is accessing the same address. In this case, the writing port gets a busy flag. Since only the CPU writes to VRAM, I made the busy flag pause the CPU using its RDY pin until the video chip has moved on to reading another address&amp;ndash;this has worked perfectly, and only rarely pauses the CPU for a few microseconds.&lt;/p&gt;
&lt;p&gt;After hooking up the VRAM and the MC1372 clock to the MC6847, I needed to amplify the video signal being generated by the MC6847. To begin with, I just amplified the luminance signal to get a black and white image. Since I know nothing about analog circuitry, I followed the amplifier schematic in &lt;a href=&#34;https://pmig96.wordpress.com/2020/07/15/mc6847-test-circuit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this blog post&lt;/a&gt;. The result was glorious:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/first-hello_hu7fba9da1679ce4a56c592454604cb9c1_192534_0cd1c0ec656b64a8e58d2e83e178ee53.webp 400w,
               /post/6502-4/images/first-hello_hu7fba9da1679ce4a56c592454604cb9c1_192534_89034364c6a0b8ec626ec220af6faa32.webp 760w,
               /post/6502-4/images/first-hello_hu7fba9da1679ce4a56c592454604cb9c1_192534_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/first-hello_hu7fba9da1679ce4a56c592454604cb9c1_192534_0cd1c0ec656b64a8e58d2e83e178ee53.webp&#34;
               width=&#34;760&#34;
               height=&#34;568&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I have since wired up all of the color mixing circuitry and switched over to the color composite amplifier circuit in the &lt;a href=&#34;MC6847-video.pdf&#34;&gt;MC6847 datasheet&lt;/a&gt;. Here&amp;rsquo;s the text and semigraphics modes in all their 8-color beauty:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/color-character-set_hu7fba9da1679ce4a56c592454604cb9c1_207835_0308461dd7c84b61b00c6059c3c51fac.webp 400w,
               /post/6502-4/images/color-character-set_hu7fba9da1679ce4a56c592454604cb9c1_207835_ec5d45020813fab28582e0ee817a51a1.webp 760w,
               /post/6502-4/images/color-character-set_hu7fba9da1679ce4a56c592454604cb9c1_207835_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/color-character-set_hu7fba9da1679ce4a56c592454604cb9c1_207835_0308461dd7c84b61b00c6059c3c51fac.webp&#34;
               width=&#34;760&#34;
               height=&#34;466&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;After adding some DIP switches to let me switch between graphics modes, I&amp;rsquo;ve also worked on some graphical programs, including a &lt;a href=&#34;https://en.wikipedia.org/wiki/Mandelbrot_set&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mandelbrot Set&lt;/a&gt; visualization (in four-color 64x64 CG1 mode):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/mandelbrot_hu68514cc67a0d29cc6bcfd09ada6567e4_216113_ae364705358c4a860f041e99b69d2559.webp 400w,
               /post/6502-4/images/mandelbrot_hu68514cc67a0d29cc6bcfd09ada6567e4_216113_eff23dd92254512ee7e9f2c449c47d04.webp 760w,
               /post/6502-4/images/mandelbrot_hu68514cc67a0d29cc6bcfd09ada6567e4_216113_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/mandelbrot_hu68514cc67a0d29cc6bcfd09ada6567e4_216113_ae364705358c4a860f041e99b69d2559.webp&#34;
               width=&#34;760&#34;
               height=&#34;501&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;And the game &lt;a href=&#34;https://en.wikipedia.org/wiki/Snake_%28video_game_genre%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Snake&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/snake_hu5d4d4af13a53f9dee6df2227e73445ae_108390_912d104ec083ca03ab25b20b54d016fb.webp 400w,
               /post/6502-4/images/snake_hu5d4d4af13a53f9dee6df2227e73445ae_108390_9e44b15f044cdc31225f71c2a5006b2d.webp 760w,
               /post/6502-4/images/snake_hu5d4d4af13a53f9dee6df2227e73445ae_108390_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/snake_hu5d4d4af13a53f9dee6df2227e73445ae_108390_912d104ec083ca03ab25b20b54d016fb.webp&#34;
               width=&#34;760&#34;
               height=&#34;510&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The most useful program I&amp;rsquo;ve written using the graphics card is a more powerful machine language monitor in text mode:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-4/images/monitor_hu5d4d4af13a53f9dee6df2227e73445ae_103628_cd47cbaf6dc22bce023ffc441a8def6f.webp 400w,
               /post/6502-4/images/monitor_hu5d4d4af13a53f9dee6df2227e73445ae_103628_81bfccaf96b63a303c0ea9d32358e2c0.webp 760w,
               /post/6502-4/images/monitor_hu5d4d4af13a53f9dee6df2227e73445ae_103628_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-4/images/monitor_hu5d4d4af13a53f9dee6df2227e73445ae_103628_cd47cbaf6dc22bce023ffc441a8def6f.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The new and improved monitor even allows loading programs into RAM over a serial port&amp;ndash;more on that in the next post!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;previous-post-part-3hahahugoshortcode19s3hbhb--span-stylefloatrightnext-post--part-5hahahugoshortcode19s4hbhbspan&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-3/&#34;&gt;Part 3&lt;/a&gt;  &lt;span style=&#34;float:right&#34;&gt;Next post:  &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-5/&#34;&gt;Part 5&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 3: Monitor Program</title>
      <link>https://www.kirantomlinson.com/post/6502-3/</link>
      <pubDate>Wed, 14 Sep 2022 17:44:41 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-3/</guid>
      <description>&lt;p&gt;Now that the computer &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-2/&#34;&gt;has a keyboard&lt;/a&gt;, I thought it would be great to be able to write and run code directly on it! To do this, I wrote a very simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Machine_code_monitor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;machine code monitor&lt;/a&gt; (monitor for short). The idea behind a monitor program is to give the user direct read and write access to memory, so you can look at the actual stored bytes of a program (or data). By writing directly in machine code, you can also enter programs into memory, although this is far from a pleasant programming experience. Finally, a monitor should also let you execute code starting from a particular memory address so you can run the code you painstakingly entered.&lt;/p&gt;
&lt;p&gt;One notable historical example is the &lt;a href=&#34;https://www.sbprojects.net/projects/apple1/wozmon.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Woz Monitor&lt;/a&gt; that came with the Apple 1, written by Steve Wozniak. Amazingly, the Woz Monitor uses only 256 bytes of ROM! My monitor, which I&amp;rsquo;m calling LCDMon (since it is designed for the computer&amp;rsquo;s 2-row character LCD), takes almost 1KB due to more CPU-intensive keyboard and display I/O (and my lack of assembly expertise).&lt;/p&gt;
&lt;p&gt;LCDMon supports four operations: (1) read one byte, (2) read eight bytes, (3) write bytes, and (4) run. All commands are typed on row 1 of the LCD, while outputs from the last command are displayed on row 2. To read one byte, you simply type in the hex address to read from (&lt;code&gt;0000&lt;/code&gt;-&lt;code&gt;ffff&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/read-cmd_hud5bd769e2b7979219a2843df8fc07439_414978_d6884ece55ccae19bc164f439eaed27a.webp 400w,
               /post/6502-3/images/read-cmd_hud5bd769e2b7979219a2843df8fc07439_414978_54c398a46acb3c9a5b361cc598dce8f0.webp 760w,
               /post/6502-3/images/read-cmd_hud5bd769e2b7979219a2843df8fc07439_414978_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/read-cmd_hud5bd769e2b7979219a2843df8fc07439_414978_d6884ece55ccae19bc164f439eaed27a.webp&#34;
               width=&#34;760&#34;
               height=&#34;460&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;To read eight bytes, you follow the starting address with a hyphen (page down on the keyboard scrolls the LCD to the the rest of the eight bytes):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/read-multiple_huf436de0f34605f8b1c3bcc4022ae7ef6_362601_8224954d7d81c47104bdd6bbe01bed4c.webp 400w,
               /post/6502-3/images/read-multiple_huf436de0f34605f8b1c3bcc4022ae7ef6_362601_a29a934f83e1a652fe2c20bb8a93eb09.webp 760w,
               /post/6502-3/images/read-multiple_huf436de0f34605f8b1c3bcc4022ae7ef6_362601_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/read-multiple_huf436de0f34605f8b1c3bcc4022ae7ef6_362601_8224954d7d81c47104bdd6bbe01bed4c.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The address &lt;code&gt;8000&lt;/code&gt; is the beginning of ROM, where I&amp;rsquo;ve placed a jump table: &lt;code&gt;4c&lt;/code&gt; is the jump opcode, and the first entry of the table jumps to address &lt;code&gt;8013&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Endianness&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;little-endian&lt;/a&gt;, so the &lt;code&gt;13&lt;/code&gt; comes first). Reading works!&lt;/p&gt;
&lt;p&gt;To write bytes starting at an address, you write the address followed by a semicolon and then the bytes to write. To run code starting an an address, you follow the address with an &lt;code&gt;R&lt;/code&gt;. To give you a sense of how this works under the hood, here&amp;rsquo;s a small snippet of LCDMon that handles writing entered data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;write_byte:                       ; write data to MON_ADDR, starting with the byte at
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                  ; TEXT_BUFFER+y+1 (TEXT_BUFFER+y is ;). x initialized to 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  iny
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  lda TEXT_BUFFER,y               ; load the next char into A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  beq enter_reset                 ; if it&amp;#39;s null, done writing
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  cmp #&amp;#34; &amp;#34;                        ; check if it&amp;#39;s space
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  beq write_byte                  ; if it is, consume it and move on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  jsr parse_hex_byte              ; otherwise, parse the next byte, incrementing y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sta (MON_ADDR,x)                ; write the byte where mon addr is pointing (x is 0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  inc MON_ADDR                    ; increment address to write to
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  bne write_byte                  ; check if 0 after incrementing (if 0, need to carry)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  inc MON_ADDR+1                  ; if MON_ADDR became 0 after inc, need to carry to hi byte
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  jmp write_byte                  ; loop to write next byte
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The full source code of LCDMon is available here: &lt;a href=&#34;lcd_mon.s&#34;&gt;lcd_mon.s&lt;/a&gt;. To test if LCDMon was working, I used the table of &lt;a href=&#34;https://www.masswerk.at/6502/6502_instruction_set.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6502 opcodes&lt;/a&gt; to write a program at address &lt;code&gt;1000&lt;/code&gt; that would fill the LCD with dollar signs (ASCII hex &lt;code&gt;0x24&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a9 24       lda #$24        ; load the ASCII code for a dollar sign into the A register
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;20 03 80    jsr write_lcd   ; jump to a subroutine in ROM to print A register contents
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4c 00 10    jmp $1000       ; loop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The whole program is just 8 bytes long!  Here&amp;rsquo;s what writing this code looks like (notice I previously displayed the contexts at &lt;code&gt;1000&lt;/code&gt;, which is just garbage in RAM):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/write-code_hu6908e86830f41c49a7c3240b050ba292_368386_8c6894df6499c1c9287b5592670e1867.webp 400w,
               /post/6502-3/images/write-code_hu6908e86830f41c49a7c3240b050ba292_368386_e6f4be6eb37815cb6f7bc4666150089c.webp 760w,
               /post/6502-3/images/write-code_hu6908e86830f41c49a7c3240b050ba292_368386_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/write-code_hu6908e86830f41c49a7c3240b050ba292_368386_8c6894df6499c1c9287b5592670e1867.webp&#34;
               width=&#34;760&#34;
               height=&#34;434&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/write-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_371981_6205c8980c51a415bd86cd0d84d26246.webp 400w,
               /post/6502-3/images/write-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_371981_a729aa5f65c8f0e4e8dded542b865526.webp 760w,
               /post/6502-3/images/write-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_371981_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/write-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_371981_6205c8980c51a415bd86cd0d84d26246.webp&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can check that the program was written successfully by running &lt;code&gt;1000-&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/read-code_hu535661bce2c742bf7a0f6a055ac0b6d1_340757_9a8a704b6b3f8c934d213f812f8a3d83.webp 400w,
               /post/6502-3/images/read-code_hu535661bce2c742bf7a0f6a055ac0b6d1_340757_8688fe76e35d4cfd86fd8defc9fe6ddc.webp 760w,
               /post/6502-3/images/read-code_hu535661bce2c742bf7a0f6a055ac0b6d1_340757_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/read-code_hu535661bce2c742bf7a0f6a055ac0b6d1_340757_9a8a704b6b3f8c934d213f812f8a3d83.webp&#34;
               width=&#34;760&#34;
               height=&#34;388&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;And finally run it:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/run-code_hu535661bce2c742bf7a0f6a055ac0b6d1_345175_f2eec6120e2948e6f32dfe849bbcfbf0.webp 400w,
               /post/6502-3/images/run-code_hu535661bce2c742bf7a0f6a055ac0b6d1_345175_78aeb457596e5ccab5a8c3f81365cb5e.webp 760w,
               /post/6502-3/images/run-code_hu535661bce2c742bf7a0f6a055ac0b6d1_345175_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/run-code_hu535661bce2c742bf7a0f6a055ac0b6d1_345175_f2eec6120e2948e6f32dfe849bbcfbf0.webp&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-3/images/run-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_346253_cd693a2b9cf851278587b0ed9cacd144.webp 400w,
               /post/6502-3/images/run-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_346253_2cc0514c92fb0c907742e199b93f057e.webp 760w,
               /post/6502-3/images/run-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_346253_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-3/images/run-code-2_hu535661bce2c742bf7a0f6a055ac0b6d1_346253_cd693a2b9cf851278587b0ed9cacd144.webp&#34;
               width=&#34;760&#34;
               height=&#34;409&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Woooo! In theory, any code could be entered by hand like this, but in practice it&amp;rsquo;s extremely tedious and prone to errors. Since writing LCDMon, I&amp;rsquo;ve been working on a number of hardware upgrades, most notably a graphics card! More on that soon.&lt;/p&gt;
&lt;h3 id=&#34;previous-post-part-2hahahugoshortcode18s1hbhb-span-stylefloatrightnext-post-part-4hahahugoshortcode18s2hbhbspan&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-2/&#34;&gt;Part 2&lt;/a&gt; &lt;span style=&#34;float:right&#34;&gt;Next post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-2/&#34;&gt;Part 4&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 2: Keyboard Input</title>
      <link>https://www.kirantomlinson.com/post/6502-2/</link>
      <pubDate>Wed, 31 Aug 2022 17:04:57 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-2/</guid>
      <description>&lt;p&gt;Since posting &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-1/&#34;&gt;Part 1&lt;/a&gt; of my 6502 build, I&amp;rsquo;ve gotten a keyboard hooked up! I&amp;rsquo;m using an old-school &lt;a href=&#34;https://wiki.osdev.org/PS/2_Keyboard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PS/2 keyboard&lt;/a&gt;, a connector and keyboard protocol which originated with the &lt;a href=&#34;https://en.wikipedia.org/wiki/IBM_PS/2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM Personal System/2&lt;/a&gt; in 1987 and was still in use through the 2000s, although USB has largely replaced it. One great thing about PS/2 is that the protocol is very simple and easy to manually interface with (USB would require considerably more work, but &lt;a href=&#34;http://6502.org/users/andre/hwinfo/usb/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is feasible&lt;/a&gt;). Ben Eater has &lt;a href=&#34;https://youtu.be/7aXbh9VUB3U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;three&lt;/a&gt; &lt;a href=&#34;https://youtu.be/w1SB9Ry8_Jg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;great&lt;/a&gt; &lt;a href=&#34;https://youtu.be/dL0GO9SeBh0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;videos&lt;/a&gt; on the PS/2 protocol and hooking up a PS/2 keyboard to a 6502 through the &lt;a href=&#34;https://en.wikipedia.org/wiki/WDC_65C22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;65C22 Versatile Interface Adapter&lt;/a&gt; (VIA).&lt;/p&gt;
&lt;p&gt;The specific keyboard I&amp;rsquo;m using is a &lt;a href=&#34;https://deskthority.net/wiki/Dell_QuietKey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dell QuietKey SK-1000REW&lt;/a&gt; from 1997, but it doesn&amp;rsquo;t really matter. The PS/2 connector just uses four pins: ground, 5V, clock, and data. Data is sent from the keyboard in 11-bit packets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 start bit (always 0)&lt;/li&gt;
&lt;li&gt;8 data bits (least significant first)&lt;/li&gt;
&lt;li&gt;1 parity bit&lt;/li&gt;
&lt;li&gt;1 stop bit (always 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For simplicity, I&amp;rsquo;m ignoring the parity bit and only looking at the 8 data bits. Bits are sent on the falling edge of the clock, which is usually held high. The keyboard can also receive commands, but I&amp;rsquo;m not worrying about that either.&lt;/p&gt;
&lt;p&gt;I hooked up the clock and data to two chained 8-bit shift registers (I used the &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/sn74hc164.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;74HC164&lt;/a&gt; instead of the &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/sn74hc595.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;74HC595&lt;/a&gt; Ben used). The clock signal has to be inverted to feed into the shift registers. Luckily, I had three leftover inverters in the address control logic! The other two also came in handy for Ben&amp;rsquo;s interrupt generating circuit:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-2/images/ca1-circuit_hu1c7188934c83355c0feb8ffe7eb84fc4_129434_f7d6b1f23b6afe093016d2d0cb20da3f.webp 400w,
               /post/6502-2/images/ca1-circuit_hu1c7188934c83355c0feb8ffe7eb84fc4_129434_f582833dfba43c6aadc71da5393d0a78.webp 760w,
               /post/6502-2/images/ca1-circuit_hu1c7188934c83355c0feb8ffe7eb84fc4_129434_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-2/images/ca1-circuit_hu1c7188934c83355c0feb8ffe7eb84fc4_129434_f7d6b1f23b6afe093016d2d0cb20da3f.webp&#34;
               width=&#34;760&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The idea behind this circuit is to generate a single rising edge for each data packet using an &lt;a href=&#34;https://web.pa.msu.edu/courses/2000fall/phy232/lectures/rccircuits/rc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RC circuit&lt;/a&gt; with fast charge. The clock low pulses charge up the capacitor through the diode (after being inverted to high pulses), but the capacitor discharges slowly through the resistor. The values of the resistor and capacitor are just right to keep the output high during the clock pulses and then go low a bit after the packet ends. Conveniently, the &lt;a href=&#34;https://www.ti.com/lit/ds/symlink/sn74hc14.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;74HC14&lt;/a&gt; has  &lt;a href=&#34;https://en.wikipedia.org/wiki/Schmitt_trigger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Schmitt trigger&lt;/a&gt; inputs that convert the analog discharge of the capacitor into a clean digital edge. This is then fed into the CA1 line of the VIA, which is configured to trigger an interrupt, alerting the CPU that a key has been pressed! Here&amp;rsquo;s what the circuit looks like on the breadboard, highlighted:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-2/images/keyboard-circuit_hu10cf73591b92b289fa0a641234892be5_1924587_1a557f5ed52051d8ecf3a505608aba36.webp 400w,
               /post/6502-2/images/keyboard-circuit_hu10cf73591b92b289fa0a641234892be5_1924587_12166965ec7f3e1a0133f808441b3d0b.webp 760w,
               /post/6502-2/images/keyboard-circuit_hu10cf73591b92b289fa0a641234892be5_1924587_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-2/images/keyboard-circuit_hu10cf73591b92b289fa0a641234892be5_1924587_1a557f5ed52051d8ecf3a505608aba36.webp&#34;
               width=&#34;760&#34;
               height=&#34;656&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The keyboard clock line is in green, with the keyboard data line in white. Notice my very weird looking 33k resistor&amp;ndash;I didn&amp;rsquo;t have one, so I soldered three 100k resistors in parallel to a 2-prong header! I have some 33k resistors on the way to replace this monstrosity, but it&amp;rsquo;s worked great. In this picture, the data output from the shift registers is being ignored. I was just counting interrupts, and the three on the LCD screen shows it worked! Most full keypresses generate three data packets: the key&amp;rsquo;s scan code, then the release scan code, and then the released key&amp;rsquo;s scan code (the scan code table can be found &lt;a href=&#34;https://webdocs.cs.ualberta.ca/~amaral/courses/329/labs/scancodes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;). Next, I connected the data lines to Port A of the VIA and printed out all of the scancodes received, after mapping them to ASCII using the table &lt;a href=&#34;https://eater.net/downloads/keyboard.s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;provided by Ben&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-2/images/hello_hu9f13d6efe6a6c439d7265cb940c65250_2981941_e0ff25ca680142b3a9f0bd371d4646ea.webp 400w,
               /post/6502-2/images/hello_hu9f13d6efe6a6c439d7265cb940c65250_2981941_4eaf65dbc067ad65cba44419b3f53a52.webp 760w,
               /post/6502-2/images/hello_hu9f13d6efe6a6c439d7265cb940c65250_2981941_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-2/images/hello_hu9f13d6efe6a6c439d7265cb940c65250_2981941_e0ff25ca680142b3a9f0bd371d4646ea.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Notice the three codes generated by each keypress, e.g., key &lt;code&gt;h&lt;/code&gt;, release &lt;code&gt;?&lt;/code&gt;, key &lt;code&gt;h&lt;/code&gt;. It was then fairly easy to store a few flags indicating whether the shift keys were down and whether the last byte received was a release code. I also added handling of a few special keys like enter, arrows keys, and backspace to move the cursor around. Very pleased with the final product:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-2/images/working_hu37e160e35721f7cf2cae3078d909ec43_1651597_84fbfad5f73aed201197ede5d16b7cff.webp 400w,
               /post/6502-2/images/working_hu37e160e35721f7cf2cae3078d909ec43_1651597_396fdfb018610c61fdf77cbeb82e93f2.webp 760w,
               /post/6502-2/images/working_hu37e160e35721f7cf2cae3078d909ec43_1651597_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-2/images/working_hu37e160e35721f7cf2cae3078d909ec43_1651597_84fbfad5f73aed201197ede5d16b7cff.webp&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my 6502 assembly for typing on the LCD, which also includes some subroutines for displaying numbers in hex and in decimal: &lt;a href=&#34;lcd_type.s&#34;&gt;lcd_type.s&lt;/a&gt;. I&amp;rsquo;m currently working on a rudimentary monitor program inspired by the &lt;a href=&#34;https://www.sbprojects.net/projects/apple1/wozmon.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Woz Monitor&lt;/a&gt; that came with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Apple_I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple I&lt;/a&gt;&amp;ndash;more on that in a future post!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;previous-post-part-1hahahugoshortcode17s1hbhb-span-stylefloatrightnext-post-part-3hahahugoshortcode17s2hbhbspan&#34;&gt;Previous post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-1/&#34;&gt;Part 1&lt;/a&gt; &lt;span style=&#34;float:right&#34;&gt;Next post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-3/&#34;&gt;Part 3&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Building a 6502 Computer, Part 1: Origins of the KiT 1</title>
      <link>https://www.kirantomlinson.com/post/6502-1/</link>
      <pubDate>Sat, 27 Aug 2022 16:49:24 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/6502-1/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been watching a lot of &lt;a href=&#34;https://www.youtube.com/c/BenEater&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ben Eater&amp;rsquo;s&lt;/a&gt; videos on electronics and computer architecture lately&amp;ndash;I&amp;rsquo;d highly recommend them. I was inspired to try building his &lt;a href=&#34;https://eater.net/6502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6502-based breadboard computer&lt;/a&gt;. This will be the first of a series of posts where I go over my design choices and track my progress with the build. Here&amp;rsquo;s what Ben&amp;rsquo;s version looks like on the left, with mine in its current state on the right:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/6502-1/images/6502-be-kt_hudd8c3231d0f6e9ffeff24f2ea178606a_178625_25ace787948b066c4bb71ef966810d6f.webp 400w,
               /post/6502-1/images/6502-be-kt_hudd8c3231d0f6e9ffeff24f2ea178606a_178625_95a2be5224bf7abe6e1157bd835e262f.webp 760w,
               /post/6502-1/images/6502-be-kt_hudd8c3231d0f6e9ffeff24f2ea178606a_178625_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/6502-1/images/6502-be-kt_hudd8c3231d0f6e9ffeff24f2ea178606a_178625_25ace787948b066c4bb71ef966810d6f.webp&#34;
               width=&#34;760&#34;
               height=&#34;370&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For a bit of background, the &lt;a href=&#34;https://en.wikipedia.org/wiki/MOS_Technology_6502&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6502&lt;/a&gt; is an 8-bit microprocessor that saw use in a huge number of computers and game consoles in the late &amp;rsquo;70s and early &amp;rsquo;80s: the Apple II, NES, BBC Micro, Commodore 64, and Atari 2600 all used the 6502! Technically, the version Ben Eater used is the &lt;a href=&#34;https://www.westerndesigncenter.com/wdc/w65c02s-chip.php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W65C02S&lt;/a&gt; (or 65C02, for short), an updated version that&amp;rsquo;s still in production. The 65C02 can run higher clock speeds, uses less power, supports some additional instructions, and is fully static. I&amp;rsquo;ll just call it a 6502, since it&amp;rsquo;s very similar in spirit to the original and has (almost) the same opcodes and pinout.&lt;/p&gt;
&lt;p&gt;The 6502 has a 16-bit address space (&lt;code&gt;0000&lt;/code&gt; to &lt;code&gt;ffff&lt;/code&gt; in hex), allowing it to natively address 64KB of memory. Ben&amp;rsquo;s design has 16KB of RAM, 32KB of programmable ROM, and uses the remaining address space for the &lt;a href=&#34;https://en.wikipedia.org/wiki/WDC_65C22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;65C22 Versatile Interface Adapter&lt;/a&gt; (VIA), which is used for input and output devices. In his build above, the VIA is used to output to the LCD and take input from the pushbuttons below (mine is only hooked up to the LCD for now). He used a 1 MHz clock, but I think it should be possible to push it up to 3 MHz and maybe even higher (although this might require some upgrades).&lt;/p&gt;
&lt;p&gt;I got Ben&amp;rsquo;s &lt;a href=&#34;https://eater.net/shop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kit&lt;/a&gt;, but wanted to make a few changes. My goal is to eventually connect a keyboard and monitor to the computer, and maybe even write a basic operating system and text editor for it. The first thing I changed was the memory map. Ben&amp;rsquo;s used the following memory map, which has the advantage of extremely simple address decode logic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0000-3fff: RAM (16KB)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4000-5fff: unused
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6000-600f: VIA (2B)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;6010-7fff: unused
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;8000-ffff: ROM (32KB)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wanted to expand the RAM and also add in 2KB of video RAM that could eventually be used for a simple graphics card. I settled on the following memory map:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;0000-6fff: RAM (28KB)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;7000-77ff: VRAM (2KB)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;7800-780f: VIA (2B)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;7810-7fff: unused
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;8000-ffff: ROM (32KB)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The unused space could eventually be used for extra I/O devices (additional VIAs or maybe a &lt;a href=&#34;https://en.wikipedia.org/wiki/WDC_65C51&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;65C51 ACIA&lt;/a&gt;) if the need arises&amp;ndash;but I think this setup will be enough for keyboard input, VGA output to a monitor, and LCD output. The price I paid for the more complex memory map was more complex address decode logic, although I tried to keep it as simple as possible. I found the following configuration, where there are no more than two gates between an input and a chip select signal:&lt;/p&gt;
&lt;img src=&#34;images/addr-decode.png&#34; width=&#34;250&#34;&gt;
&lt;p&gt;Keeping the depth small minimizes the amount of delay between an address change and a chip select, which is especially important for the RAM, which is only enabled when the clock (&lt;code&gt;phi2&lt;/code&gt;) is high. Note that all of the chip select signals are active low, denoted by &lt;code&gt;!&lt;/code&gt;. Here&amp;rsquo;s a labeled picture of the computer above with the address decode logic highlighted:&lt;/p&gt;
&lt;img src=&#34;images/labeled-6502.jpg&#34; width=&#34;400&#34;&gt;
&lt;p&gt;Since I don&amp;rsquo;t yet have the VRAM set up, the 8-input NAND is unused. I had actually ordered a 3-input OR chip for the VIA control line, but realized I could implement OR with &lt;a href=&#34;https://en.wikipedia.org/wiki/Diode_logic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;diodes&lt;/a&gt; instead to save some space. The two chips next to the clock on the bottom breadboard are shift registers that I plan to use for the keyboard input&amp;ndash;more on that in a later post. I also made some minor layout changes compared to Ben&amp;rsquo;s build: swapping the RAM and the ROM to make the ROM easier to access for programming, and moving the LCD to the bottom board to make room for the larger address decode logic. In order to support both the LCD and keyboard input, I also decided to use the LCD&amp;rsquo;s 4-bit mode instead of the 8-bit mode Ben used, using only 7 I/O lines in total for the LCD. The keyboard input only needs 8 bits, so it should just about work with one VIA!&lt;/p&gt;
&lt;p&gt;During the build, I used a &lt;a href=&#34;https://eater.net/8bit/clock&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slower clock&lt;/a&gt; that could be stopped and single-stepped. In his videos, Ben used an Arduino to monitor the address and data bus for debugging and verification. Since I didn&amp;rsquo;t get an Arduino, I just used a board of LEDs. Here&amp;rsquo;s an in-progress picture with the debug clock, LEDs, and a mess of jumper wires:&lt;/p&gt;
&lt;img src=&#34;images/debug.jpg&#34; width=&#34;400&#34;&gt;
&lt;p&gt;The project has been a ton of fun and I can&amp;rsquo;t wait to see how far it will go! In the next posts, I&amp;rsquo;ll write more about my plans for the VGA display, the keyboard input, and the (very basic) software I&amp;rsquo;ve written. If you want some additional sources for building a 6502-based computer, I found Garth Wilson&amp;rsquo;s &lt;a href=&#34;http://wilsonminesco.com/6502primer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6502 Primer&lt;/a&gt; a very useful resource in addition to Ben&amp;rsquo;s videos.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: the computer needed a name (calling it &amp;ldquo;the breadboard computer&amp;rdquo; or &amp;ldquo;my 6502-based computer&amp;rdquo; got tiring). I ended up settling on the name KiT, since it all started with Bean Eater&amp;rsquo;s kit and because I like putting my name on things. Since developing a new and improved version, this original breadboard version is retroactively the KiT 1, hence the updated title. It also has a nice parallel to the &lt;a href=&#34;https://en.wikipedia.org/wiki/KIM-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KIM-1&lt;/a&gt;, a 6502 computer from 1976.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;next-post-part-2hahahugoshortcode16s0hbhb&#34;&gt;Next post: &lt;a href=&#34;https://www.kirantomlinson.com/post/6502-2/&#34;&gt;Part 2&lt;/a&gt;&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Electric Guitar Build</title>
      <link>https://www.kirantomlinson.com/post/guitar-build/</link>
      <pubDate>Wed, 14 Apr 2021 13:18:26 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/guitar-build/</guid>
      <description>&lt;p&gt;I recently assembled a &lt;a href=&#34;https://www.thomannmusic.com/harley_benton_eguitar_kit.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stratocaster-style Harley Benton electric guitar kit&lt;/a&gt;, which included a few tricky things I had never done (staining and finishing wood, using a jigsaw). I think it turned out pretty great, despite a couple hiccups along the way.&lt;/p&gt;
&lt;h2 id=&#34;the-kit&#34;&gt;The kit&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/1-kit_hu4adf97d45966d3e91f02a9b264551869_183057_7900cd0763654a0df7c6608d2ddf503e.webp 400w,
               /post/guitar-build/images/1-kit_hu4adf97d45966d3e91f02a9b264551869_183057_e11710c19d9ed909efce98498c27d07e.webp 760w,
               /post/guitar-build/images/1-kit_hu4adf97d45966d3e91f02a9b264551869_183057_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/1-kit_hu4adf97d45966d3e91f02a9b264551869_183057_7900cd0763654a0df7c6608d2ddf503e.webp&#34;
               width=&#34;760&#34;
               height=&#34;565&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

The electronics come assembled and fitted into the pickguard, but the body is unfinished and the headstock is quite blocky. The body I got had pretty rough routing marks in the cavities, so step one was sanding it as smooth as I could.&lt;/p&gt;
&lt;h2 id=&#34;safety&#34;&gt;Safety&lt;/h2&gt;
&lt;p&gt;Stains, finishes, and sawdust can be pretty bad for your lungs, so I did the build outdoors with a dust mask to filter out wood particles. I also used safety glasses while sawing and drilling.&lt;/p&gt;
&lt;h2 id=&#34;staining-and-finishing-the-body&#34;&gt;Staining and finishing the body&lt;/h2&gt;
&lt;p&gt;I picked out some &lt;a href=&#34;https://www.lowes.com/pd/Minwax-Wood-Finish-Espresso-Oil-Based-Interior-Stain-Actual-Net-Contents-32-fl-oz/999913881&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minwax Espresso&lt;/a&gt; stain at Lowe&amp;rsquo;s to get a nice dark color on the body. I started out staining the back of the guitar to make sure it looked okay. To apply the stain, I first wiped on some &lt;a href=&#34;https://www.lowes.com/pd/Minwax-32-fl-oz-Wood-Conditioner/999913699&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pre-stain conditioner&lt;/a&gt; with a rag and then wiped on stain. As soon as I stained the back, I noticed that I had left a lot of scratches from sanding (visible in later pics), so I spent longer smoothing out the front once the back stain had dried. Here&amp;rsquo;s what the front looked like after staining:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/2-stain_hu1b67cdd78ad3f65a422eb9cfd8425c88_664666_fa0423bffa300a1dfcf98d35c17d52e4.webp 400w,
               /post/guitar-build/images/2-stain_hu1b67cdd78ad3f65a422eb9cfd8425c88_664666_0d81f3cea9f99d5da342268ec042e973.webp 760w,
               /post/guitar-build/images/2-stain_hu1b67cdd78ad3f65a422eb9cfd8425c88_664666_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/2-stain_hu1b67cdd78ad3f65a422eb9cfd8425c88_664666_fa0423bffa300a1dfcf98d35c17d52e4.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

A few scratches, but I was happy with the color overall. Next, I applied three coats of &lt;a href=&#34;https://www.lowes.com/pd/Zinsser-Bulls-Eye-Clear-Shellac-Actual-Net-Contents-32-fl-oz/3449840&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shellac&lt;/a&gt; with a paintbrush, waiting an hour between coats and sanding the two base coats with 220-grit. Here&amp;rsquo;s the guitar drying after one of the coats:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/3-shellac_huf05cc9136357b627b352932b4883f8f8_473886_7dfe40461ff0da00cd2e83e82e6ae9ed.webp 400w,
               /post/guitar-build/images/3-shellac_huf05cc9136357b627b352932b4883f8f8_473886_a654b94cb92e1eafd5d141d77a532a5e.webp 760w,
               /post/guitar-build/images/3-shellac_huf05cc9136357b627b352932b4883f8f8_473886_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/3-shellac_huf05cc9136357b627b352932b4883f8f8_473886_7dfe40461ff0da00cd2e83e82e6ae9ed.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Once the final coat dried thoroughly, I buffed it with some fine 0000 steel wool, which gave it a nice satin finish:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/4-buff_hudeda3a1a2b34b72fb23ac0ab934efc06_616585_59764648246ff2fcea283baa836f25c5.webp 400w,
               /post/guitar-build/images/4-buff_hudeda3a1a2b34b72fb23ac0ab934efc06_616585_5c9772c6f8235144bfb254efd43b043f.webp 760w,
               /post/guitar-build/images/4-buff_hudeda3a1a2b34b72fb23ac0ab934efc06_616585_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/4-buff_hudeda3a1a2b34b72fb23ac0ab934efc06_616585_59764648246ff2fcea283baa836f25c5.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

I think the shellac I got was quite old, since it ended up having a bit of a varnish-y smell. I&amp;rsquo;d probably try using a spray-on lacquer if I did this again.&lt;/p&gt;
&lt;h2 id=&#34;shaping-the-headstock&#34;&gt;Shaping the headstock&lt;/h2&gt;
&lt;p&gt;I printed out a headstock template I liked (from a &lt;a href=&#34;https://www.electricherald.com/gibson-firebird-studio-guitar-template/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gibson Firebird&lt;/a&gt;&amp;ndash;a little narrower than the traditional &lt;a href=&#34;https://www.electricherald.com/fender-stratocaster-templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fender Stratocaster&lt;/a&gt; headstock). I bought a &lt;a href=&#34;https://www.harborfreight.com/power-tools/power-saws/jig-saws/5-amp-tool-free-variable-speed-orbital-jig-saw-69582.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheap jigsaw&lt;/a&gt; and (after reading the manual and watching several instructional videos about safe jigsaw use) started carving out the shape:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/5-headstock_hu993c9efecad1fdc9444dd5867101d753_375121_8fb3f719bfa15e9bb4a7b08b77f9232f.webp 400w,
               /post/guitar-build/images/5-headstock_hu993c9efecad1fdc9444dd5867101d753_375121_eccd5002077cbffd4fa82778fe23766e.webp 760w,
               /post/guitar-build/images/5-headstock_hu993c9efecad1fdc9444dd5867101d753_375121_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/5-headstock_hu993c9efecad1fdc9444dd5867101d753_375121_8fb3f719bfa15e9bb4a7b08b77f9232f.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Because of the base of the jigsaw and the guitar neck, I couldn&amp;rsquo;t quite reach the line I wanted, which resulted in making several jagged cuts:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/6-headstock_huf2bd67884e9f41e3441a040a96531c6a_363088_540bdf1a1e12c3d61c470fd3d3a46fbd.webp 400w,
               /post/guitar-build/images/6-headstock_huf2bd67884e9f41e3441a040a96531c6a_363088_229e42ab5582253225d7b2b256851b32.webp 760w,
               /post/guitar-build/images/6-headstock_huf2bd67884e9f41e3441a040a96531c6a_363088_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/6-headstock_huf2bd67884e9f41e3441a040a96531c6a_363088_540bdf1a1e12c3d61c470fd3d3a46fbd.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

If I had been thinking, I would have turned the neck over and done the cut on the reverse side&amp;hellip; Oh well. Nothing a heavy dose of sanding couldn&amp;rsquo;t fix:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/8-headstock_huedd2f752531aa43d80e2d17786cede00_348091_30b1469dedb56ec8e7a43502cb7f9408.webp 400w,
               /post/guitar-build/images/8-headstock_huedd2f752531aa43d80e2d17786cede00_348091_899ceaa3e9fa293bf5d6b7738f9df83a.webp 760w,
               /post/guitar-build/images/8-headstock_huedd2f752531aa43d80e2d17786cede00_348091_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/8-headstock_huedd2f752531aa43d80e2d17786cede00_348091_30b1469dedb56ec8e7a43502cb7f9408.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Very happy with the final headstock shape!&lt;/p&gt;
&lt;h2 id=&#34;tuners-bridge-and-tremolo-springs&#34;&gt;Tuners, bridge, and tremolo springs&lt;/h2&gt;
&lt;p&gt;Installing the tuners was straightforward&amp;ndash;just some screws and nuts:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/9-tuners_hu91010b2d0584a3b94ef0d8a9974a8709_572069_8c8e00332e2156581dcc5f63c406f468.webp 400w,
               /post/guitar-build/images/9-tuners_hu91010b2d0584a3b94ef0d8a9974a8709_572069_a3d0b24b5098c2cdc74e9f6e30934ff7.webp 760w,
               /post/guitar-build/images/9-tuners_hu91010b2d0584a3b94ef0d8a9974a8709_572069_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/9-tuners_hu91010b2d0584a3b94ef0d8a9974a8709_572069_8c8e00332e2156581dcc5f63c406f468.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

The bridge mounting holes were very unevenly drilled into the body, so I had to expand two of the holes with a drill:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/10-bridge_hueba8ce44d8907618be2686bbb79a328b_344517_5730f2511c6a6e76b8cb2528b7df9ea4.webp 400w,
               /post/guitar-build/images/10-bridge_hueba8ce44d8907618be2686bbb79a328b_344517_733d39143d0f373530601fbfdb571ac4.webp 760w,
               /post/guitar-build/images/10-bridge_hueba8ce44d8907618be2686bbb79a328b_344517_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/10-bridge_hueba8ce44d8907618be2686bbb79a328b_344517_5730f2511c6a6e76b8cb2528b7df9ea4.webp&#34;
               width=&#34;516&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Next, I installed the spring claw and attached the springs to the bridge (notice my horrendous sanding 😅 let&amp;rsquo;s call it part of the home-built aesthetic):
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/14-springs_hu17530e00aeb86b5fb329d799075f6212_537536_c1b467ab5783178991a51414d7e77369.webp 400w,
               /post/guitar-build/images/14-springs_hu17530e00aeb86b5fb329d799075f6212_537536_8d5a0e48332b3318c051e6ead0f3b50f.webp 760w,
               /post/guitar-build/images/14-springs_hu17530e00aeb86b5fb329d799075f6212_537536_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/14-springs_hu17530e00aeb86b5fb329d799075f6212_537536_c1b467ab5783178991a51414d7e77369.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

The hooks on the springs were quite roughly cut and initially didn&amp;rsquo;t fit into the holes in the sustain block, so I had to file them down. Not a big issue.&lt;/p&gt;
&lt;h2 id=&#34;electronics&#34;&gt;Electronics&lt;/h2&gt;
&lt;p&gt;Next, I attached the pickguard (with pre-installed pickups, volume/tone knobs, and switch):
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/15-pickguard_hu3dcfbc179e0e374e69dd66ae7f359d3d_446798_ce3b0b8202d32d704efe1943293baa79.webp 400w,
               /post/guitar-build/images/15-pickguard_hu3dcfbc179e0e374e69dd66ae7f359d3d_446798_b7b8b5d2815c80346e8e71a8f3f31b76.webp 760w,
               /post/guitar-build/images/15-pickguard_hu3dcfbc179e0e374e69dd66ae7f359d3d_446798_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/15-pickguard_hu3dcfbc179e0e374e69dd66ae7f359d3d_446798_ce3b0b8202d32d704efe1943293baa79.webp&#34;
               width=&#34;590&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

and then soldered the ground wire to the claw:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/17-solder_hu8cf72b462fd35ae8a8f67431c371bc23_790125_1389562753607e01b5221acc5cbb3767.webp 400w,
               /post/guitar-build/images/17-solder_hu8cf72b462fd35ae8a8f67431c371bc23_790125_869f5b1d406a86a4b4cebef4ae1cd2f9.webp 760w,
               /post/guitar-build/images/17-solder_hu8cf72b462fd35ae8a8f67431c371bc23_790125_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/17-solder_hu8cf72b462fd35ae8a8f67431c371bc23_790125_1389562753607e01b5221acc5cbb3767.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

Not my finest soldering work, but the claw sucked up a ton of heat, making it hard to get the solder to bind. I also screwed in the jack at this point, which plugged in easily to the electronics.&lt;/p&gt;
&lt;h2 id=&#34;neck-and-backplate&#34;&gt;Neck and backplate&lt;/h2&gt;
&lt;p&gt;Screwing on the neck and was backplate was straightforward:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/19-neck-back_hu93a8f63dfd01b4b1ba6f0018af9236db_323394_8a87df00d3cc11cb69ee0c0c302bb58b.webp 400w,
               /post/guitar-build/images/19-neck-back_hu93a8f63dfd01b4b1ba6f0018af9236db_323394_54a17a8643d63c3742f5f311f92548e8.webp 760w,
               /post/guitar-build/images/19-neck-back_hu93a8f63dfd01b4b1ba6f0018af9236db_323394_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/19-neck-back_hu93a8f63dfd01b4b1ba6f0018af9236db_323394_8a87df00d3cc11cb69ee0c0c302bb58b.webp&#34;
               width=&#34;760&#34;
               height=&#34;320&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s starting to look like a guitar!&lt;/p&gt;
&lt;h2 id=&#34;installing-strings&#34;&gt;Installing strings&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/20-strings_hu1c8bcf1294b9ecf1391c7e67758fe88e_426412_4ec47d268fbafeb9ba7236a6120ebc04.webp 400w,
               /post/guitar-build/images/20-strings_hu1c8bcf1294b9ecf1391c7e67758fe88e_426412_fff542c9352b639a000360208a914c66.webp 760w,
               /post/guitar-build/images/20-strings_hu1c8bcf1294b9ecf1391c7e67758fe88e_426412_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/20-strings_hu1c8bcf1294b9ecf1391c7e67758fe88e_426412_4ec47d268fbafeb9ba7236a6120ebc04.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

At this point, I was very excited to test it out. Unfortunately, I realized when trying to install the strings that one of the tuning machines was defective and didn&amp;rsquo;t turn at all. I popped over to my great &lt;a href=&#34;https://www.guitarworks.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;local guitar store&lt;/a&gt; and they found a matching tuner!&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/21-tuner_hubf9f92e06294c96c0d13954f7273ac70_313069_416c833e179dab1f69795016f89af831.webp 400w,
               /post/guitar-build/images/21-tuner_hubf9f92e06294c96c0d13954f7273ac70_313069_8c4c03f701a853842e9410e23d1c95c0.webp 760w,
               /post/guitar-build/images/21-tuner_hubf9f92e06294c96c0d13954f7273ac70_313069_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/21-tuner_hubf9f92e06294c96c0d13954f7273ac70_313069_416c833e179dab1f69795016f89af831.webp&#34;
               width=&#34;760&#34;
               height=&#34;482&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;I swapped out the button so it matched the other 5 tuners. The replacement is actually considerably nicer, so tuning the low E is a much better experience than tuning the other strings (the stock tuners have a lot of play and uneven resistance when turning, but they&amp;rsquo;re certainly usable). The tuners are my first planned upgrade.&lt;/p&gt;
&lt;h2 id=&#34;the-final-product&#34;&gt;The final product&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/guitar-build/images/22-final_hu4f48bba3bf7a3406cc840daaa80b9cb0_761421_d53705990186134a377b6b5bed810510.webp 400w,
               /post/guitar-build/images/22-final_hu4f48bba3bf7a3406cc840daaa80b9cb0_761421_5a99c8ac141e4aec16588bac2f0d1c5d.webp 760w,
               /post/guitar-build/images/22-final_hu4f48bba3bf7a3406cc840daaa80b9cb0_761421_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/guitar-build/images/22-final_hu4f48bba3bf7a3406cc840daaa80b9cb0_761421_d53705990186134a377b6b5bed810510.webp&#34;
               width=&#34;433&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

I&amp;rsquo;m so happy with the final result. After some additional fretwork and a good setup, it plays beautifully and I can&amp;rsquo;t get enough of the classic strat sound. I used it as the lead guitar in a three-part cover of Fleetwood Mac&amp;rsquo;s Rhiannon (the main solo starts at 3:17):&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/w8zlhJ2tQlA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: I replaced the stock electronics (pickups, pots, switch, and jack) with a loaded pickguard from a Fender Player strat&amp;ndash;a huge upgrade in quality and tone! I also added locking tuners and a custom waterslide decal. Here&amp;rsquo;s a more recent recording with the guitar:&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/O6G8iAaBogw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Python Quine</title>
      <link>https://www.kirantomlinson.com/post/quine/</link>
      <pubDate>Fri, 19 Feb 2021 14:03:00 -0500</pubDate>
      <guid>https://www.kirantomlinson.com/post/quine/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;https://classes.cornell.edu/browse/roster/SP21/class/CS/6110&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CS 6110&lt;/a&gt; today, &lt;a href=&#34;https://www.cs.cornell.edu/~kozen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dexter&lt;/a&gt; mentioned &lt;a href=&#34;https://en.wikipedia.org/wiki/Quine_%28computing%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;quines&lt;/a&gt;: programs that output their own source code. I quickly got sucked into a very fun internet rabbit-hole, including &lt;a href=&#34;http://www.nyx.net/~gthompso/quine.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a collection of quines in different languages&lt;/a&gt;, &lt;a href=&#34;https://github.com/mame/quine-relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a 128-language cyclical quine&lt;/a&gt;, &lt;a href=&#34;https://github.com/mame/radiation-hardened-quine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a quine robust to mutations&lt;/a&gt;, and &lt;a href=&#34;https://no-gravity.github.io/html-quine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;an HTML page that displays its own source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I had to try it out for myself. Here&amp;rsquo;s what I came up with in Python 3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;abc&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ABC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;abstractmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ascii_lowercase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AbstractQuine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ABC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;imports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;from abc import ABC, abstractmethod&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;s1&#34;&gt;&amp;#39;from string import ascii_lowercase&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@abstractmethod&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Quine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AbstractQuine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;unmap&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;    &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{self.imports}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\n\n\nclass &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{self.__class__.__base__.__name__}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;({ascii_lowercase[:3].upper()}):\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;imports = {unmap(list(map(repr, self.imports.split(n))))}\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;@abstractmethod\n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;def print_code(self):\n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;...\n\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;class Quine(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{self.__class__.__base__.__name__}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;):\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;def print_code(self):\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{s}{s}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;unmap = lambda x: x[0].replace(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;)~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; + f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\\\\\&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;n{{s}}{{s}}{{s}}  &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; + x[1]\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{s * 2}s, n, q, t, r, b = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;, {repr(n)}, &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;\\\&amp;#39;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;, ~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}{t}{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}{b}{b}{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{s * 2}body = &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{r}{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;{body.replace(t, t + q + s[1] + b + n + ~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;3 * s + s[:3] + r + q)}&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{s * 2}exec(f&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;print(f\&amp;#34;{{body.replace(t, \&amp;#34;\&amp;#34;)}}\&amp;#34;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{q}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;)\n\n\n~&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;               &lt;span class=&#34;sa&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{self.__class__.__name__}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;().print_code()&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;print(f&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#34;)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Quine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;print_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some people might not like using &lt;code&gt;exec&lt;/code&gt;, but I think it&amp;rsquo;s fair game. To verify that this is a quine, you can save the above code in &lt;code&gt;quine.py&lt;/code&gt; and run &lt;code&gt;python3 quine.py | diff quine.py -&lt;/code&gt; (make sure to have one newline after &lt;code&gt;Quine().print_code()&lt;/code&gt;). Of course, much shorter quines are possible in Python, notably:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;c=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%r&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;;print(c&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%%&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;c)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;from &lt;a href=&#34;https://en.wikipedia.org/wiki/Quine_%28computing%29#Examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wikipedia&lt;/a&gt;, but it was fun to make something a bit longer work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wine Rating Data</title>
      <link>https://www.kirantomlinson.com/post/wines/</link>
      <pubDate>Sat, 13 Feb 2021 19:04:54 -0500</pubDate>
      <guid>https://www.kirantomlinson.com/post/wines/</guid>
      <description>&lt;p&gt;Before the semester went fully online due to COVID, I had a lot of fun tasting wines in &lt;a href=&#34;https://cornellsun.com/2019/10/10/inside-two-of-cornells-biggest-classes-wines-and-oceanography/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HADM 4300: Introduction to Wines&lt;/a&gt;. As part of the class, we tasted about six wines each week and recorded notes on them, including a 1-10 rating. Before leaving the class, I tasted and rated 32 wines from the US and France (they covered other regions later). After finding my notes from that semester, I thought it would be fun to do a bit of data analysis.&lt;/p&gt;
&lt;h2 id=&#34;the-big-questions-white-or-red-france-or-usa&#34;&gt;The big questions: White or red? France or USA?&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Forwarding&#34; src=&#34;colors.png&#34; &gt;
    &lt;br&gt;
    &lt;b&gt;Figure 1: Ratings by color&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Routing&#34; src=&#34;country.png&#34;&gt;
    &lt;br&gt;
    &lt;b&gt;Figure 2: Ratings by country&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;
&lt;p&gt;I tended to prefer reds to whites and (ever so slightly) French wines to US wines. However, with such a small dataset, the differences are not statistically significant (t-test p-values of 0.12 and 0.97 for red/white and France/USA).&lt;/p&gt;
&lt;h2 id=&#34;a-closer-look-regions-and-varieties&#34;&gt;A closer look: Regions and varieties&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Forwarding&#34; src=&#34;location.png&#34; &gt;
    &lt;br&gt;
    &lt;b&gt;Figure 3: Ratings by region&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Routing&#34; src=&#34;variety.png&#34;&gt;
    &lt;br&gt;
    &lt;b&gt;Figure 4: Ratings by dominant variety&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;
&lt;p&gt;Unsurprisingly, I liked &lt;a href=&#34;https://en.wikipedia.org/wiki/Ch%c3%a2teau_Langoa-Barton&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bordeaux reds&lt;/a&gt; (Cabernet Sauvignon over Merlot) and &lt;a href=&#34;http://mmdusa.net/portfolio/marc-bredif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Loire whites&lt;/a&gt;. Perhaps somewhat more surprising is New York topping the average rating list, thanks to a really great &lt;a href=&#34;https://liebcellars.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Long Island Cabernet Franc&lt;/a&gt; and a pretty good &lt;a href=&#34;https://www.clrwine.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Finger Lakes Riesling&lt;/a&gt;. Je suis vraiment désolé, Alsace, but I really didn&amp;rsquo;t like the funkiness of the &lt;a href=&#34;http://www.zindhumbrecht.fr/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gewürztraminer&lt;/a&gt; and &lt;a href=&#34;https://www.kermitlynch.com/our-wines/domaine-ostertag/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Muscat&lt;/a&gt; we tried. My favorite wine was a &lt;a href=&#34;http://mmdusa.net/portfolio/marc-bredif&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Loire Chenin Blanc&lt;/a&gt;, the only 9.5 I gave.&lt;/p&gt;
&lt;h2 id=&#34;other-factors-price-and-vintage&#34;&gt;Other factors: Price and vintage&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Forwarding&#34; src=&#34;price.png&#34; &gt;
    &lt;br&gt;
    &lt;b&gt;Figure 5: Rating vs price&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;td&gt; 
  &lt;p align=&#34;center&#34;&gt;
    &lt;img alt=&#34;Routing&#34; src=&#34;year.png&#34;&gt;
    &lt;br&gt;
    &lt;b&gt;Figure 6: Ratings by year&lt;/b&gt;
  &lt;/p&gt; 
&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;
&lt;p&gt;I don&amp;rsquo;t seem to have any particular preference for year or be influenced much by price (I gave all ratings price-blind). The Pearson correlation between price and rating is 0.19 (p=0.29).  However, the two most expensive wines we tasted were both fantastic: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ch%c3%a2teau_Langoa-Barton&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Château Langoa Barton&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Ch%c3%a2teau_P%c3%a9desclaux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Château Pédesclaux&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Try more Chenin Blanc&lt;/li&gt;
&lt;li&gt;When in doubt, go for a Bordeaux Cabernet Sauvignon&lt;/li&gt;
&lt;li&gt;Need more data!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;raw-data&#34;&gt;Raw data&lt;/h2&gt;
&lt;p&gt;In decending rating order:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Rating&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Year&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Region&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Dominant Variety&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Color&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Price&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Marc Brédif Classic&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Loire&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chenin Blanc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Lieb Cellars Estate&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;New York&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cabernet Franc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Château Langoa Barton&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cabernet Sauvignon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Château Pédesclaux&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;9.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cabernet Sauvignon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$70&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Vidal-Fleury&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rhône&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Marsanne&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Château de Sancerre&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Loire&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sauvignon Blanc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Château Graville-Lacoste&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sauvignon Blanc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;André Brunel Côtes du Rhône&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rhône&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Grenache&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Picket Fence&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cabernet Sauvignon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Barton &amp;amp; Guestier  Saint-Émilion&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Merlot&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cline Old Vine&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Zinfandel&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Domaine Philippe &amp;amp; Vincent Jaboulet&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2014&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rhône&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Syrah&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gramercy Cellars Lower East&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Washington&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Syrah&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Frei Brothers Sonoma Reserve&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chardonnay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Maison Champy Cuvée Edme&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Burgundy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chardonnay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hugel Classic&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alsace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pinot Gris&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Patricia Green Cellars Reserve&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Oregon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pinot Noir&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Louis Jadot Couvent des Jacobins&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Burgundy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pinot Noir&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pieuré St.-Flaurent Réserve&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Merlot&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Louis Jadot Chablis&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Burgundy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chardonnay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Columbia Winery&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Washington&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Merlot&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Chateau LaFayette Reneau Dry&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;New York&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Riesling&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Clos de la Sénaigerie Sur Lie&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.5&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Loire&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muscadet&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Château de Myrat&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bordeaux&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sémillon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Margerum M5 White&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Grenache Blanc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Charles Joguet&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Loire&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cabernet Franc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rose&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tarrica Wine Cellars&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pinot Noir&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sterling Vintner’s Collection&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;California&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sauvignon Blanc&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rainstorm&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Oregon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pinot Gris&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Domaine de Fa Roche Guillon&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2015&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Rhône&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gamay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;red&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Domaine Ostertag Fronholz&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;5.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alsace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muscat&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Domaine Zind-Humbrecht&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2.0&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2018&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alsace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gewürztraminer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;$27&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Town Hall Alerts</title>
      <link>https://www.kirantomlinson.com/post/townhall-alerts/</link>
      <pubDate>Wed, 02 Sep 2020 20:55:44 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/townhall-alerts/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update: I&amp;rsquo;m sure this no longer works given the changes to the Twitter API, not to mention the &lt;a href=&#34;https://www.theverge.com/2023/3/30/23662832/twitter-api-tiers-free-bot-novelty-accounts-basic-enterprice-monthly-price&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;absurd cost&lt;/a&gt;. &lt;a href=&#34;https://www.vox.com/culture/2022/11/22/23466381/leaving-twitter-x-saying-goodbye-social-media&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sad&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I recently revisited a project from last year and thought it would be fun to write about my experience with it. My girlfriend Sophia volunteers for the &lt;a href=&#34;https://townhallproject.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Town Hall Project&lt;/a&gt;, a non-partisan organization that helps connect engaged citizens with their representatives by making it easy to find information on town halls and office hours. Many legislators hold meetings with their constituents, but it can be difficult to hear about them (maybe the meeting times are posted on a website or perhaps just announced on Twitter). Volunteers for the Town Hall Project spend time searching through individual Facebook pages and Twitter feeds for mentions of town halls.&lt;/p&gt;
&lt;p&gt;To cut down on the time she was spending looking up 40 state senators&amp;rsquo; Twitters, Sophia asked if there was a way to get automatic Twitter notifications when one of her assigned legislators tweeted about a town hall. I thought there must be some existing way of doing this&amp;ndash;of course, there are a million services that offer Twitter alerts. Here&amp;rsquo;s a small sample: &lt;a href=&#34;https://warble.co&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Warble&lt;/a&gt;, &lt;a href=&#34;https://www.mytweetalerts.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MyTweetAlerts&lt;/a&gt;, &lt;a href=&#34;https://twilert.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twilert&lt;/a&gt;. However, many of these existing tools are paid services or didn&amp;rsquo;t do quite what we wanted. In particular, she wanted a daily digest including every relevant tweet from any of her monitored accounts since the last digest. Here&amp;rsquo;s a sample alert email my script sent from a few days ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There were 2 flagged tweets:&lt;/p&gt;
&lt;p&gt;Wayne D. Fontana (2020-09-02 17:47:52)&lt;br&gt;
Join me Sept. 29 at 6pm for a Tele-Town Hall on voting. I&amp;rsquo;ll be joined by PA Secretary of State Kathy Boockvar &amp;amp; @ACE_Fitzgerald to answer questions related to the voting process in PA &amp;amp; Allegheny County leading up to the Nov. 3 general election. &lt;a href=&#34;https://t.co/ojYLaf9skP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://t.co/ojYLaf9skP&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://twitter.com/WayneDFontana/status/1301215280585150466&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://twitter.com/WayneDFontana/status/1301215280585150466&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Senator John DiSanto (2020-09-01 21:37:03)&lt;br&gt;
Consider joining my live Telephone Town Hall, Wed, Sept. 2,  6-7 p.m. to hear about &amp;amp; discuss state issues impacting you &amp;amp; your family from the comfort &amp;amp; safety of your own home. Sign up at &lt;a href=&#34;https://t.co/N6yUl4SksL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://t.co/N6yUl4SksL&lt;/a&gt; so you receive a call, or listen to the livestream.&lt;br&gt;
&lt;a href=&#34;https://twitter.com/SenatorDiSanto/status/1300910567536971786&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://twitter.com/SenatorDiSanto/status/1300910567536971786&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&amp;rsquo;s the entry on the Town Hall Project website (submitted by Sophia after receiving the alert) for the first one:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /post/townhall-alerts/thp_hu42fb9fd2ec3aba77c4ad31cd0b768409_82198_713a88616124b69ae957ebfbc20d449e.webp 400w,
               /post/townhall-alerts/thp_hu42fb9fd2ec3aba77c4ad31cd0b768409_82198_ceaad19482f83c082722e0f37ce85e7d.webp 760w,
               /post/townhall-alerts/thp_hu42fb9fd2ec3aba77c4ad31cd0b768409_82198_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://www.kirantomlinson.com/post/townhall-alerts/thp_hu42fb9fd2ec3aba77c4ad31cd0b768409_82198_713a88616124b69ae957ebfbc20d449e.webp&#34;
               width=&#34;760&#34;
               height=&#34;200&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;As someone who had no previous experience working with the the Twitter API or sending emails through a Python script, it was an interesting project. The first step was figuring out how to fetch all tweets from an account since the previous day. The Twitter API handle for fetching tweets from an account is &lt;a href=&#34;https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GET statuses/user_timeline&lt;/a&gt;, which can be easily done in Python using &lt;a href=&#34;http://docs.tweepy.org/en/v3.5.0/api.html#API.user_timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this Tweepy function&lt;/a&gt;. However, this GET request returns a maximum of 200 tweets, and I wanted the script to be robust as possible (even to Twitter-fiend senators). So, I store the ID of the last processed tweet for each tracked user in a file and make requests in chunks of 200 until reaching the last processed tweet. Here&amp;rsquo;s a code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_tweet_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweepy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OAuthHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CONSUMER_KEY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CONSUMER_SECRET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_access_token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;api&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweepy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;new_tweets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screen_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                   &lt;span class=&#34;n&#34;&gt;tweet_mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;extended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;all_tweets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_tweets&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retweeted&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_tweet_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;oldest_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;oldest_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_tweet_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new_tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;older_tweets&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_timeline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screen_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                         &lt;span class=&#34;n&#34;&gt;max_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oldest_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet_mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;extended&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;all_tweets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;older_tweets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retweeted&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                              &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_tweet_ids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;account&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;oldest_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all_tweets&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(It was very easy to &lt;a href=&#34;https://developer.twitter.com/en/apply-for-access&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apply for API access&lt;/a&gt; and get the necessary credentials: &lt;code&gt;CONSUMER_KEY&lt;/code&gt;, &lt;code&gt;CONSUMER_SECRET&lt;/code&gt;, &lt;code&gt;ACCESS_TOKEN&lt;/code&gt;, &lt;code&gt;ACCESS_TOKEN_SECRET&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Then, it&amp;rsquo;s a simple matter of picking out which tweets to flag. Once that&amp;rsquo;s done, sending an email can be done with &lt;a href=&#34;https://docs.python.org/3/library/smtplib.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;smtplib&lt;/a&gt; and &lt;a href=&#34;https://docs.python.org/3/library/email.examples.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;email&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;send_alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flagged_tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;There were &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flagged_tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; flagged tweets:&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flagged_tweets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;created_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; (&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;created_at&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;full_text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://twitter.com/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;screen_name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/status/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MIMEText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;header&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SUBJECT_LINE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;smtplib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SMTP_SSL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;465&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALERT_FROM_EMAIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ALERT_FROM_PASSWORD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sendmail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ALERT_FROM_EMAIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ALERT_TO_EMAIL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;as_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We made a Gmail account dedicated to sending these emails (&lt;code&gt;ALERT_FROM_EMAIL&lt;/code&gt;). I added a couple of error-handling measures (for instance, you get a &lt;code&gt;tweepy.error.TweepError&lt;/code&gt; if the &lt;code&gt;screen_name&lt;/code&gt; does not exist&amp;ndash;this error actually happened to me in the last year when a &lt;a href=&#34;https://en.wikipedia.org/wiki/Mike_Folmer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;state senator&lt;/a&gt; was arrested and his Twitter account was deleted).&lt;/p&gt;
&lt;p&gt;The last step was getting the script to run every day, which is easy with &lt;a href=&#34;https://help.ubuntu.com/community/CronHowto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cron&lt;/a&gt;. Here&amp;rsquo;s a &lt;a href=&#34;townhall_alerts.txt&#34; download&gt;download link&lt;/a&gt; for the full script (with passwords and keys removed; annoyingly, this server doesn&amp;rsquo;t want to allow .py file downloads, so I&amp;rsquo;ve renamed it .txt).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CV of Failures</title>
      <link>https://www.kirantomlinson.com/post/failure-cv/</link>
      <pubDate>Tue, 21 Apr 2020 14:44:00 -0400</pubDate>
      <guid>https://www.kirantomlinson.com/post/failure-cv/</guid>
      <description>&lt;p&gt;&lt;em&gt;Update: Danielle Braff wrote a &lt;a href=&#34;https://www.nytimes.com/2023/04/25/style/college-rejection-parties.html?smid=url-share&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nice NY Times article&lt;/a&gt; about academic rejection and used my CV of Failures as an example!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t heard of Failure CVs, take a look at &lt;a href=&#34;https://www.nature.com/naturejobs/science/articles/10.1038/nj7322-467a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Melanie Stefan&amp;rsquo;s &lt;em&gt;Nature&lt;/em&gt; article&lt;/a&gt;, this &lt;a href=&#34;https://www.nytimes.com/2019/02/03/smarter-living/failure-resume.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;NY Times&lt;/em&gt; article&lt;/a&gt;, or &lt;a href=&#34;http://johanneshaushofer.com/wp-content/uploads/2023/12/Johannes_Haushofer_CV_of_Failures.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Princeton professor Johannes Haushofer&amp;rsquo;s&lt;/a&gt; (&lt;em&gt;edit: now at the National University of Singapore&lt;/em&gt;). I think it&amp;rsquo;s a nice way to remain grounded and to acknowledge the fact that rejections are a normal part of academic life that we don&amp;rsquo;t often present, especially online. In the spirit of these articles (and inspired by my recent NDSEG Fellowship rejection), here&amp;rsquo;s my CV of Failures, which I&amp;rsquo;ll continue to update over time along with my regular CV:&lt;/p&gt;


&lt;a href=&#34;https://www.kirantomlinson.com/uploads/failure-cv.pdf&#34;&gt;Kiran&#39;s CV of Failures&lt;/a&gt;

&lt;/br&gt;
</description>
    </item>
    
    <item>
      <title>Site Graph</title>
      <link>https://www.kirantomlinson.com/post/site-graph/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://www.kirantomlinson.com/post/site-graph/</guid>
      <description>&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis.css&#34; type=&#34;text/css&#34; /&gt;
&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/vis/4.16.1/vis-network.min.js&#34;&gt; &lt;/script&gt;
&lt;style type=&#34;text/css&#34;&gt;

        #mynetwork {
            width: 100%;
            height: 600px;
            background-color: #ffffff;
            border: 1px solid lightgray;
            position: relative;
            float: left;
        }


        /* position absolute is important and the container has to be relative or absolute as well. */
        div.popup {
            position:absolute;
            top:0px;
            left:0px;
            display:none;
            background-color:#f5f4ed;
            -moz-border-radius: 3px;
            -webkit-border-radius: 3px;
            border-radius: 3px;
            border: 1px solid #808074;
            box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);
        }

        /* hide the original tooltip */
        .vis-network-tooltip {
          display:none;
        }
        
&lt;/style&gt;
&lt;div id = &#34;mynetwork&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;text/javascript&#34;&gt;

    // initialize global variables.
    var edges;
    var nodes;
    var network; 
    var container;
    var options, data;

    
    // This method is responsible for drawing the graph, returns the drawn network
    function drawGraph() {
        var container = document.getElementById(&#39;mynetwork&#39;);
        
        

        // parsing and collecting nodes and edges from the python
        nodes = new vis.DataSet([{&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/categories/computational-biology/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://gohugo.io&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://gohugo.io\&#34;\u003ehttps://gohugo.io\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://sourcethemes.com/academic/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://sourcethemes.com/academic/\&#34;\u003ehttps://sourcethemes.com/academic/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://github.com/tomlinsonk&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://github.com/tomlinsonk\&#34;\u003ehttps://github.com/tomlinsonk\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/discrete-choice-models/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en\&#34;\u003ehttps://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.bbc.com/news/uk-scotland-44494577&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.bbc.com/news/uk-scotland-44494577\&#34;\u003ehttps://www.bbc.com/news/uk-scotland-44494577\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.formula1.com&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.formula1.com\&#34;\u003ehttps://www.formula1.com\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf\&#34;\u003ehttps://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.pnas.org/content/105/12/4633&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.pnas.org/content/105/12/4633\&#34;\u003ehttps://www.pnas.org/content/105/12/4633\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.ericegge.net&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.ericegge.net\&#34;\u003ehttps://www.ericegge.net\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4542783/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4542783/\&#34;\u003ehttps://www.ncbi.nlm.nih.gov/pmc/articles/PMC4542783/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.nasa.gov/exploration/systems/orion/index.html&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.nasa.gov/exploration/systems/orion/index.html\&#34;\u003ehttps://www.nasa.gov/exploration/systems/orion/index.html\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.premierleague.com&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.premierleague.com\&#34;\u003ehttps://www.premierleague.com\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://twitter.com/kiran_tomlinson&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://twitter.com/kiran_tomlinson\&#34;\u003ehttps://twitter.com/kiran_tomlinson\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://cs.carleton.edu/faculty/jondich/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://cs.carleton.edu/faculty/jondich/\&#34;\u003ehttp://cs.carleton.edu/faculty/jondich/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://google.com/search?tbm=isch\u0026q=armattan+chameleon+build&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://google.com/search?tbm=isch\u0026q=armattan+chameleon+build\&#34;\u003ehttps://google.com/search?tbm=isch\u0026q=armattan+chameleon+build\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://www.cs.carleton.edu/faculty/loesper/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://www.cs.carleton.edu/faculty/loesper/\&#34;\u003ehttp://www.cs.carleton.edu/faculty/loesper/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/files/cv.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/files/cv.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/files/cv.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.youtube.com/watch?v=mZZp76M4NGc&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.youtube.com/watch?v=mZZp76M4NGc\&#34;\u003ehttps://www.youtube.com/watch?v=mZZp76M4NGc\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://cs.carleton.edu/faculty/dlibenno/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://cs.carleton.edu/faculty/dlibenno/\&#34;\u003ehttp://cs.carleton.edu/faculty/dlibenno/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~arb/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~arb/\&#34;\u003ehttps://www.cs.cornell.edu/~arb/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://wpapool.com/rules-of-play/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://wpapool.com/rules-of-play/\&#34;\u003ehttps://wpapool.com/rules-of-play/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://bookstore.ams.org/stml-91&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://bookstore.ams.org/stml-91\&#34;\u003ehttps://bookstore.ams.org/stml-91\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://cs.carleton.edu/cs_comps/1819/jondich3/final-results/pages/home.html&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://cs.carleton.edu/cs_comps/1819/jondich3/final-results/pages/home.html\&#34;\u003ehttp://cs.carleton.edu/cs_comps/1819/jondich3/final-results/pages/home.html\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu\&#34;\u003ehttps://www.cs.cornell.edu\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/categories/discrete-choice/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-tomlinson-cyclic-cellular-automaton.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-tomlinson-cyclic-cellular-automaton.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-tomlinson-cyclic-cellular-automaton.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-CSC-slides.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-CSC-slides.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-CSC-slides.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-BIBM-slides.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-BIBM-slides.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-BIBM-slides.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/authors/layla-oesper/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://bitbucket.org/oesperlab/inference-effects-data&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://bitbucket.org/oesperlab/inference-effects-data\&#34;\u003ehttps://bitbucket.org/oesperlab/inference-effects-data\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-RECOMB-CCB-slides.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-RECOMB-CCB-slides.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-RECOMB-CCB-slides.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://doi.org/10.1109/BIBM.2018.8621437&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://doi.org/10.1109/BIBM.2018.8621437\&#34;\u003ehttps://doi.org/10.1109/BIBM.2018.8621437\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://arxiv.org/abs/2002.00421&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://arxiv.org/abs/2002.00421\&#34;\u003ehttps://arxiv.org/abs/2002.00421\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/authors/austin-r.-benson/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/authors/anna-ritz/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/authors/zach-dinardo/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://doi.org/10.1093/bioinformatics/btz869&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://doi.org/10.1093/bioinformatics/btz869\&#34;\u003ehttps://doi.org/10.1093/bioinformatics/btz869\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://github.com/tomlinsonk/choice-set-opt&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://github.com/tomlinsonk/choice-set-opt\&#34;\u003ehttps://github.com/tomlinsonk/choice-set-opt\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-tomlinson-examining-phylogeny-inference.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-tomlinson-examining-phylogeny-inference.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-tomlinson-examining-phylogeny-inference.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://doi.org/10.1186/s12920-019-0626-0&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://doi.org/10.1186/s12920-019-0626-0\&#34;\u003ehttps://doi.org/10.1186/s12920-019-0626-0\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://bitbucket.org/oesperlab/stereodist&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://bitbucket.org/oesperlab/stereodist\&#34;\u003ehttps://bitbucket.org/oesperlab/stereodist\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/2019-tomlinson-phylogeny-parameter-effects.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/2019-tomlinson-phylogeny-parameter-effects.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/2019-tomlinson-phylogeny-parameter-effects.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-dinardo-distance-measures.pdf&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-dinardo-distance-measures.pdf\&#34;\u003ehttps://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-dinardo-distance-measures.pdf\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#0072BB&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/\&#34;\u003ehttps://www.crummy.com/software/BeautifulSoup/bs4/doc/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://www.google.com/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://www.google.com/\&#34;\u003ehttp://www.google.com/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://sitebulb.com&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://sitebulb.com\&#34;\u003ehttps://sitebulb.com\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://pyvis.readthedocs.io/en/latest/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://pyvis.readthedocs.io/en/latest/\&#34;\u003ehttps://pyvis.readthedocs.io/en/latest/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;http://www.google.com&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;http://www.google.com\&#34;\u003ehttp://www.google.com\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.link-assistant.com/website-auditor/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.link-assistant.com/website-auditor/\&#34;\u003ehttps://www.link-assistant.com/website-auditor/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.google.com/search?q=query+string&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.google.com/search?q=query+string\&#34;\u003ehttps://www.google.com/search?q=query+string\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://google.com&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://google.com\&#34;\u003ehttps://google.com\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.github.com/tomlinsonk/site-graph&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.github.com/tomlinsonk/site-graph\&#34;\u003ehttps://www.github.com/tomlinsonk/site-graph\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example4.png&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example4.png\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/images/example4.png\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\&#34;\u003ehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://visjs.org&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://visjs.org\&#34;\u003ehttps://visjs.org\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://gephi.org&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://gephi.org\&#34;\u003ehttps://gephi.org\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://searchengineland.com/easy-visualizations-pagerank-page-groups-gephi-265716&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://searchengineland.com/easy-visualizations-pagerank-page-groups-gephi-265716\&#34;\u003ehttps://searchengineland.com/easy-visualizations-pagerank-page-groups-gephi-265716\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://requests.readthedocs.io/en/master/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://requests.readthedocs.io/en/master/\&#34;\u003ehttps://requests.readthedocs.io/en/master/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example2.png&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example2.png\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/images/example2.png\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example1.png&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example1.png\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/images/example1.png\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://github.com/tomlinsonk/site-graph/issues&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://github.com/tomlinsonk/site-graph/issues\&#34;\u003ehttps://github.com/tomlinsonk/site-graph/issues\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example5.png&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example5.png\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/images/example5.png\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.carleton.edu/math/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.carleton.edu/math/\&#34;\u003ehttps://www.carleton.edu/math/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://www.screamingfrog.co.uk/seo-spider/&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.screamingfrog.co.uk/seo-spider/\&#34;\u003ehttps://www.screamingfrog.co.uk/seo-spider/\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#2ECC71&#34;, &#34;id&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example3.png&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example3.png\&#34;\u003ehttps://www.cs.cornell.edu/~kt/post/site-graph/images/example3.png\u003c/a\u003e&#34;}, {&#34;color&#34;: &#34;#F45B69&#34;, &#34;id&#34;: &#34;https://en.wikipedia.org/wiki/Fragment_identifier#Examples&#34;, &#34;label&#34;: &#34;&#34;, &#34;shape&#34;: &#34;dot&#34;, &#34;size&#34;: 15, &#34;title&#34;: &#34;\u003ca href=\&#34;https://en.wikipedia.org/wiki/Fragment_identifier#Examples\&#34;\u003ehttps://en.wikipedia.org/wiki/Fragment_identifier#Examples\u003c/a\u003e&#34;}]);
        edges = new vis.DataSet([{&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.bbc.com/news/uk-scotland-44494577&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.formula1.com&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www-cs.stanford.edu/people/jure/pubs/graphrepresentation-ieee17.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.pnas.org/content/105/12/4633&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.ericegge.net&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4542783/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.nasa.gov/exploration/systems/orion/index.html&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.premierleague.com&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://twitter.com/kiran_tomlinson&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;http://cs.carleton.edu/faculty/jondich/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://google.com/search?tbm=isch\u0026q=armattan+chameleon+build&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;http://www.cs.carleton.edu/faculty/loesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/files/cv.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.youtube.com/watch?v=mZZp76M4NGc&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;http://cs.carleton.edu/faculty/dlibenno/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~arb/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://wpapool.com/rules-of-play/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://bookstore.ams.org/stml-91&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;http://cs.carleton.edu/cs_comps/1819/jondich3/final-results/pages/home.html&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/files/cv.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~arb/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://twitter.com/kiran_tomlinson&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-tomlinson-cyclic-cellular-automaton.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-CSC-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-BIBM-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://bitbucket.org/oesperlab/inference-effects-data&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-CSC-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-RECOMB-CCB-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/2019-tomlinson-cyclic-cellular-automaton.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-cyclic-cellular-automaton/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1109/BIBM.2018.8621437&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://arxiv.org/abs/2002.00421&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1093/bioinformatics/btz869&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk/choice-set-opt&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-tomlinson-examining-phylogeny-inference.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1186/s12920-019-0626-0&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://bitbucket.org/oesperlab/stereodist&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/2019-tomlinson-phylogeny-parameter-effects.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-dinardo-distance-measures.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://scholar.google.com/citations?user=7faaZ1cAAAAJ\u0026hl=en&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;http://www.google.com/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://sitebulb.com&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://pyvis.readthedocs.io/en/latest/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;http://www.google.com&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.link-assistant.com/website-auditor/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.google.com/search?q=query+string&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://twitter.com/kiran_tomlinson&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://google.com&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.github.com/tomlinsonk/site-graph&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example4.png&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/files/cv.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://visjs.org&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://gephi.org&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://searchengineland.com/easy-visualizations-pagerank-page-groups-gephi-265716&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://requests.readthedocs.io/en/master/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example2.png&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example1.png&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk/site-graph/issues&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example5.png&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.carleton.edu/math/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.screamingfrog.co.uk/seo-spider/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~arb/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/images/example3.png&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;, &#34;to&#34;: &#34;https://en.wikipedia.org/wiki/Fragment_identifier#Examples&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://arxiv.org/abs/2002.00421&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/austin-r.-benson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://github.com/tomlinsonk/choice-set-opt&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1186/s12920-019-0626-0&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/2019-tomlinson-phylogeny-parameter-effects.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;, &#34;to&#34;: &#34;https://bitbucket.org/oesperlab/inference-effects-data&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-tomlinson-phylogeny-parameter-effects/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2020-tomlinson-optimizing-choice-sets/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/discrete-choice-models/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/site-graph/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/discrete-choice/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-BIBM-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/2018-tomlinson-examining-phylogeny-inference.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2018-tomlinson-examining-phylogeny-inference/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1109/BIBM.2018.8621437&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/zach-dinardo/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-RECOMB-CCB-slides.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/layla-oesper/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://doi.org/10.1093/bioinformatics/btz869&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://bitbucket.org/oesperlab/stereodist&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/2019-dinardo-distance-measures.pdf&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/categories/computational-biology/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/kiran-tomlinson/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/post/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://sourcethemes.com/academic/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://gohugo.io&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;}, {&#34;arrows&#34;: &#34;to&#34;, &#34;from&#34;: &#34;https://www.cs.cornell.edu/~kt/authors/anna-ritz/&#34;, &#34;to&#34;: &#34;https://www.cs.cornell.edu/~kt/publication/2019-dinardo-distance-measures/&#34;}]);

        // adding nodes and edges to the graph
        data = {nodes: nodes, edges: edges};

        var options = {&#34;edges&#34;: {&#34;arrows&#34;: {&#34;to&#34;: {&#34;enabled&#34;: true, &#34;scaleFactor&#34;: 0.5}}, &#34;color&#34;: {&#34;inherit&#34;: true}, &#34;smooth&#34;: false}, &#34;physics&#34;: {&#34;barnesHut&#34;: {&#34;gravitationalConstant&#34;: -4750, &#34;springLength&#34;: 120, &#34;springConstant&#34;: 0.015}, &#34;minVelocity&#34;: 0.75}};
        
        

        

        network = new vis.Network(container, data, options);

        
        // make a custom popup
        var popup = document.createElement(&#34;div&#34;);
        popup.className = &#39;popup&#39;;
        popupTimeout = null;
        popup.addEventListener(&#39;mouseover&#39;, function () {
            console.log(popup)
            if (popupTimeout !== null) {
                clearTimeout(popupTimeout);
                popupTimeout = null;
            }
        });
        popup.addEventListener(&#39;mouseout&#39;, function () {
            if (popupTimeout === null) {
                hidePopup();
            }
        });
        container.appendChild(popup);


        // use the popup event to show
        network.on(&#34;showPopup&#34;, function (params) {
            showPopup(params);
        });

        // use the hide event to hide it
        network.on(&#34;hidePopup&#34;, function (params) {
            hidePopup();
        });


        // hiding the popup through css
        function hidePopup() {
            popupTimeout = setTimeout(function () { popup.style.display = &#39;none&#39;; }, 500);
        }

        // showing the popup
        function showPopup(nodeId) {
            // get the data from the vis.DataSet
            var nodeData = nodes.get([nodeId]);
            popup.innerHTML = nodeData[0].title;

            // get the position of the node
            var posCanvas = network.getPositions([nodeId])[nodeId];

            // get the bounding box of the node
            var boundingBox = network.getBoundingBox(nodeId);

            //position tooltip:
            posCanvas.x = posCanvas.x + 0.5 * (boundingBox.right - boundingBox.left);

            // convert coordinates to the DOM space
            var posDOM = network.canvasToDOM(posCanvas);

            // Give it an offset
            posDOM.x += 10;
            posDOM.y -= 20;

            // show and place the tooltip.
            popup.style.display = &#39;block&#39;;
            popup.style.top = posDOM.y + &#39;px&#39;;
            popup.style.left = posDOM.x + &#39;px&#39;;
        }
    
        return network;

    }

    drawGraph();

&lt;/script&gt;
&lt;p&gt;This is my website! (At the time of writing; for an up-to-date version, see the &lt;a href=&#34;https://www.kirantomlinson.com/graph/&#34;&gt;Site Graph&lt;/a&gt; page.)&lt;/p&gt;
&lt;p&gt;Each node is a page and edges represent links between pages. Blue nodes are internal HTML pages, green nodes are internal resources (anything not HTML, like PDFs), and red nodes are external pages. Any pages with errors would show up yellow (phew, none yet). Hover over a node to see its URL and try dragging nodes around to see the physics-based visualization. Fun fact, &lt;em&gt;this page itself is in the graph&lt;/em&gt;. (Can you spot it?)&lt;/p&gt;
&lt;p&gt;This visualization was made by a script I&amp;rsquo;ve been working on in my spare time, available at &lt;a href=&#34;https://www.github.com/tomlinsonk/site-graph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.github.com/tomlinsonk/site-graph&lt;/a&gt;. In this post, I&amp;rsquo;ll outline how it works, how you can use it (and customize it) to visualize your own website, and the issues I ran into developing it (which hopefully are both interesting and useful to anyone else making a web crawler for the first time).&lt;/p&gt;
&lt;p&gt;Here are some screenshots of other websites I&amp;rsquo;ve mapped.

















&lt;div class=&#34;gallery-grid&#34;&gt;

  
  
  
    
    
    
    
    
  
  
  &lt;div class=&#34;gallery-item gallery-item--medium&#34;&gt;
    &lt;a data-fancybox=&#34;gallery-site-graph&#34; href=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example1.png&#34; &gt;
      &lt;img src=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example1_hu8924d56540b16659d4ffcf61c59f67d4_724681_750x750_fit_q75_h2_lanczos_3.webp&#34; loading=&#34;lazy&#34; alt=&#34;example1.png&#34; width=&#34;703&#34; height=&#34;750&#34;&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  
    
    
    
    
    
  
  
  &lt;div class=&#34;gallery-item gallery-item--medium&#34;&gt;
    &lt;a data-fancybox=&#34;gallery-site-graph&#34; href=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example2.png&#34; &gt;
      &lt;img src=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example2_huc195dd1bab9ea1cc7e8ba94392fd642e_913283_750x750_fit_q75_h2_lanczos_3.webp&#34; loading=&#34;lazy&#34; alt=&#34;example2.png&#34; width=&#34;750&#34; height=&#34;720&#34;&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  
    
    
    
    
    
  
  
  &lt;div class=&#34;gallery-item gallery-item--medium&#34;&gt;
    &lt;a data-fancybox=&#34;gallery-site-graph&#34; href=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example3.png&#34; &gt;
      &lt;img src=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example3_hue233d5fc5af5a7d84f8e56eb9b232328_900132_750x750_fit_q75_h2_lanczos_3.webp&#34; loading=&#34;lazy&#34; alt=&#34;example3.png&#34; width=&#34;649&#34; height=&#34;750&#34;&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  
    
    
    
    
    
  
  
  &lt;div class=&#34;gallery-item gallery-item--medium&#34;&gt;
    &lt;a data-fancybox=&#34;gallery-site-graph&#34; href=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example4.png&#34; &gt;
      &lt;img src=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example4_hubef81e2ed2fd218175bce31a6b1baad7_1335714_750x750_fit_q75_h2_lanczos_3.webp&#34; loading=&#34;lazy&#34; alt=&#34;example4.png&#34; width=&#34;750&#34; height=&#34;625&#34;&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  
    
    
    
    
    
  
  
  &lt;div class=&#34;gallery-item gallery-item--medium&#34;&gt;
    &lt;a data-fancybox=&#34;gallery-site-graph&#34; href=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example5.png&#34; &gt;
      &lt;img src=&#34;https://www.kirantomlinson.com/media/albums/site-graph/example5_hu19b5f3cc1da70c96315fa59b10b3e965_1353701_750x750_fit_q75_h2_lanczos_3.webp&#34; loading=&#34;lazy&#34; alt=&#34;example5.png&#34; width=&#34;750&#34; height=&#34;711&#34;&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  

&lt;/div&gt;

The last one is the &lt;a href=&#34;https://www.carleton.edu/math/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Carleton College Math Department website&lt;/a&gt; and the first four are the homepages of CS professors at a few different institutions. (No prizes for quessing which two professors hosted course webpages on their personal sites.)&lt;/p&gt;
&lt;p&gt;Of course, there are existing tools for visualizing site graphs. &lt;a href=&#34;https://searchengineland.com/easy-visualizations-pagerank-page-groups-gephi-265716&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; an article that describes how to visualize websites with &lt;a href=&#34;https://www.screamingfrog.co.uk/seo-spider/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ScreamingFrog&lt;/a&gt; and &lt;a href=&#34;https://gephi.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gephi&lt;/a&gt;. &lt;a href=&#34;https://sitebulb.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sitebulb&lt;/a&gt; will probably do this too (and much more), but it&amp;rsquo;s a huge download and only has a 14-day free trial. &lt;a href=&#34;https://www.link-assistant.com/website-auditor/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebSite Auditor&lt;/a&gt; can also make interactive site graphs, but again it&amp;rsquo;s a big proprietary tool. There are probably a million more. So why make yet another site visualization tool? Well, &lt;em&gt;this script is small, easy to understand and run, open-source, hackable, and generates customizable and HTML-embeddable interactive visualizations.&lt;/em&gt; Plus it was fun to work on.&lt;/p&gt;
&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;The idea is pretty simple: the crawler starts at the base URL of a site and performs a depth-first search of the site, following links to reach new pages. It only follows outgoing links from internal pages, as the goal is to map a single website (and its outgoing links to external sites). The main body of the script looks roughly like this (many details omitted).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;crawl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;site_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;to_visit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;to_visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to_visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to_visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Fetch page&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;link_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Parse link URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link_url&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;link_url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startswith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;site_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;to_visit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;link_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The visualization uses a great library called &lt;a href=&#34;https://pyvis.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pyvis&lt;/a&gt;, which in turn uses &lt;a href=&#34;https://visjs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vis.js&lt;/a&gt; to draw and animate the graph. I&amp;rsquo;m using &lt;a href=&#34;https://requests.readthedocs.io/en/master/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;requests&lt;/a&gt; to fetch webpages and &lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beautiful Soup&lt;/a&gt; to parse them.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-it&#34;&gt;How to use it&lt;/h2&gt;
&lt;p&gt;Download the script from the &lt;a href=&#34;https://www.github.com/tomlinsonk/site-graph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub page&lt;/a&gt;, install the required python packages listed on the GitHub readme, and (replacing the URL with yours) run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py https://www.cs.cornell.edu/~kt/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure you use the full URL, including &lt;code&gt;https://www.&lt;/code&gt; and a trailing slash (e.g. &lt;a href=&#34;https://www.cs.cornell.edu/~kt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cs.cornell.edu/~kt/&lt;/a&gt; ). If you don&amp;rsquo;t use https or omit the trailing slash, you&amp;rsquo;ll get warnings. You can override them with &lt;code&gt;--force&lt;/code&gt; if you&amp;rsquo;re sure you want to. The larger the site, the longer the crawl will take (I wouldn&amp;rsquo;t run it on Wikipedia, for instance).&lt;/p&gt;
&lt;p&gt;To see all available options, run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py -h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change the visualization output file, use the &lt;code&gt;--vis-file&lt;/code&gt; argument (by default, the visualization is saved in &lt;code&gt;site.html&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py https://www.cs.cornell.edu/~kt/ --vis-file kt-site.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To change the graph data file, use the &lt;code&gt;--data-file&lt;/code&gt; argument (by default, this is saved in &lt;code&gt;crawl.pickle&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py https://www.cs.cornell.edu/~kt/ --data-file kt-crawl.pickle
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This data file is useful for customizing the visualization without performing a new crawl. See section below.&lt;/p&gt;
&lt;p&gt;To change the dimensions of the saved visualization in pixels, use the &lt;code&gt;--width&lt;/code&gt; and &lt;code&gt;--height&lt;/code&gt; arguments (defaults are 1000, 800):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py https://www.cs.cornell.edu/~kt/ --width &lt;span class=&#34;m&#34;&gt;1500&lt;/span&gt; --height &lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To also check links leaving the site for errors (e.g 404), use the &lt;code&gt;--visit-external&lt;/code&gt; flag (this is slower).&lt;/p&gt;
&lt;p&gt;The last three options, &lt;code&gt;--show-buttons&lt;/code&gt;, &lt;code&gt;--options&lt;/code&gt;, and &lt;code&gt;--from-data-file&lt;/code&gt; are for tweaking the visualization and are described below.&lt;/p&gt;
&lt;h2 id=&#34;customizing-the-visualization&#34;&gt;Customizing the visualization&lt;/h2&gt;
&lt;p&gt;The default physics settings can make larger site graphs oscillate wildly. Plus, you may want to adjust the sizes of your nodes, whether the edges are curved, or a number of other settings. Luckily, pyvis makes it easy to adjust all of these things. To do this, first run the crawler with the &lt;code&gt;--show-buttons&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py https://www.cs.cornell.edu/~kt/ --show-buttons
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will add a user interface to the visualization with which you can adjust every parameter. To make large graphs behave, I&amp;rsquo;ve found that reducing the gravitational constant helps (you can also try adding some overlap avoidance, increasing the spring length, adding damping, and reducing the maximum velocity). I&amp;rsquo;ve included a &lt;code&gt;options.txt&lt;/code&gt; file in the repo that I&amp;rsquo;ve found works pretty well.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve found settings you like, you can click the &amp;ldquo;generate options&amp;rdquo; button at the bottom of the page. Copy the generated text into a file, say &lt;code&gt;my-options.txt&lt;/code&gt;, and then re-run the script with the &lt;code&gt;--options&lt;/code&gt; argument to generate a visualization with no UI that uses the new options. To avoid performing another crawl, take advantage of the saved data file using the &lt;code&gt;--from-data-file&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 site_graph.py --from-data-file crawl.pickle --options my-options.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you want to change the node colors, you can modify the constants at the top of the &lt;code&gt;site_graph.py&lt;/code&gt; script.&lt;/p&gt;
&lt;h2 id=&#34;challenges-of-web-crawling&#34;&gt;Challenges of web crawling&lt;/h2&gt;
&lt;p&gt;The core of the script is very straightforward, but the web is messy. Here are some of the things I had to deal with.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Resolving links.&lt;/strong&gt; Some links on a website are &lt;em&gt;absolute&lt;/em&gt; (they contain the whole path of a webpage), while others are &lt;em&gt;relative&lt;/em&gt; (they have a path relative to the current page). Easy enough to handle using &lt;code&gt;urljoin(base_url, link_url)&lt;/code&gt; from Python&amp;rsquo;s &lt;code&gt;urllib.parse&lt;/code&gt; module. That&amp;rsquo;s not enough, however: some pages specify a different base URL than their own using the HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag. Moreover, the base tag itself often uses a path relative to the site&amp;rsquo;s root! So you really need to do &lt;code&gt;urljoin(site_url, urljoin(base_url, link_url))&lt;/code&gt;. That was a strange one to debug; before fixing it, my crawler kept trying to reach nonexistent pages like &lt;code&gt;website.com/about/about/about/.../about/&lt;/code&gt; in an infinite loop.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardizing URLs.&lt;/strong&gt; Even the same page may be referenced under several names. For instance, the links &lt;a href=&#34;https://google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://google.com&lt;/a&gt;, &lt;a href=&#34;https://www.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.google.com&lt;/a&gt;, and &lt;a href=&#34;https://www.google.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.google.com/&lt;/a&gt; all bring you to the same site. To avoid having this create different nodes in the graph, I ask &lt;em&gt;the page itself&lt;/em&gt; what it thinks its URL is. Before adding a URL to the &lt;code&gt;to_visit&lt;/code&gt; stack, I make a &lt;code&gt;HEAD&lt;/code&gt; request to the link URL using &lt;code&gt;requests.head(url)&lt;/code&gt;. This returns metadata about the page, including the final URL after any redirects. I can then use the URL returned by the &lt;code&gt;HEAD&lt;/code&gt; request as the canonical version of the link&amp;rsquo;s URL and translate future instances of the link URL into the canonical version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handling errors.&lt;/strong&gt; Many things can go wrong when trying to fetch a webpage. The URL may not be pointing to a real location (a 404 error), the page may be password-protected (a 401 error), the server may have serious issues (a 500 error), or the connection may simply hang for one network reason or another. One important measure is to set a timeout, so that if a certain amount of time passes without hearing back from the server (I use 10 seconds), you can move on. The &lt;code&gt;requests&lt;/code&gt; library handles this quite nicely with &lt;code&gt;requests.get(url, timeout=10)&lt;/code&gt;. &lt;code&gt;requests.get()&lt;/code&gt; also provides the HTTP status code and throws useful exceptions (like &lt;code&gt;Timeout&lt;/code&gt;) that I catch and handle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimizing downloaded data.&lt;/strong&gt; I designed this script for computer science academic sites, which tend to include PDFs of papers, large downloadable datasets, and other such bandwith-clogging (but valuable and important) artifacts. This is where the &lt;code&gt;HEAD&lt;/code&gt; request comess in handy again. In addition to the pages&amp;rsquo;s resolved URL, it also returns the page&amp;rsquo;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIME type&lt;/a&gt;, which indicates what type of thing the page is. I only add it to the stack (and thus ready it do be fully downloaded) if it&amp;rsquo;s an HTML page that could reveal more sweet, sweet links.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Query strings and fragment identifiers.&lt;/strong&gt; URLs sometimes contain &lt;em&gt;query strings&lt;/em&gt;, like &lt;a href=&#34;https://www.google.com/search?q=query&amp;#43;string&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.google.com/search?q=query+string&lt;/a&gt; (everything after the &lt;code&gt;?&lt;/code&gt;), which pass parameters to the server. They can also point to subsections of a page using &lt;em&gt;fragment identifiers&lt;/em&gt;, like &lt;a href=&#34;https://en.wikipedia.org/wiki/Fragment_identifier#Examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Fragment_identifier#Examples&lt;/a&gt; (everything after the &lt;code&gt;#&lt;/code&gt;). I decided to remove both of these from internal links, using more &lt;code&gt;urllib.parse&lt;/code&gt; methods: &lt;code&gt;urljoin(link_url, urlparse(link_url).path)&lt;/code&gt;, but I keep them in external links.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hope you find this amusing or perhaps even useful (e.g. for finding broken links). If you have any issues running the script or find bugs in it, either open up an &lt;a href=&#34;https://github.com/tomlinsonk/site-graph/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue on GitHub&lt;/a&gt; or send me an email. Happy crawling!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Discrete Choice Models</title>
      <link>https://www.kirantomlinson.com/post/discrete-choice-models/</link>
      <pubDate>Fri, 06 Mar 2020 17:34:01 -0500</pubDate>
      <guid>https://www.kirantomlinson.com/post/discrete-choice-models/</guid>
      <description>&lt;p&gt;&lt;em&gt;Choosing&lt;/em&gt; is one of the most common and important actions people take: we choose where to work, how to get there, who to vote for, and what to have for lunch. These scenarios are studied in economics, psychology, and (recently) computer science under the umbrella of &amp;ldquo;discrete choice&amp;rdquo; (as opposed to continuous choices, like how much milk to put in your coffee). In a discrete choice setting, we&amp;rsquo;re presented with a set of options (the &lt;em&gt;choice set&lt;/em&gt;) and we make a selection from the available items. Models describing how people make discrete choices have been studied since the &amp;rsquo;70s (by McFadden&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and Tversky&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, most notably). Here, I&amp;rsquo;ll grive a brief introduction to discrete choice models and lead up into my recent work with Austin Benson (edit: now accepted at ICML 2020).&lt;/p&gt;
&lt;h3 id=&#34;iia-and-plackett-luce&#34;&gt;IIA and Plackett-Luce&lt;/h3&gt;
&lt;p&gt;The most basic choice model is the Plackett-Luce model, under which the probability that someone picks an item $x$ from the choice set $C$ is proportional to the &lt;em&gt;utility&lt;/em&gt; $u_x$ of $x$ (some quantity describing its value to the chooser):&lt;/p&gt;
&lt;p&gt;$$\Pr(x \mid C) = \frac{u_x}{\sum_{y \in C} u_y}.$$&lt;/p&gt;
&lt;p&gt;This model can be derived from a seemingly reasonable assumption about choice, &lt;em&gt;the independence from irrelevant alternatives&lt;/em&gt; (IIA), also called Luce&amp;rsquo;s choice axiom&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. IIA states that the relative probabilities of picking items do not depend on the other items in the choice set. Formally, IIA holds if for all items $x, y$ that appear in both the choice sets $C$ and $C&amp;rsquo;$,&lt;/p&gt;
&lt;p&gt;$$\frac{\Pr(x \mid C)}{\Pr(y \mid C)} = \frac{\Pr(x \mid C&amp;rsquo;)}{\Pr(y \mid C&amp;rsquo;)}.$$&lt;/p&gt;
&lt;p&gt;For instance, if I prefer pizza to hot dogs, then I should still prefer pizza to hot dogs when you tell me that hamburgers are also available.&lt;/p&gt;
&lt;h3 id=&#34;multinomial-logit&#34;&gt;Multinomial logit&lt;/h3&gt;
&lt;p&gt;A slight variant of the Plackett-Luce model is the &lt;em&gt;multinomial logit model&lt;/em&gt; (MNL), in which choice probabilities are proportional to the exponentials of item utilities:&lt;/p&gt;
&lt;p&gt;$$\Pr(x \mid C) = \frac{e^{u_x}}{\sum_{y \in C} e^{u_y}}.$$&lt;/p&gt;
&lt;p&gt;In machine learning, this would be called a &lt;em&gt;softmax&lt;/em&gt; over item utilities. From an economic perspective, the MNL model has a nice property: if people draw random utilities from Gumbel distributions with means $u_x$ before picking the item with maximum observed utility, then the induced choice probabilities are exactly the MNL model. In other words, MNL is consistent with the economic principle that people are utility-maximizers. From a computer science persepctive, however, the more important thing is that we can learn maximum-likelihood utilities from observed choices since the log-likelihood function is convex.&lt;/p&gt;
&lt;h3 id=&#34;context-effects&#34;&gt;Context effects&lt;/h3&gt;
&lt;p&gt;While IIA is intuitively satisfying and leads to simple models, it often doesn&amp;rsquo;t hold in practice (see, e.g., seminal work by Tversky and Kahneman&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; and Tversky and Simonson&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;). For instance, similar items sometimes &lt;em&gt;cannibalize&lt;/em&gt; each other. Every presidential election cycle, we are reminded of the unfortunate phenomenon of vote-splitting (this motivates voting systems better than first-past-the-post, but that&amp;rsquo;s for another post). This is an example of an IIA violation: if 50% of people vote liberal and 50% vote moderate, then one candidate from each category would tie against each other. However, introduce one more liberal and the votes may look like 25%, 25%, 50%. These phenomena are termed &lt;em&gt;context effects&lt;/em&gt;. Another common context effect is the &lt;em&gt;compromise effect&lt;/em&gt;, which describes the tendency for people to choose intermediate options from the choice set (the classic example is that people tend to buy the middle-priced bottle of wine given three options).&lt;/p&gt;
&lt;h3 id=&#34;nested-logit&#34;&gt;Nested logit&lt;/h3&gt;
&lt;p&gt;Many alternative discrete choice models have been introduced to account for context effects. One is the &lt;em&gt;nested logit&lt;/em&gt; (NL) model, which is designed to account for the type of cannibalization described above. In a nested logit model, the items are the leaves of a tree whose internal nodes represent categories of items. Every node in the tree has an associated utility. For example:&lt;/p&gt;
&lt;div class=&#34;mermaid&#34;&gt;graph TD
	A(Start) --&gt; R(Moderate, 2)
	A --&gt; L(Liberal, 3)
	R --&gt; C(Arthur, 1)
 	R --&gt; D(Tricia, 5)
 	L --&gt; E(Zaphod, 10)
 	L --&gt; F(Ford, 3)
&lt;/div&gt;
&lt;p&gt;To choose in the NL model, you start at the root and repeatedly choose from the children of the current node according to an MNL model until reaching a leaf. In the NL instance above, the probability that I would vote for Zaphod is $$\frac{e^3}{e^2 + e^3} \cdot \frac{e^{10}}{e^{10} + e^3} \approx 73\%.$$ Like MNL, nested logit utilities can be efficiently inferred from choice data (inferring the correct tree structure is an open problem&amp;mdash;people typically design possible trees by hand and use hypothesis testing).&lt;/p&gt;
&lt;h3 id=&#34;cdm&#34;&gt;CDM&lt;/h3&gt;
&lt;p&gt;Another interesting discrete choice model is the &lt;em&gt;context-dependent random utility model&lt;/em&gt; (CDM) recently introduced by Seshadri, Peysakhovich, and Ugander&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;. This model is based on the idea that context effects can be approximated by pairwise interactions. That is, the utility of item $x$ in choice set $C$ depends on an intrinsic value term plus the effect of every other item in $C$ on $x$. In principle, the context effects exerted by the pair of items $\{w, y\}$ could be unrelated to the effects of $w$ and $y$ individually, but this approximation seems to be pretty good in practice.&lt;/p&gt;
&lt;p&gt;In the CDM, each item still has a utility $u_x$. In addition, every pair of distinct items $x, y$ has an associated &lt;em&gt;pull&lt;/em&gt; $p_{xy}$, which decribes the pull of $x$ on $y$&amp;rsquo;s utility (this notation differs slightly from the CDM paper). The choice probabilities are then:&lt;/p&gt;
&lt;p&gt;$$\Pr(x \mid C) = \frac{\exp\left(u_x + \sum_{z\in C \setminus x} p_{zx}\right)}{\sum_{y \in C} \exp \left(u_y + \sum_{z\in C \setminus x} p_{zy}\right)}$$&lt;/p&gt;
&lt;p&gt;Although it is considerably more complex, the CDM can still be efficiently learned from data! It also outperforms the MNL model in describing real-world choice datasets. I&amp;rsquo;ve found it very applicable as a powerful general choice model accounting for context effects that can be learned from data.&lt;/p&gt;
&lt;h3 id=&#34;vector-parametrization&#34;&gt;Vector parametrization&lt;/h3&gt;
&lt;p&gt;All of these choice models can be augmented by replacing fixed utilities with (possibly latent) feature and preference vectors. This has several advatanges, including learning relationships between similar items and between people with similar preferences. Suppose we want to model the choices of many individuals. We&amp;rsquo;ll denote the probability that person $a$ picks item $x$ given choice set $C$ using $\Pr(a \gets x \mid C)$. For MNL, suppose we have embedding vectors $\alpha_a$ for each person and vectors $\beta_x$ for each item. Then we can say the utility of an item to an agent is the inner product of their vectors:&lt;/p&gt;
&lt;p&gt;$$\Pr(a\gets x \mid C) = \frac{e^{\alpha_a^T \beta_x}}{\sum_{y\in C} e^{ \alpha_a^T\beta_y }}.$$&lt;/p&gt;
&lt;p&gt;Learning parameters from choice data then gives us low-dimensional embeddings of people and items. For the CDM, even the single-individual case is interesting. If you think about the placing the parameters $p_{zx}$ in a utility-adjusted matrix $P_{zx} = p_{zx}-u_x$ (with zeros on the diagonal), then we can find a low-rank approximation where each entry $P_{zx}$ is approximated by the inner product of two low-dimensional vectors $c_z$ and $t_z$. This is exactly the low-rank CDM:&lt;/p&gt;
&lt;p&gt;$$\Pr(x \mid C) = \frac{\exp\left(\left(\sum_{z \in C \setminus x} c_z\right)^T t_x \right)}{\sum_{y \in C}\exp\left(\left(\sum_{z \in C \setminus y} c_z\right)^T t_y \right)}.$$&lt;/p&gt;
&lt;h3 id=&#34;my-recent-work&#34;&gt;My recent work&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll now give a quick teaser for my &lt;a href=&#34;https://www.kirantomlinson.com/publication/2020-tomlinson-optimizing-choice-sets/&#34;&gt;recent paper with Austin&lt;/a&gt;. If a group of people are choosing between a set of options, one natural quantity is the amount of &lt;em&gt;disagreement&lt;/em&gt; in the group, or the sum of differences in choice probabilities:&lt;/p&gt;
&lt;p&gt;$$\sum_{a, b} \sum_{x \in C} \left| \Pr(a\gets x \mid C) - \Pr(b\gets x \mid C) \right|.$$&lt;/p&gt;
&lt;p&gt;One simple intervention we can make is to introduce additional items to the choice set, and we might wish to shrink the initial disagreement (to encourage consensus or to help the group reach a final decision). Thus, one of the problems we study is finding the set of items $Z$ that minimizes&lt;/p&gt;
&lt;p&gt;$$D(Z) = \sum_{a, b} \sum_{x \in C} \left| \Pr(a\gets x \mid C \cup Z) - \Pr(b\gets x \mid C \cup Z) \right|.$$&lt;/p&gt;
&lt;p&gt;This problem turns out to be quite hard: NP-hard, in fact, under all of the choice models discussed above. Another problem we consider is optimizing for the number of individuals whose favorite item is some target $x^*.$ This also turns out to be NP-hard when context effects are present, but it appears to be an easier problem than minimmizing disagreement in the sense that restricting these choice models can make promotion easy while leaving agreement hard.&lt;/p&gt;
&lt;p&gt;In addition to showing these problems hard, our paper also provides a general-purpose approximation algorithm for choice set optimization problems in the MNL model (with extensions for the CDM and NL models). If you&amp;rsquo;re interested, more details are available in the paper linked above.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;McFadden, D. Conditional logit analysis of qualitative choice behavior. In Zarembka, P. (ed.), &lt;em&gt;Frontiers in Econometrics&lt;/em&gt;, pp. 105–142. Academic Press, 1974.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;McFadden, D. Modeling the choice of residential location. &lt;em&gt;Transportation Research Record&lt;/em&gt;, (673), 1978.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Tversky, A. Elimination by aspects: A theory of choice. &lt;em&gt;Psychological Review&lt;/em&gt;, 79(4):281, 1972.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;Luce, R. D. Individual choice behavior. 1959.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Tversky, A. and Kahneman, D. The framing of decisions and the psychology of choice. &lt;em&gt;Science&lt;/em&gt;, 211(4481):453– 458, 1981.&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;Tversky, A. and Simonson, I. Context-dependent preferences. Management Science, 39(10):1179–1189, 1993.&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;
&lt;p&gt;Seshadri, A., Peysakhovich, A., and Ugander, J. Discovering context effects from raw choice data. In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;, pp. 5660–5669, 2019.&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
